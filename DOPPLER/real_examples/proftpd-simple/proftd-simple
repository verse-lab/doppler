; ModuleID = 'src/main.c'
source_filename = "src/main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.server_struc = type { %struct.server_struc*, %struct.server_struc*, %struct.pool*, %struct.XAset*, i8*, i8*, i8*, i32, i32, i32, i8, i32, i8, i8*, %struct.pr_netaddr_t*, %struct.conn_struc*, %struct.XAset*, i32, i32 }
%struct.pool = type { %union.block_hdr*, %union.block_hdr*, %struct.cleanup*, %struct.pool*, %struct.pool*, %struct.pool*, %struct.pool*, i8*, i8* }
%union.block_hdr = type opaque
%struct.cleanup = type opaque
%struct.pr_netaddr_t = type { i32, [256 x i8], i32, [46 x i8], i32 }
%struct.conn_struc = type { %struct.conn_struc*, %struct.pool*, i32, i32, i32, i32, i32, i32, i32, %struct.pr_netio_stream_t*, %struct.pr_netio_stream_t*, %struct.pr_netaddr_t*, i32, i8*, %struct.pr_netaddr_t*, i32 }
%struct.pr_netio_stream_t = type { %struct.pool*, i32, i32, i32, i32, i64, %struct.pr_buffer_t*, i8*, i32 }
%struct.pr_buffer_t = type { i8*, i64, i8*, i32 }
%struct.XAset = type { %struct.XAsetmember*, %struct.pool*, i32 (%struct.XAsetmember*, %struct.XAsetmember*)* }
%struct.XAsetmember = type { %struct.XAsetmember*, %struct.XAsetmember* }
%struct.rehash = type { %struct.rehash*, i8*, void (i8*)* }
%struct.cmd_struc = type { %struct.pool*, %struct.server_struc*, %struct.config_struc*, %struct.pool*, i32, i8*, i8**, i8*, i32, i32, %struct.privdata*, %struct.array_header* }
%struct.config_struc = type { %struct.config_struc*, %struct.config_struc*, i32, %struct.pool*, %struct.XAset*, i8*, i32, i8**, i64, i64, %struct.server_struc*, %struct.config_struc*, %struct.XAset* }
%struct.privdata = type { i8*, %union.anon, %struct.module_struc* }
%union.anon = type { i8* }
%struct.module_struc = type { %struct.module_struc*, %struct.module_struc*, i32, i8*, i32 ()*, i32 ()*, i8*, i8*, i32 }
%struct.array_header = type { %struct.pool*, i32, i32, i32, i8* }
%struct.session_t = type { %struct.pool*, i32, i32, %struct.pr_netaddr_t, i16, i8, i8*, i8*, i8*, [1024 x i8], [1024 x i8], %struct.config_struc*, i32, i32, i32, i32, %struct.array_header*, %struct.array_header*, i32, i32, i8*, i8*, i32, i32, %struct.pr_class_t*, i8*, i32, %struct.conn_struc*, %struct.conn_struc*, i32, i8*, %struct.config_struc*, i8*, i8*, i32, i64, %struct.anon, i64, i32, i32, i32 }
%struct.pr_class_t = type { %struct.pool*, i8*, i32, %struct.array_header*, %struct.pr_class_t* }
%struct.anon = type { %struct.pool*, i32, i32, i8*, i8*, i8*, i32, i32, %struct.timeval, i64, i64, i8*, i8* }
%struct.timeval = type { i64, i64 }
%struct.resp_struc = type { %struct.resp_struc*, i8*, i8* }
%struct._IO_FILE = type opaque
%struct.option_help = type { i8*, i8*, i8* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@TimeoutIdle = dso_local global i32 600, align 4, !dbg !0
@persistent_passwd = dso_local global i8 0, align 1, !dbg !61
@main_server = dso_local global %struct.server_struc* null, align 8, !dbg !63
@max_connects = dso_local global i64 0, align 8, !dbg !166
@max_connect_interval = dso_local global i32 1, align 4, !dbg !168
@is_master = dso_local global i8 1, align 1, !dbg !170
@mpid = dso_local global i32 0, align 4, !dbg !172
@rehash_list = dso_local global %struct.rehash* null, align 8, !dbg !177
@recvd_signal_flags = dso_local global i32 0, align 4, !dbg !188
@cmd_auth_chk = dso_local global i32 (%struct.cmd_struc*)* null, align 8, !dbg !203
@resp_buf = internal global [2048 x i8] zeroinitializer, align 16, !dbg !368
@.str = private unnamed_addr constant [5 x i8] c"%s\0D\0A\00", align 1
@__const.core_display_file.mg_max = private unnamed_addr constant [12 x i8] c"unlimited\00\00\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%C\00", align 1
@session = dso_local global %struct.session_t zeroinitializer, align 8, !dbg !274
@.str.2 = private unnamed_addr constant [7 x i8] c"(none)\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%V\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@resp_list = dso_local global %struct.resp_struc* null, align 8, !dbg !191
@resp_err_list = dso_local global %struct.resp_struc* null, align 8, !dbg !201
@.str.5 = private unnamed_addr constant [4 x i8] c"220\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str.7 = private unnamed_addr constant [15 x i8] c"D:nqd:c:p:lhtv\00", align 1
@opterr = external global i32, align 4
@optarg = external global i8*, align 8
@nodaemon = internal global i32 0, align 4, !dbg !381
@quiet = internal global i32 0, align 4, !dbg !383
@config_filename = internal global i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i32 0, i32 0), align 8, !dbg !385
@syntax_check = internal global i32 0, align 4, !dbg !387
@.str.8 = private unnamed_addr constant [39 x i8] c"Checking syntax of configuration file\0A\00", align 1
@stdout = external global %struct._IO_FILE*, align 8
@daemon_uid = dso_local global i32 0, align 4, !dbg !362
@daemon_gid = dso_local global i32 0, align 4, !dbg !364
@daemon_gids = dso_local global %struct.array_header* null, align 8, !dbg !366
@_dispatch.match_index_cache = internal global i32 -1, align 4, !dbg !373
@_dispatch.last_match = internal global i8* null, align 8, !dbg !379
@.str.9 = private unnamed_addr constant [28 x i8] c"/usr/local/etc/proftpd.conf\00", align 1
@.str.10 = private unnamed_addr constant [26 x i8] c"usage: proftpd [options]\0A\00", align 1
@opts_help = internal global [12 x %struct.option_help] [%struct.option_help { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.15, i32 0, i32 0) }, %struct.option_help { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.18, i32 0, i32 0) }, %struct.option_help { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.21, i32 0, i32 0) }, %struct.option_help { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.24, i32 0, i32 0) }, %struct.option_help { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.27, i32 0, i32 0) }, %struct.option_help { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.30, i32 0, i32 0) }, %struct.option_help { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.33, i32 0, i32 0) }, %struct.option_help { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.36, i32 0, i32 0) }, %struct.option_help { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.39, i32 0, i32 0) }, %struct.option_help { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.42, i32 0, i32 0) }, %struct.option_help { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.45, i32 0, i32 0) }, %struct.option_help zeroinitializer], align 16, !dbg !389
@.str.11 = private unnamed_addr constant [5 x i8] c" %s\0A\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"    %s\0A\00", align 1
@.str.13 = private unnamed_addr constant [7 x i8] c"--help\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"-h\00", align 1
@.str.15 = private unnamed_addr constant [22 x i8] c"Display proftpd usage\00", align 1
@.str.16 = private unnamed_addr constant [11 x i8] c"--nodaemon\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"-n\00", align 1
@.str.18 = private unnamed_addr constant [62 x i8] c"Disable background daemon mode and send all output to stderr)\00", align 1
@.str.19 = private unnamed_addr constant [8 x i8] c"--quiet\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c"-q\00", align 1
@.str.21 = private unnamed_addr constant [63 x i8] c"Don't send output to stderr when running with -n or --nodaemon\00", align 1
@.str.22 = private unnamed_addr constant [8 x i8] c"--debug\00", align 1
@.str.23 = private unnamed_addr constant [11 x i8] c"-d [level]\00", align 1
@.str.24 = private unnamed_addr constant [46 x i8] c"Set debugging level (0-9, 9 = most debugging)\00", align 1
@.str.25 = private unnamed_addr constant [9 x i8] c"--define\00", align 1
@.str.26 = private unnamed_addr constant [16 x i8] c"-D [definition]\00", align 1
@.str.27 = private unnamed_addr constant [34 x i8] c"Set arbitrary IfDefine definition\00", align 1
@.str.28 = private unnamed_addr constant [9 x i8] c"--config\00", align 1
@.str.29 = private unnamed_addr constant [17 x i8] c"-c [config-file]\00", align 1
@.str.30 = private unnamed_addr constant [37 x i8] c"Specify alternate configuration file\00", align 1
@.str.31 = private unnamed_addr constant [13 x i8] c"--persistent\00", align 1
@.str.32 = private unnamed_addr constant [9 x i8] c"-p [0|1]\00", align 1
@.str.33 = private unnamed_addr constant [49 x i8] c"Enable/disable default persistent passwd support\00", align 1
@.str.34 = private unnamed_addr constant [7 x i8] c"--list\00", align 1
@.str.35 = private unnamed_addr constant [3 x i8] c"-l\00", align 1
@.str.36 = private unnamed_addr constant [29 x i8] c"List all compiled-in modules\00", align 1
@.str.37 = private unnamed_addr constant [13 x i8] c"--configtest\00", align 1
@.str.38 = private unnamed_addr constant [3 x i8] c"-t\00", align 1
@.str.39 = private unnamed_addr constant [40 x i8] c"Test the syntax of the specified config\00", align 1
@.str.40 = private unnamed_addr constant [10 x i8] c"--version\00", align 1
@.str.41 = private unnamed_addr constant [3 x i8] c"-v\00", align 1
@.str.42 = private unnamed_addr constant [30 x i8] c"Print version number and exit\00", align 1
@.str.43 = private unnamed_addr constant [17 x i8] c"--version-status\00", align 1
@.str.44 = private unnamed_addr constant [4 x i8] c"-vv\00", align 1
@.str.45 = private unnamed_addr constant [44 x i8] c"Print extended version information and exit\00", align 1
@__const.fork_server.semfds = private unnamed_addr constant [2 x i32] [i32 -1, i32 -1], align 4
@cmd_loop.cmd_buf_size = internal global i64 -1, align 8, !dbg !399
@.str.46 = private unnamed_addr constant [13 x i8] c"cmd_buf_size\00", align 1
@.str.47 = private unnamed_addr constant [4 x i8] c"buf\00", align 1
@.str.48 = private unnamed_addr constant [3 x i8] c"cp\00", align 1
@.str.49 = private unnamed_addr constant [8 x i8] c"display\00", align 1
@.str.50 = private unnamed_addr constant [14 x i8] c"serveraddress\00", align 1
@.str.51 = private unnamed_addr constant [7 x i8] c"masq_c\00", align 1
@.str.52 = private unnamed_addr constant [2 x i8] c"i\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @my_strncasecmp(i8* noundef %s1, i8* noundef %s2, i64 noundef %n) #0 !dbg !414 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 8
  %s2.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  store i8* %s1, i8** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s1.addr, metadata !419, metadata !DIExpression()), !dbg !420
  store i8* %s2, i8** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s2.addr, metadata !421, metadata !DIExpression()), !dbg !422
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !423, metadata !DIExpression()), !dbg !424
  %0 = load i64, i64* %n.addr, align 8, !dbg !425
  %cmp = icmp eq i64 %0, 0, !dbg !427
  br i1 %cmp, label %if.then, label %if.end, !dbg !428

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !429
  br label %return, !dbg !429

if.end:                                           ; preds = %entry
  br label %while.cond, !dbg !430

while.cond:                                       ; preds = %if.end16, %if.end
  %1 = load i64, i64* %n.addr, align 8, !dbg !431
  %dec = add i64 %1, -1, !dbg !431
  store i64 %dec, i64* %n.addr, align 8, !dbg !431
  %cmp1 = icmp ne i64 %1, 0, !dbg !432
  br i1 %cmp1, label %land.rhs, label %land.end, !dbg !433

land.rhs:                                         ; preds = %while.cond
  %2 = load i8*, i8** %s1.addr, align 8, !dbg !434
  %3 = load i8, i8* %2, align 1, !dbg !435
  %conv = sext i8 %3 to i32, !dbg !435
  %call = call i32 @tolower(i32 noundef %conv) #10, !dbg !436
  %4 = load i8*, i8** %s2.addr, align 8, !dbg !437
  %5 = load i8, i8* %4, align 1, !dbg !438
  %conv2 = sext i8 %5 to i32, !dbg !438
  %call3 = call i32 @tolower(i32 noundef %conv2) #10, !dbg !439
  %cmp4 = icmp eq i32 %call, %call3, !dbg !440
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %6 = phi i1 [ false, %while.cond ], [ %cmp4, %land.rhs ], !dbg !441
  br i1 %6, label %while.body, label %while.end, !dbg !430

while.body:                                       ; preds = %land.end
  %7 = load i64, i64* %n.addr, align 8, !dbg !442
  %cmp6 = icmp eq i64 %7, 0, !dbg !445
  br i1 %cmp6, label %if.then15, label %lor.lhs.false, !dbg !446

lor.lhs.false:                                    ; preds = %while.body
  %8 = load i8*, i8** %s1.addr, align 8, !dbg !447
  %9 = load i8, i8* %8, align 1, !dbg !448
  %conv8 = sext i8 %9 to i32, !dbg !448
  %cmp9 = icmp eq i32 %conv8, 0, !dbg !449
  br i1 %cmp9, label %if.then15, label %lor.lhs.false11, !dbg !450

lor.lhs.false11:                                  ; preds = %lor.lhs.false
  %10 = load i8*, i8** %s2.addr, align 8, !dbg !451
  %11 = load i8, i8* %10, align 1, !dbg !452
  %conv12 = sext i8 %11 to i32, !dbg !452
  %cmp13 = icmp eq i32 %conv12, 0, !dbg !453
  br i1 %cmp13, label %if.then15, label %if.end16, !dbg !454

if.then15:                                        ; preds = %lor.lhs.false11, %lor.lhs.false, %while.body
  br label %while.end, !dbg !455

if.end16:                                         ; preds = %lor.lhs.false11
  %12 = load i8*, i8** %s1.addr, align 8, !dbg !456
  %incdec.ptr = getelementptr inbounds i8, i8* %12, i32 1, !dbg !456
  store i8* %incdec.ptr, i8** %s1.addr, align 8, !dbg !456
  %13 = load i8*, i8** %s2.addr, align 8, !dbg !457
  %incdec.ptr17 = getelementptr inbounds i8, i8* %13, i32 1, !dbg !457
  store i8* %incdec.ptr17, i8** %s2.addr, align 8, !dbg !457
  br label %while.cond, !dbg !430, !llvm.loop !458

while.end:                                        ; preds = %if.then15, %land.end
  %14 = load i8*, i8** %s1.addr, align 8, !dbg !461
  %15 = load i8, i8* %14, align 1, !dbg !462
  %conv18 = zext i8 %15 to i32, !dbg !462
  %call19 = call i32 @tolower(i32 noundef %conv18) #10, !dbg !463
  %16 = load i8*, i8** %s2.addr, align 8, !dbg !464
  %17 = load i8, i8* %16, align 1, !dbg !465
  %conv20 = zext i8 %17 to i32, !dbg !465
  %call21 = call i32 @tolower(i32 noundef %conv20) #10, !dbg !466
  %sub = sub nsw i32 %call19, %call21, !dbg !467
  store i32 %sub, i32* %retval, align 4, !dbg !468
  br label %return, !dbg !468

return:                                           ; preds = %while.end, %if.then
  %18 = load i32, i32* %retval, align 4, !dbg !469
  ret i32 %18, !dbg !469
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind readonly willreturn
declare i32 @tolower(i32 noundef) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_auth_check(i32 (%struct.cmd_struc*)* noundef %chk) #0 !dbg !470 {
entry:
  %chk.addr = alloca i32 (%struct.cmd_struc*)*, align 8
  store i32 (%struct.cmd_struc*)* %chk, i32 (%struct.cmd_struc*)** %chk.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (%struct.cmd_struc*)** %chk.addr, metadata !473, metadata !DIExpression()), !dbg !474
  %0 = load i32 (%struct.cmd_struc*)*, i32 (%struct.cmd_struc*)** %chk.addr, align 8, !dbg !475
  store i32 (%struct.cmd_struc*)* %0, i32 (%struct.cmd_struc*)** @cmd_auth_chk, align 8, !dbg !476
  ret void, !dbg !477
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @sstrncpy(i8* noundef %dest, i8* noundef %src, i64 noundef %n) #0 !dbg !478 {
entry:
  %retval = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %d = alloca i8*, align 8
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !481, metadata !DIExpression()), !dbg !482
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !483, metadata !DIExpression()), !dbg !484
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !485, metadata !DIExpression()), !dbg !486
  call void @llvm.dbg.declare(metadata i8** %d, metadata !487, metadata !DIExpression()), !dbg !488
  %0 = load i8*, i8** %dest.addr, align 8, !dbg !489
  store i8* %0, i8** %d, align 8, !dbg !488
  %1 = load i8*, i8** %dest.addr, align 8, !dbg !490
  %tobool = icmp ne i8* %1, null, !dbg !490
  br i1 %tobool, label %if.end, label %if.then, !dbg !492

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !493
  br label %return, !dbg !493

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %src.addr, align 8, !dbg !494
  %tobool1 = icmp ne i8* %2, null, !dbg !494
  br i1 %tobool1, label %land.lhs.true, label %if.end8, !dbg !496

land.lhs.true:                                    ; preds = %if.end
  %3 = load i8*, i8** %src.addr, align 8, !dbg !497
  %4 = load i8, i8* %3, align 1, !dbg !498
  %conv = sext i8 %4 to i32, !dbg !498
  %tobool2 = icmp ne i32 %conv, 0, !dbg !498
  br i1 %tobool2, label %if.then3, label %if.end8, !dbg !499

if.then3:                                         ; preds = %land.lhs.true
  br label %for.cond, !dbg !500

for.cond:                                         ; preds = %for.inc, %if.then3
  %5 = load i8*, i8** %src.addr, align 8, !dbg !502
  %6 = load i8, i8* %5, align 1, !dbg !505
  %conv4 = sext i8 %6 to i32, !dbg !505
  %tobool5 = icmp ne i32 %conv4, 0, !dbg !505
  br i1 %tobool5, label %land.rhs, label %land.end, !dbg !506

land.rhs:                                         ; preds = %for.cond
  %7 = load i64, i64* %n.addr, align 8, !dbg !507
  %cmp = icmp ugt i64 %7, 1, !dbg !508
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %8 = phi i1 [ false, %for.cond ], [ %cmp, %land.rhs ], !dbg !509
  br i1 %8, label %for.body, label %for.end, !dbg !510

for.body:                                         ; preds = %land.end
  %9 = load i8*, i8** %src.addr, align 8, !dbg !511
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1, !dbg !511
  store i8* %incdec.ptr, i8** %src.addr, align 8, !dbg !511
  %10 = load i8, i8* %9, align 1, !dbg !512
  %11 = load i8*, i8** %d, align 8, !dbg !513
  %incdec.ptr7 = getelementptr inbounds i8, i8* %11, i32 1, !dbg !513
  store i8* %incdec.ptr7, i8** %d, align 8, !dbg !513
  store i8 %10, i8* %11, align 1, !dbg !514
  br label %for.inc, !dbg !515

for.inc:                                          ; preds = %for.body
  %12 = load i64, i64* %n.addr, align 8, !dbg !516
  %dec = add i64 %12, -1, !dbg !516
  store i64 %dec, i64* %n.addr, align 8, !dbg !516
  br label %for.cond, !dbg !517, !llvm.loop !518

for.end:                                          ; preds = %land.end
  br label %if.end8, !dbg !520

if.end8:                                          ; preds = %for.end, %land.lhs.true, %if.end
  %13 = load i8*, i8** %d, align 8, !dbg !521
  store i8 0, i8* %13, align 1, !dbg !522
  %14 = load i8*, i8** %dest.addr, align 8, !dbg !523
  store i8* %14, i8** %retval, align 8, !dbg !524
  br label %return, !dbg !524

return:                                           ; preds = %if.end8, %if.then
  %15 = load i8*, i8** %retval, align 8, !dbg !525
  ret i8* %15, !dbg !525
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @push_array(%struct.array_header* noundef %arr) #0 !dbg !526 {
entry:
  %arr.addr = alloca %struct.array_header*, align 8
  %new_data = alloca i8*, align 8
  store %struct.array_header* %arr, %struct.array_header** %arr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.array_header** %arr.addr, metadata !529, metadata !DIExpression()), !dbg !530
  %0 = load %struct.array_header*, %struct.array_header** %arr.addr, align 8, !dbg !531
  %nelts = getelementptr inbounds %struct.array_header, %struct.array_header* %0, i32 0, i32 2, !dbg !533
  %1 = load i32, i32* %nelts, align 4, !dbg !533
  %2 = load %struct.array_header*, %struct.array_header** %arr.addr, align 8, !dbg !534
  %nalloc = getelementptr inbounds %struct.array_header, %struct.array_header* %2, i32 0, i32 3, !dbg !535
  %3 = load i32, i32* %nalloc, align 8, !dbg !535
  %cmp = icmp eq i32 %1, %3, !dbg !536
  br i1 %cmp, label %if.then, label %if.end, !dbg !537

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8** %new_data, metadata !538, metadata !DIExpression()), !dbg !540
  %4 = load %struct.array_header*, %struct.array_header** %arr.addr, align 8, !dbg !541
  %pool = getelementptr inbounds %struct.array_header, %struct.array_header* %4, i32 0, i32 0, !dbg !542
  %5 = load %struct.pool*, %struct.pool** %pool, align 8, !dbg !542
  %6 = load %struct.array_header*, %struct.array_header** %arr.addr, align 8, !dbg !543
  %nalloc1 = getelementptr inbounds %struct.array_header, %struct.array_header* %6, i32 0, i32 3, !dbg !544
  %7 = load i32, i32* %nalloc1, align 8, !dbg !544
  %8 = load %struct.array_header*, %struct.array_header** %arr.addr, align 8, !dbg !545
  %elt_size = getelementptr inbounds %struct.array_header, %struct.array_header* %8, i32 0, i32 1, !dbg !546
  %9 = load i32, i32* %elt_size, align 8, !dbg !546
  %mul = mul nsw i32 %7, %9, !dbg !547
  %mul2 = mul nsw i32 %mul, 2, !dbg !548
  %call = call i8* @pcalloc(%struct.pool* noundef %5, i32 noundef %mul2), !dbg !549
  store i8* %call, i8** %new_data, align 8, !dbg !540
  %10 = load i8*, i8** %new_data, align 8, !dbg !550
  %11 = load %struct.array_header*, %struct.array_header** %arr.addr, align 8, !dbg !551
  %elts = getelementptr inbounds %struct.array_header, %struct.array_header* %11, i32 0, i32 4, !dbg !552
  %12 = load i8*, i8** %elts, align 8, !dbg !552
  %13 = load %struct.array_header*, %struct.array_header** %arr.addr, align 8, !dbg !553
  %nalloc3 = getelementptr inbounds %struct.array_header, %struct.array_header* %13, i32 0, i32 3, !dbg !554
  %14 = load i32, i32* %nalloc3, align 8, !dbg !554
  %15 = load %struct.array_header*, %struct.array_header** %arr.addr, align 8, !dbg !555
  %elt_size4 = getelementptr inbounds %struct.array_header, %struct.array_header* %15, i32 0, i32 1, !dbg !556
  %16 = load i32, i32* %elt_size4, align 8, !dbg !556
  %mul5 = mul nsw i32 %14, %16, !dbg !557
  %conv = sext i32 %mul5 to i64, !dbg !553
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %12, i64 %conv, i1 false), !dbg !558
  %17 = load i8*, i8** %new_data, align 8, !dbg !559
  %18 = load %struct.array_header*, %struct.array_header** %arr.addr, align 8, !dbg !560
  %elts6 = getelementptr inbounds %struct.array_header, %struct.array_header* %18, i32 0, i32 4, !dbg !561
  store i8* %17, i8** %elts6, align 8, !dbg !562
  %19 = load %struct.array_header*, %struct.array_header** %arr.addr, align 8, !dbg !563
  %nalloc7 = getelementptr inbounds %struct.array_header, %struct.array_header* %19, i32 0, i32 3, !dbg !564
  %20 = load i32, i32* %nalloc7, align 8, !dbg !565
  %mul8 = mul nsw i32 %20, 2, !dbg !565
  store i32 %mul8, i32* %nalloc7, align 8, !dbg !565
  br label %if.end, !dbg !566

if.end:                                           ; preds = %if.then, %entry
  %21 = load %struct.array_header*, %struct.array_header** %arr.addr, align 8, !dbg !567
  %nelts9 = getelementptr inbounds %struct.array_header, %struct.array_header* %21, i32 0, i32 2, !dbg !568
  %22 = load i32, i32* %nelts9, align 4, !dbg !569
  %inc = add nsw i32 %22, 1, !dbg !569
  store i32 %inc, i32* %nelts9, align 4, !dbg !569
  %23 = load %struct.array_header*, %struct.array_header** %arr.addr, align 8, !dbg !570
  %elts10 = getelementptr inbounds %struct.array_header, %struct.array_header* %23, i32 0, i32 4, !dbg !571
  %24 = load i8*, i8** %elts10, align 8, !dbg !571
  %25 = load %struct.array_header*, %struct.array_header** %arr.addr, align 8, !dbg !572
  %elt_size11 = getelementptr inbounds %struct.array_header, %struct.array_header* %25, i32 0, i32 1, !dbg !573
  %26 = load i32, i32* %elt_size11, align 8, !dbg !573
  %27 = load %struct.array_header*, %struct.array_header** %arr.addr, align 8, !dbg !574
  %nelts12 = getelementptr inbounds %struct.array_header, %struct.array_header* %27, i32 0, i32 2, !dbg !575
  %28 = load i32, i32* %nelts12, align 4, !dbg !575
  %sub = sub nsw i32 %28, 1, !dbg !576
  %mul13 = mul nsw i32 %26, %sub, !dbg !577
  %idx.ext = sext i32 %mul13 to i64, !dbg !578
  %add.ptr = getelementptr inbounds i8, i8* %24, i64 %idx.ext, !dbg !578
  ret i8* %add.ptr, !dbg !579
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @pcalloc(%struct.pool* noundef %p, i32 noundef %sz) #0 !dbg !580 {
entry:
  %p.addr = alloca %struct.pool*, align 8
  %sz.addr = alloca i32, align 4
  %res = alloca i8*, align 8
  store %struct.pool* %p, %struct.pool** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pool** %p.addr, metadata !583, metadata !DIExpression()), !dbg !584
  store i32 %sz, i32* %sz.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %sz.addr, metadata !585, metadata !DIExpression()), !dbg !586
  call void @llvm.dbg.declare(metadata i8** %res, metadata !587, metadata !DIExpression()), !dbg !588
  %0 = load %struct.pool*, %struct.pool** %p.addr, align 8, !dbg !589
  %1 = load i32, i32* %sz.addr, align 4, !dbg !590
  %call = call i8* @palloc(%struct.pool* noundef %0, i32 noundef %1), !dbg !591
  store i8* %call, i8** %res, align 8, !dbg !588
  %2 = load i8*, i8** %res, align 8, !dbg !592
  %3 = load i32, i32* %sz.addr, align 4, !dbg !593
  %conv = sext i32 %3 to i64, !dbg !593
  call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 0, i64 %conv, i1 false), !dbg !594
  %4 = load i8*, i8** %res, align 8, !dbg !595
  ret i8* %4, !dbg !596
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @pstrdup(%struct.pool* noundef %p, i8* noundef %s) #0 !dbg !597 {
entry:
  %retval = alloca i8*, align 8
  %p.addr = alloca %struct.pool*, align 8
  %s.addr = alloca i8*, align 8
  %res = alloca i8*, align 8
  %len = alloca i64, align 8
  store %struct.pool* %p, %struct.pool** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pool** %p.addr, metadata !600, metadata !DIExpression()), !dbg !601
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !602, metadata !DIExpression()), !dbg !603
  call void @llvm.dbg.declare(metadata i8** %res, metadata !604, metadata !DIExpression()), !dbg !605
  call void @llvm.dbg.declare(metadata i64* %len, metadata !606, metadata !DIExpression()), !dbg !607
  %0 = load i8*, i8** %s.addr, align 8, !dbg !608
  %tobool = icmp ne i8* %0, null, !dbg !608
  br i1 %tobool, label %if.end, label %if.then, !dbg !610

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !611
  br label %return, !dbg !611

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %s.addr, align 8, !dbg !612
  %call = call i64 @strlen(i8* noundef %1), !dbg !613
  %add = add i64 %call, 1, !dbg !614
  store i64 %add, i64* %len, align 8, !dbg !615
  %2 = load %struct.pool*, %struct.pool** %p.addr, align 8, !dbg !616
  %3 = load i64, i64* %len, align 8, !dbg !617
  %conv = trunc i64 %3 to i32, !dbg !617
  %call1 = call i8* @palloc(%struct.pool* noundef %2, i32 noundef %conv), !dbg !618
  store i8* %call1, i8** %res, align 8, !dbg !619
  %4 = load i8*, i8** %res, align 8, !dbg !620
  %5 = load i8*, i8** %s.addr, align 8, !dbg !621
  %6 = load i64, i64* %len, align 8, !dbg !622
  %call2 = call i8* @sstrncpy(i8* noundef %4, i8* noundef %5, i64 noundef %6), !dbg !623
  %7 = load i8*, i8** %res, align 8, !dbg !624
  store i8* %7, i8** %retval, align 8, !dbg !625
  br label %return, !dbg !625

return:                                           ; preds = %if.end, %if.then
  %8 = load i8*, i8** %retval, align 8, !dbg !626
  ret i8* %8, !dbg !626
}

declare i64 @strlen(i8* noundef) #4

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @palloc(%struct.pool* noundef %p, i32 noundef %sz) #0 !dbg !627 {
entry:
  %p.addr = alloca %struct.pool*, align 8
  %sz.addr = alloca i32, align 4
  store %struct.pool* %p, %struct.pool** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pool** %p.addr, metadata !628, metadata !DIExpression()), !dbg !629
  store i32 %sz, i32* %sz.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %sz.addr, metadata !630, metadata !DIExpression()), !dbg !631
  ret i8* null, !dbg !632
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @pr_str_get_word(i8** noundef %cp, i32 noundef %flags) #0 !dbg !633 {
entry:
  %retval = alloca i8*, align 8
  %cp.addr = alloca i8**, align 8
  %flags.addr = alloca i32, align 4
  %ret = alloca i8*, align 8
  %dst = alloca i8*, align 8
  %quote_mode = alloca i8, align 1
  store i8** %cp, i8*** %cp.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %cp.addr, metadata !636, metadata !DIExpression()), !dbg !637
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !638, metadata !DIExpression()), !dbg !639
  call void @llvm.dbg.declare(metadata i8** %ret, metadata !640, metadata !DIExpression()), !dbg !641
  call void @llvm.dbg.declare(metadata i8** %dst, metadata !642, metadata !DIExpression()), !dbg !643
  call void @llvm.dbg.declare(metadata i8* %quote_mode, metadata !644, metadata !DIExpression()), !dbg !645
  store i8 0, i8* %quote_mode, align 1, !dbg !645
  %0 = load i8**, i8*** %cp.addr, align 8, !dbg !646
  %tobool = icmp ne i8** %0, null, !dbg !646
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !648

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %cp.addr, align 8, !dbg !649
  %2 = load i8*, i8** %1, align 8, !dbg !650
  %tobool1 = icmp ne i8* %2, null, !dbg !650
  br i1 %tobool1, label %lor.lhs.false2, label %if.then, !dbg !651

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i8**, i8*** %cp.addr, align 8, !dbg !652
  %4 = load i8*, i8** %3, align 8, !dbg !653
  %5 = load i8, i8* %4, align 1, !dbg !654
  %tobool3 = icmp ne i8 %5, 0, !dbg !654
  br i1 %tobool3, label %if.end, label %if.then, !dbg !655

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i8* null, i8** %retval, align 8, !dbg !656
  br label %return, !dbg !656

if.end:                                           ; preds = %lor.lhs.false2
  %6 = load i32, i32* %flags.addr, align 4, !dbg !657
  %and = and i32 %6, 2, !dbg !659
  %tobool4 = icmp ne i32 %and, 0, !dbg !659
  br i1 %tobool4, label %if.end11, label %if.then5, !dbg !660

if.then5:                                         ; preds = %if.end
  br label %while.cond, !dbg !661

while.cond:                                       ; preds = %while.body, %if.then5
  %7 = load i8**, i8*** %cp.addr, align 8, !dbg !663
  %8 = load i8*, i8** %7, align 8, !dbg !664
  %9 = load i8, i8* %8, align 1, !dbg !665
  %conv = sext i8 %9 to i32, !dbg !665
  %tobool6 = icmp ne i32 %conv, 0, !dbg !665
  br i1 %tobool6, label %land.rhs, label %land.end, !dbg !666

land.rhs:                                         ; preds = %while.cond
  %call = call i16** @__ctype_b_loc() #11, !dbg !667
  %10 = load i16*, i16** %call, align 8, !dbg !667
  %11 = load i8**, i8*** %cp.addr, align 8, !dbg !667
  %12 = load i8*, i8** %11, align 8, !dbg !667
  %13 = load i8, i8* %12, align 1, !dbg !667
  %conv7 = sext i8 %13 to i32, !dbg !667
  %idxprom = sext i32 %conv7 to i64, !dbg !667
  %arrayidx = getelementptr inbounds i16, i16* %10, i64 %idxprom, !dbg !667
  %14 = load i16, i16* %arrayidx, align 2, !dbg !667
  %conv8 = zext i16 %14 to i32, !dbg !667
  %and9 = and i32 %conv8, 8192, !dbg !667
  %tobool10 = icmp ne i32 %and9, 0, !dbg !666
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %15 = phi i1 [ false, %while.cond ], [ %tobool10, %land.rhs ], !dbg !668
  br i1 %15, label %while.body, label %while.end, !dbg !661

while.body:                                       ; preds = %land.end
  %16 = load i8**, i8*** %cp.addr, align 8, !dbg !669
  %17 = load i8*, i8** %16, align 8, !dbg !670
  %incdec.ptr = getelementptr inbounds i8, i8* %17, i32 1, !dbg !670
  store i8* %incdec.ptr, i8** %16, align 8, !dbg !670
  br label %while.cond, !dbg !661, !llvm.loop !671

while.end:                                        ; preds = %land.end
  br label %if.end11, !dbg !672

if.end11:                                         ; preds = %while.end, %if.end
  %18 = load i8**, i8*** %cp.addr, align 8, !dbg !673
  %19 = load i8*, i8** %18, align 8, !dbg !675
  %20 = load i8, i8* %19, align 1, !dbg !676
  %tobool12 = icmp ne i8 %20, 0, !dbg !676
  br i1 %tobool12, label %if.end14, label %if.then13, !dbg !677

if.then13:                                        ; preds = %if.end11
  store i8* null, i8** %retval, align 8, !dbg !678
  br label %return, !dbg !678

if.end14:                                         ; preds = %if.end11
  %21 = load i8**, i8*** %cp.addr, align 8, !dbg !679
  %22 = load i8*, i8** %21, align 8, !dbg !680
  store i8* %22, i8** %dst, align 8, !dbg !681
  store i8* %22, i8** %ret, align 8, !dbg !682
  %23 = load i32, i32* %flags.addr, align 4, !dbg !683
  %and15 = and i32 %23, 1, !dbg !685
  %tobool16 = icmp ne i32 %and15, 0, !dbg !685
  br i1 %tobool16, label %if.end22, label %if.then17, !dbg !686

if.then17:                                        ; preds = %if.end14
  %24 = load i8**, i8*** %cp.addr, align 8, !dbg !687
  %25 = load i8*, i8** %24, align 8, !dbg !690
  %26 = load i8, i8* %25, align 1, !dbg !691
  %conv18 = sext i8 %26 to i32, !dbg !691
  %cmp = icmp eq i32 %conv18, 35, !dbg !692
  br i1 %cmp, label %if.then20, label %if.end21, !dbg !693

if.then20:                                        ; preds = %if.then17
  store i8* null, i8** %retval, align 8, !dbg !694
  br label %return, !dbg !694

if.end21:                                         ; preds = %if.then17
  br label %if.end22, !dbg !695

if.end22:                                         ; preds = %if.end21, %if.end14
  %27 = load i8**, i8*** %cp.addr, align 8, !dbg !696
  %28 = load i8*, i8** %27, align 8, !dbg !698
  %29 = load i8, i8* %28, align 1, !dbg !699
  %conv23 = sext i8 %29 to i32, !dbg !699
  %cmp24 = icmp eq i32 %conv23, 34, !dbg !700
  br i1 %cmp24, label %if.then26, label %if.end28, !dbg !701

if.then26:                                        ; preds = %if.end22
  %30 = load i8, i8* %quote_mode, align 1, !dbg !702
  %inc = add i8 %30, 1, !dbg !702
  store i8 %inc, i8* %quote_mode, align 1, !dbg !702
  %31 = load i8**, i8*** %cp.addr, align 8, !dbg !704
  %32 = load i8*, i8** %31, align 8, !dbg !705
  %incdec.ptr27 = getelementptr inbounds i8, i8* %32, i32 1, !dbg !705
  store i8* %incdec.ptr27, i8** %31, align 8, !dbg !705
  br label %if.end28, !dbg !706

if.end28:                                         ; preds = %if.then26, %if.end22
  br label %while.cond29, !dbg !707

while.cond29:                                     ; preds = %if.end58, %if.end28
  %33 = load i8**, i8*** %cp.addr, align 8, !dbg !708
  %34 = load i8*, i8** %33, align 8, !dbg !709
  %35 = load i8, i8* %34, align 1, !dbg !710
  %conv30 = sext i8 %35 to i32, !dbg !710
  %tobool31 = icmp ne i32 %conv30, 0, !dbg !710
  br i1 %tobool31, label %land.rhs32, label %land.end46, !dbg !711

land.rhs32:                                       ; preds = %while.cond29
  %36 = load i8, i8* %quote_mode, align 1, !dbg !712
  %conv33 = sext i8 %36 to i32, !dbg !712
  %tobool34 = icmp ne i32 %conv33, 0, !dbg !712
  br i1 %tobool34, label %cond.true, label %cond.false, !dbg !712

cond.true:                                        ; preds = %land.rhs32
  %37 = load i8**, i8*** %cp.addr, align 8, !dbg !713
  %38 = load i8*, i8** %37, align 8, !dbg !714
  %39 = load i8, i8* %38, align 1, !dbg !715
  %conv35 = sext i8 %39 to i32, !dbg !715
  %cmp36 = icmp ne i32 %conv35, 34, !dbg !716
  %conv37 = zext i1 %cmp36 to i32, !dbg !716
  br label %cond.end, !dbg !712

cond.false:                                       ; preds = %land.rhs32
  %call38 = call i16** @__ctype_b_loc() #11, !dbg !717
  %40 = load i16*, i16** %call38, align 8, !dbg !717
  %41 = load i8**, i8*** %cp.addr, align 8, !dbg !717
  %42 = load i8*, i8** %41, align 8, !dbg !717
  %43 = load i8, i8* %42, align 1, !dbg !717
  %conv39 = sext i8 %43 to i32, !dbg !717
  %idxprom40 = sext i32 %conv39 to i64, !dbg !717
  %arrayidx41 = getelementptr inbounds i16, i16* %40, i64 %idxprom40, !dbg !717
  %44 = load i16, i16* %arrayidx41, align 2, !dbg !717
  %conv42 = zext i16 %44 to i32, !dbg !717
  %and43 = and i32 %conv42, 8192, !dbg !717
  %tobool44 = icmp ne i32 %and43, 0, !dbg !718
  %lnot = xor i1 %tobool44, true, !dbg !718
  %lnot.ext = zext i1 %lnot to i32, !dbg !718
  br label %cond.end, !dbg !712

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv37, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !712
  %tobool45 = icmp ne i32 %cond, 0, !dbg !711
  br label %land.end46

land.end46:                                       ; preds = %cond.end, %while.cond29
  %45 = phi i1 [ false, %while.cond29 ], [ %tobool45, %cond.end ], !dbg !719
  br i1 %45, label %while.body47, label %while.end61, !dbg !707

while.body47:                                     ; preds = %land.end46
  %46 = load i8**, i8*** %cp.addr, align 8, !dbg !720
  %47 = load i8*, i8** %46, align 8, !dbg !723
  %48 = load i8, i8* %47, align 1, !dbg !724
  %conv48 = sext i8 %48 to i32, !dbg !724
  %cmp49 = icmp eq i32 %conv48, 92, !dbg !725
  br i1 %cmp49, label %land.lhs.true, label %if.end58, !dbg !726

land.lhs.true:                                    ; preds = %while.body47
  %49 = load i8, i8* %quote_mode, align 1, !dbg !727
  %conv51 = sext i8 %49 to i32, !dbg !727
  %tobool52 = icmp ne i32 %conv51, 0, !dbg !727
  br i1 %tobool52, label %if.then53, label %if.end58, !dbg !728

if.then53:                                        ; preds = %land.lhs.true
  %50 = load i8**, i8*** %cp.addr, align 8, !dbg !729
  %51 = load i8*, i8** %50, align 8, !dbg !732
  %add.ptr = getelementptr inbounds i8, i8* %51, i64 1, !dbg !733
  %52 = load i8, i8* %add.ptr, align 1, !dbg !734
  %tobool54 = icmp ne i8 %52, 0, !dbg !734
  br i1 %tobool54, label %if.then55, label %if.end57, !dbg !735

if.then55:                                        ; preds = %if.then53
  %53 = load i8**, i8*** %cp.addr, align 8, !dbg !736
  %54 = load i8*, i8** %53, align 8, !dbg !737
  %incdec.ptr56 = getelementptr inbounds i8, i8* %54, i32 1, !dbg !737
  store i8* %incdec.ptr56, i8** %53, align 8, !dbg !737
  %55 = load i8, i8* %incdec.ptr56, align 1, !dbg !738
  %56 = load i8*, i8** %dst, align 8, !dbg !739
  store i8 %55, i8* %56, align 1, !dbg !740
  br label %if.end57, !dbg !741

if.end57:                                         ; preds = %if.then55, %if.then53
  br label %if.end58, !dbg !742

if.end58:                                         ; preds = %if.end57, %land.lhs.true, %while.body47
  %57 = load i8**, i8*** %cp.addr, align 8, !dbg !743
  %58 = load i8*, i8** %57, align 8, !dbg !744
  %59 = load i8, i8* %58, align 1, !dbg !745
  %60 = load i8*, i8** %dst, align 8, !dbg !746
  %incdec.ptr59 = getelementptr inbounds i8, i8* %60, i32 1, !dbg !746
  store i8* %incdec.ptr59, i8** %dst, align 8, !dbg !746
  store i8 %59, i8* %60, align 1, !dbg !747
  %61 = load i8**, i8*** %cp.addr, align 8, !dbg !748
  %62 = load i8*, i8** %61, align 8, !dbg !749
  %incdec.ptr60 = getelementptr inbounds i8, i8* %62, i32 1, !dbg !749
  store i8* %incdec.ptr60, i8** %61, align 8, !dbg !749
  br label %while.cond29, !dbg !707, !llvm.loop !750

while.end61:                                      ; preds = %land.end46
  %63 = load i8**, i8*** %cp.addr, align 8, !dbg !752
  %64 = load i8*, i8** %63, align 8, !dbg !754
  %65 = load i8, i8* %64, align 1, !dbg !755
  %tobool62 = icmp ne i8 %65, 0, !dbg !755
  br i1 %tobool62, label %if.then63, label %if.end65, !dbg !756

if.then63:                                        ; preds = %while.end61
  %66 = load i8**, i8*** %cp.addr, align 8, !dbg !757
  %67 = load i8*, i8** %66, align 8, !dbg !758
  %incdec.ptr64 = getelementptr inbounds i8, i8* %67, i32 1, !dbg !758
  store i8* %incdec.ptr64, i8** %66, align 8, !dbg !758
  br label %if.end65, !dbg !759

if.end65:                                         ; preds = %if.then63, %while.end61
  %68 = load i8*, i8** %dst, align 8, !dbg !760
  store i8 0, i8* %68, align 1, !dbg !761
  %69 = load i8*, i8** %ret, align 8, !dbg !762
  store i8* %69, i8** %retval, align 8, !dbg !763
  br label %return, !dbg !763

return:                                           ; preds = %if.end65, %if.then20, %if.then13, %if.then
  %70 = load i8*, i8** %retval, align 8, !dbg !764
  ret i8* %70, !dbg !764
}

; Function Attrs: nounwind readnone willreturn
declare i16** @__ctype_b_loc() #5

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.array_header* @make_array(%struct.pool* noundef %p, i32 noundef %nelts, i32 noundef %elt_size) #0 !dbg !765 {
entry:
  %p.addr = alloca %struct.pool*, align 8
  %nelts.addr = alloca i32, align 4
  %elt_size.addr = alloca i32, align 4
  %res = alloca %struct.array_header*, align 8
  store %struct.pool* %p, %struct.pool** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pool** %p.addr, metadata !768, metadata !DIExpression()), !dbg !769
  store i32 %nelts, i32* %nelts.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nelts.addr, metadata !770, metadata !DIExpression()), !dbg !771
  store i32 %elt_size, i32* %elt_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %elt_size.addr, metadata !772, metadata !DIExpression()), !dbg !773
  call void @llvm.dbg.declare(metadata %struct.array_header** %res, metadata !774, metadata !DIExpression()), !dbg !775
  %0 = load %struct.pool*, %struct.pool** %p.addr, align 8, !dbg !776
  %call = call i8* @palloc(%struct.pool* noundef %0, i32 noundef 32), !dbg !777
  %1 = bitcast i8* %call to %struct.array_header*, !dbg !778
  store %struct.array_header* %1, %struct.array_header** %res, align 8, !dbg !775
  %2 = load i32, i32* %nelts.addr, align 4, !dbg !779
  %cmp = icmp slt i32 %2, 1, !dbg !781
  br i1 %cmp, label %if.then, label %if.end, !dbg !782

if.then:                                          ; preds = %entry
  store i32 1, i32* %nelts.addr, align 4, !dbg !783
  br label %if.end, !dbg !784

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.pool*, %struct.pool** %p.addr, align 8, !dbg !785
  %4 = load i32, i32* %nelts.addr, align 4, !dbg !786
  %5 = load i32, i32* %elt_size.addr, align 4, !dbg !787
  %mul = mul nsw i32 %4, %5, !dbg !788
  %call1 = call i8* @pcalloc(%struct.pool* noundef %3, i32 noundef %mul), !dbg !789
  %6 = load %struct.array_header*, %struct.array_header** %res, align 8, !dbg !790
  %elts = getelementptr inbounds %struct.array_header, %struct.array_header* %6, i32 0, i32 4, !dbg !791
  store i8* %call1, i8** %elts, align 8, !dbg !792
  %7 = load %struct.pool*, %struct.pool** %p.addr, align 8, !dbg !793
  %8 = load %struct.array_header*, %struct.array_header** %res, align 8, !dbg !794
  %pool = getelementptr inbounds %struct.array_header, %struct.array_header* %8, i32 0, i32 0, !dbg !795
  store %struct.pool* %7, %struct.pool** %pool, align 8, !dbg !796
  %9 = load i32, i32* %elt_size.addr, align 4, !dbg !797
  %10 = load %struct.array_header*, %struct.array_header** %res, align 8, !dbg !798
  %elt_size2 = getelementptr inbounds %struct.array_header, %struct.array_header* %10, i32 0, i32 1, !dbg !799
  store i32 %9, i32* %elt_size2, align 8, !dbg !800
  %11 = load %struct.array_header*, %struct.array_header** %res, align 8, !dbg !801
  %nelts3 = getelementptr inbounds %struct.array_header, %struct.array_header* %11, i32 0, i32 2, !dbg !802
  store i32 0, i32* %nelts3, align 4, !dbg !803
  %12 = load i32, i32* %nelts.addr, align 4, !dbg !804
  %13 = load %struct.array_header*, %struct.array_header** %res, align 8, !dbg !805
  %nalloc = getelementptr inbounds %struct.array_header, %struct.array_header* %13, i32 0, i32 3, !dbg !806
  store i32 %12, i32* %nalloc, align 8, !dbg !807
  %14 = load %struct.array_header*, %struct.array_header** %res, align 8, !dbg !808
  ret %struct.array_header* %14, !dbg !809
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @sreplace(%struct.pool* noundef %p, i8* noundef %s, ...) #0 !dbg !810 {
entry:
  %retval = alloca i8*, align 8
  %p.addr = alloca %struct.pool*, align 8
  %s.addr = alloca i8*, align 8
  %args = alloca [1 x %struct.__va_list_tag], align 16
  %m = alloca i8*, align 8
  %r = alloca i8*, align 8
  %src = alloca i8*, align 8
  %cp = alloca i8*, align 8
  %mptr = alloca i8**, align 8
  %rptr = alloca i8**, align 8
  %marr = alloca [33 x i8*], align 16
  %rarr = alloca [33 x i8*], align 16
  %buf = alloca [1024 x i8], align 16
  %pbuf = alloca i8*, align 8
  %mlen = alloca i32, align 4
  %rlen = alloca i32, align 4
  %blen = alloca i32, align 4
  %dyn = alloca i32, align 4
  store %struct.pool* %p, %struct.pool** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pool** %p.addr, metadata !813, metadata !DIExpression()), !dbg !814
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !815, metadata !DIExpression()), !dbg !816
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %args, metadata !817, metadata !DIExpression()), !dbg !830
  call void @llvm.dbg.declare(metadata i8** %m, metadata !831, metadata !DIExpression()), !dbg !832
  call void @llvm.dbg.declare(metadata i8** %r, metadata !833, metadata !DIExpression()), !dbg !834
  call void @llvm.dbg.declare(metadata i8** %src, metadata !835, metadata !DIExpression()), !dbg !836
  %0 = load i8*, i8** %s.addr, align 8, !dbg !837
  store i8* %0, i8** %src, align 8, !dbg !836
  call void @llvm.dbg.declare(metadata i8** %cp, metadata !838, metadata !DIExpression()), !dbg !839
  call void @llvm.dbg.declare(metadata i8*** %mptr, metadata !840, metadata !DIExpression()), !dbg !841
  call void @llvm.dbg.declare(metadata i8*** %rptr, metadata !842, metadata !DIExpression()), !dbg !843
  call void @llvm.dbg.declare(metadata [33 x i8*]* %marr, metadata !844, metadata !DIExpression()), !dbg !848
  call void @llvm.dbg.declare(metadata [33 x i8*]* %rarr, metadata !849, metadata !DIExpression()), !dbg !850
  call void @llvm.dbg.declare(metadata [1024 x i8]* %buf, metadata !851, metadata !DIExpression()), !dbg !852
  %1 = bitcast [1024 x i8]* %buf to i8*, !dbg !852
  call void @llvm.memset.p0i8.i64(i8* align 16 %1, i8 0, i64 1024, i1 false), !dbg !852
  call void @llvm.dbg.declare(metadata i8** %pbuf, metadata !853, metadata !DIExpression()), !dbg !854
  store i8* null, i8** %pbuf, align 8, !dbg !854
  call void @llvm.dbg.declare(metadata i32* %mlen, metadata !855, metadata !DIExpression()), !dbg !856
  store i32 0, i32* %mlen, align 4, !dbg !856
  call void @llvm.dbg.declare(metadata i32* %rlen, metadata !857, metadata !DIExpression()), !dbg !858
  store i32 0, i32* %rlen, align 4, !dbg !858
  call void @llvm.dbg.declare(metadata i32* %blen, metadata !859, metadata !DIExpression()), !dbg !860
  call void @llvm.dbg.declare(metadata i32* %dyn, metadata !861, metadata !DIExpression()), !dbg !862
  store i32 1, i32* %dyn, align 4, !dbg !862
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 0, !dbg !863
  store i8* %arraydecay, i8** %cp, align 8, !dbg !864
  %2 = load i8*, i8** %cp, align 8, !dbg !865
  store i8 0, i8* %2, align 1, !dbg !866
  %arraydecay1 = getelementptr inbounds [33 x i8*], [33 x i8*]* %marr, i64 0, i64 0, !dbg !867
  %3 = bitcast i8** %arraydecay1 to i8*, !dbg !867
  call void @llvm.memset.p0i8.i64(i8* align 16 %3, i8 0, i64 264, i1 false), !dbg !867
  %arraydecay2 = getelementptr inbounds [33 x i8*], [33 x i8*]* %rarr, i64 0, i64 0, !dbg !868
  %4 = bitcast i8** %arraydecay2 to i8*, !dbg !868
  call void @llvm.memset.p0i8.i64(i8* align 16 %4, i8 0, i64 264, i1 false), !dbg !868
  %5 = load i8*, i8** %src, align 8, !dbg !869
  %call = call i64 @strlen(i8* noundef %5), !dbg !870
  %add = add i64 %call, 1, !dbg !871
  %conv = trunc i64 %add to i32, !dbg !870
  store i32 %conv, i32* %blen, align 4, !dbg !872
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0, !dbg !873
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*, !dbg !873
  call void @llvm.va_start(i8* %arraydecay34), !dbg !873
  br label %while.cond, !dbg !874

while.cond:                                       ; preds = %if.end, %entry
  %arraydecay5 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0, !dbg !875
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay5, i32 0, i32 0, !dbg !875
  %gp_offset = load i32, i32* %gp_offset_p, align 16, !dbg !875
  %fits_in_gp = icmp ule i32 %gp_offset, 40, !dbg !875
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem, !dbg !875

vaarg.in_reg:                                     ; preds = %while.cond
  %6 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay5, i32 0, i32 3, !dbg !875
  %reg_save_area = load i8*, i8** %6, align 16, !dbg !875
  %7 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset, !dbg !875
  %8 = bitcast i8* %7 to i8**, !dbg !875
  %9 = add i32 %gp_offset, 8, !dbg !875
  store i32 %9, i32* %gp_offset_p, align 16, !dbg !875
  br label %vaarg.end, !dbg !875

vaarg.in_mem:                                     ; preds = %while.cond
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay5, i32 0, i32 2, !dbg !875
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8, !dbg !875
  %10 = bitcast i8* %overflow_arg_area to i8**, !dbg !875
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8, !dbg !875
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8, !dbg !875
  br label %vaarg.end, !dbg !875

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi i8** [ %8, %vaarg.in_reg ], [ %10, %vaarg.in_mem ], !dbg !875
  %11 = load i8*, i8** %vaarg.addr, align 8, !dbg !875
  store i8* %11, i8** %m, align 8, !dbg !876
  %cmp = icmp ne i8* %11, null, !dbg !877
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !878

land.rhs:                                         ; preds = %vaarg.end
  %12 = load i32, i32* %mlen, align 4, !dbg !879
  %cmp7 = icmp slt i32 %12, 32, !dbg !880
  br label %land.end

land.end:                                         ; preds = %land.rhs, %vaarg.end
  %13 = phi i1 [ false, %vaarg.end ], [ %cmp7, %land.rhs ], !dbg !881
  br i1 %13, label %while.body, label %while.end, !dbg !874

while.body:                                       ; preds = %land.end
  %arraydecay9 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0, !dbg !882
  %gp_offset_p10 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay9, i32 0, i32 0, !dbg !882
  %gp_offset11 = load i32, i32* %gp_offset_p10, align 16, !dbg !882
  %fits_in_gp12 = icmp ule i32 %gp_offset11, 40, !dbg !882
  br i1 %fits_in_gp12, label %vaarg.in_reg13, label %vaarg.in_mem15, !dbg !882

vaarg.in_reg13:                                   ; preds = %while.body
  %14 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay9, i32 0, i32 3, !dbg !882
  %reg_save_area14 = load i8*, i8** %14, align 16, !dbg !882
  %15 = getelementptr i8, i8* %reg_save_area14, i32 %gp_offset11, !dbg !882
  %16 = bitcast i8* %15 to i8**, !dbg !882
  %17 = add i32 %gp_offset11, 8, !dbg !882
  store i32 %17, i32* %gp_offset_p10, align 16, !dbg !882
  br label %vaarg.end19, !dbg !882

vaarg.in_mem15:                                   ; preds = %while.body
  %overflow_arg_area_p16 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay9, i32 0, i32 2, !dbg !882
  %overflow_arg_area17 = load i8*, i8** %overflow_arg_area_p16, align 8, !dbg !882
  %18 = bitcast i8* %overflow_arg_area17 to i8**, !dbg !882
  %overflow_arg_area.next18 = getelementptr i8, i8* %overflow_arg_area17, i32 8, !dbg !882
  store i8* %overflow_arg_area.next18, i8** %overflow_arg_area_p16, align 8, !dbg !882
  br label %vaarg.end19, !dbg !882

vaarg.end19:                                      ; preds = %vaarg.in_mem15, %vaarg.in_reg13
  %vaarg.addr20 = phi i8** [ %16, %vaarg.in_reg13 ], [ %18, %vaarg.in_mem15 ], !dbg !882
  %19 = load i8*, i8** %vaarg.addr20, align 8, !dbg !882
  store i8* %19, i8** %r, align 8, !dbg !885
  %cmp21 = icmp eq i8* %19, null, !dbg !886
  br i1 %cmp21, label %if.then, label %if.end, !dbg !887

if.then:                                          ; preds = %vaarg.end19
  br label %while.end, !dbg !888

if.end:                                           ; preds = %vaarg.end19
  %20 = load i8*, i8** %r, align 8, !dbg !889
  %call23 = call i64 @strlen(i8* noundef %20), !dbg !890
  %21 = load i8*, i8** %m, align 8, !dbg !891
  %call24 = call i64 @strlen(i8* noundef %21), !dbg !892
  %sub = sub i64 %call23, %call24, !dbg !893
  %22 = load i32, i32* %blen, align 4, !dbg !894
  %conv25 = sext i32 %22 to i64, !dbg !894
  %add26 = add i64 %conv25, %sub, !dbg !894
  %conv27 = trunc i64 %add26 to i32, !dbg !894
  store i32 %conv27, i32* %blen, align 4, !dbg !894
  %23 = load i8*, i8** %m, align 8, !dbg !895
  %24 = load i32, i32* %mlen, align 4, !dbg !896
  %idxprom = sext i32 %24 to i64, !dbg !897
  %arrayidx = getelementptr inbounds [33 x i8*], [33 x i8*]* %marr, i64 0, i64 %idxprom, !dbg !897
  store i8* %23, i8** %arrayidx, align 8, !dbg !898
  %25 = load i8*, i8** %r, align 8, !dbg !899
  %26 = load i32, i32* %mlen, align 4, !dbg !900
  %inc = add nsw i32 %26, 1, !dbg !900
  store i32 %inc, i32* %mlen, align 4, !dbg !900
  %idxprom28 = sext i32 %26 to i64, !dbg !901
  %arrayidx29 = getelementptr inbounds [33 x i8*], [33 x i8*]* %rarr, i64 0, i64 %idxprom28, !dbg !901
  store i8* %25, i8** %arrayidx29, align 8, !dbg !902
  br label %while.cond, !dbg !874, !llvm.loop !903

while.end:                                        ; preds = %if.then, %land.end
  %arraydecay30 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0, !dbg !905
  %arraydecay3031 = bitcast %struct.__va_list_tag* %arraydecay30 to i8*, !dbg !905
  call void @llvm.va_end(i8* %arraydecay3031), !dbg !905
  %27 = load i32, i32* %blen, align 4, !dbg !906
  %cmp32 = icmp slt i32 %27, 8192, !dbg !908
  br i1 %cmp32, label %if.then34, label %if.end37, !dbg !909

if.then34:                                        ; preds = %while.end
  %28 = load %struct.pool*, %struct.pool** %p.addr, align 8, !dbg !910
  %29 = load i32, i32* %blen, align 4, !dbg !911
  %inc35 = add nsw i32 %29, 1, !dbg !911
  store i32 %inc35, i32* %blen, align 4, !dbg !911
  %call36 = call i8* @pcalloc(%struct.pool* noundef %28, i32 noundef %inc35), !dbg !912
  store i8* %call36, i8** %pbuf, align 8, !dbg !913
  store i8* %call36, i8** %cp, align 8, !dbg !914
  br label %if.end37, !dbg !915

if.end37:                                         ; preds = %if.then34, %while.end
  %30 = load i8*, i8** %pbuf, align 8, !dbg !916
  %tobool = icmp ne i8* %30, null, !dbg !916
  br i1 %tobool, label %if.end40, label %if.then38, !dbg !918

if.then38:                                        ; preds = %if.end37
  %arraydecay39 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 0, !dbg !919
  store i8* %arraydecay39, i8** %pbuf, align 8, !dbg !921
  store i8* %arraydecay39, i8** %cp, align 8, !dbg !922
  store i32 0, i32* %dyn, align 4, !dbg !923
  store i32 1024, i32* %blen, align 4, !dbg !924
  br label %if.end40, !dbg !925

if.end40:                                         ; preds = %if.then38, %if.end37
  br label %while.cond41, !dbg !926

while.cond41:                                     ; preds = %if.end91, %if.end40
  %31 = load i8*, i8** %src, align 8, !dbg !927
  %32 = load i8, i8* %31, align 1, !dbg !928
  %tobool42 = icmp ne i8 %32, 0, !dbg !926
  br i1 %tobool42, label %while.body43, label %while.end92, !dbg !926

while.body43:                                     ; preds = %while.cond41
  %arraydecay44 = getelementptr inbounds [33 x i8*], [33 x i8*]* %marr, i64 0, i64 0, !dbg !929
  store i8** %arraydecay44, i8*** %mptr, align 8, !dbg !932
  %arraydecay45 = getelementptr inbounds [33 x i8*], [33 x i8*]* %rarr, i64 0, i64 0, !dbg !933
  store i8** %arraydecay45, i8*** %rptr, align 8, !dbg !934
  br label %for.cond, !dbg !935

for.cond:                                         ; preds = %for.inc, %while.body43
  %33 = load i8**, i8*** %mptr, align 8, !dbg !936
  %34 = load i8*, i8** %33, align 8, !dbg !938
  %tobool46 = icmp ne i8* %34, null, !dbg !939
  br i1 %tobool46, label %for.body, label %for.end, !dbg !939

for.body:                                         ; preds = %for.cond
  %35 = load i8**, i8*** %mptr, align 8, !dbg !940
  %36 = load i8*, i8** %35, align 8, !dbg !942
  %call47 = call i64 @strlen(i8* noundef %36), !dbg !943
  %conv48 = trunc i64 %call47 to i32, !dbg !943
  store i32 %conv48, i32* %mlen, align 4, !dbg !944
  %37 = load i8**, i8*** %rptr, align 8, !dbg !945
  %38 = load i8*, i8** %37, align 8, !dbg !946
  %call49 = call i64 @strlen(i8* noundef %38), !dbg !947
  %conv50 = trunc i64 %call49 to i32, !dbg !947
  store i32 %conv50, i32* %rlen, align 4, !dbg !948
  %39 = load i8*, i8** %src, align 8, !dbg !949
  %40 = load i8**, i8*** %mptr, align 8, !dbg !951
  %41 = load i8*, i8** %40, align 8, !dbg !952
  %42 = load i32, i32* %mlen, align 4, !dbg !953
  %conv51 = sext i32 %42 to i64, !dbg !953
  %call52 = call i32 @strncmp(i8* noundef %39, i8* noundef %41, i64 noundef %conv51), !dbg !954
  %cmp53 = icmp eq i32 %call52, 0, !dbg !955
  br i1 %cmp53, label %if.then55, label %if.end73, !dbg !956

if.then55:                                        ; preds = %for.body
  %43 = load i8*, i8** %cp, align 8, !dbg !957
  %44 = load i8**, i8*** %rptr, align 8, !dbg !959
  %45 = load i8*, i8** %44, align 8, !dbg !960
  %46 = load i32, i32* %blen, align 4, !dbg !961
  %conv56 = sext i32 %46 to i64, !dbg !961
  %47 = load i8*, i8** %pbuf, align 8, !dbg !962
  %call57 = call i64 @strlen(i8* noundef %47), !dbg !963
  %sub58 = sub i64 %conv56, %call57, !dbg !964
  %call59 = call i8* @sstrncpy(i8* noundef %43, i8* noundef %45, i64 noundef %sub58), !dbg !965
  %48 = load i8*, i8** %cp, align 8, !dbg !966
  %49 = load i32, i32* %rlen, align 4, !dbg !968
  %idx.ext = sext i32 %49 to i64, !dbg !969
  %add.ptr = getelementptr inbounds i8, i8* %48, i64 %idx.ext, !dbg !969
  %50 = load i8*, i8** %pbuf, align 8, !dbg !970
  %sub.ptr.lhs.cast = ptrtoint i8* %add.ptr to i64, !dbg !971
  %sub.ptr.rhs.cast = ptrtoint i8* %50 to i64, !dbg !971
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !971
  %add60 = add nsw i64 %sub.ptr.sub, 1, !dbg !972
  %51 = load i32, i32* %blen, align 4, !dbg !973
  %conv61 = sext i32 %51 to i64, !dbg !973
  %cmp62 = icmp sgt i64 %add60, %conv61, !dbg !974
  br i1 %cmp62, label %if.then64, label %if.else, !dbg !975

if.then64:                                        ; preds = %if.then55
  %52 = load i8*, i8** %pbuf, align 8, !dbg !976
  %53 = load i32, i32* %blen, align 4, !dbg !978
  %idx.ext65 = sext i32 %53 to i64, !dbg !979
  %add.ptr66 = getelementptr inbounds i8, i8* %52, i64 %idx.ext65, !dbg !979
  %add.ptr67 = getelementptr inbounds i8, i8* %add.ptr66, i64 -1, !dbg !980
  store i8* %add.ptr67, i8** %cp, align 8, !dbg !981
  br label %done, !dbg !982

if.else:                                          ; preds = %if.then55
  %54 = load i32, i32* %rlen, align 4, !dbg !983
  %55 = load i8*, i8** %cp, align 8, !dbg !985
  %idx.ext68 = sext i32 %54 to i64, !dbg !985
  %add.ptr69 = getelementptr inbounds i8, i8* %55, i64 %idx.ext68, !dbg !985
  store i8* %add.ptr69, i8** %cp, align 8, !dbg !985
  br label %if.end70

if.end70:                                         ; preds = %if.else
  %56 = load i32, i32* %mlen, align 4, !dbg !986
  %57 = load i8*, i8** %src, align 8, !dbg !987
  %idx.ext71 = sext i32 %56 to i64, !dbg !987
  %add.ptr72 = getelementptr inbounds i8, i8* %57, i64 %idx.ext71, !dbg !987
  store i8* %add.ptr72, i8** %src, align 8, !dbg !987
  br label %for.end, !dbg !988

if.end73:                                         ; preds = %for.body
  br label %for.inc, !dbg !989

for.inc:                                          ; preds = %if.end73
  %58 = load i8**, i8*** %mptr, align 8, !dbg !990
  %incdec.ptr = getelementptr inbounds i8*, i8** %58, i32 1, !dbg !990
  store i8** %incdec.ptr, i8*** %mptr, align 8, !dbg !990
  %59 = load i8**, i8*** %rptr, align 8, !dbg !991
  %incdec.ptr74 = getelementptr inbounds i8*, i8** %59, i32 1, !dbg !991
  store i8** %incdec.ptr74, i8*** %rptr, align 8, !dbg !991
  br label %for.cond, !dbg !992, !llvm.loop !993

for.end:                                          ; preds = %if.end70, %for.cond
  %60 = load i8**, i8*** %mptr, align 8, !dbg !995
  %61 = load i8*, i8** %60, align 8, !dbg !997
  %tobool75 = icmp ne i8* %61, null, !dbg !997
  br i1 %tobool75, label %if.end91, label %if.then76, !dbg !998

if.then76:                                        ; preds = %for.end
  %62 = load i8*, i8** %cp, align 8, !dbg !999
  %63 = load i8*, i8** %pbuf, align 8, !dbg !1002
  %sub.ptr.lhs.cast77 = ptrtoint i8* %62 to i64, !dbg !1003
  %sub.ptr.rhs.cast78 = ptrtoint i8* %63 to i64, !dbg !1003
  %sub.ptr.sub79 = sub i64 %sub.ptr.lhs.cast77, %sub.ptr.rhs.cast78, !dbg !1003
  %add80 = add nsw i64 %sub.ptr.sub79, 1, !dbg !1004
  %64 = load i32, i32* %blen, align 4, !dbg !1005
  %conv81 = sext i32 %64 to i64, !dbg !1005
  %cmp82 = icmp sgt i64 %add80, %conv81, !dbg !1006
  br i1 %cmp82, label %if.then84, label %if.end88, !dbg !1007

if.then84:                                        ; preds = %if.then76
  %65 = load i8*, i8** %pbuf, align 8, !dbg !1008
  %66 = load i32, i32* %blen, align 4, !dbg !1010
  %idx.ext85 = sext i32 %66 to i64, !dbg !1011
  %add.ptr86 = getelementptr inbounds i8, i8* %65, i64 %idx.ext85, !dbg !1011
  %add.ptr87 = getelementptr inbounds i8, i8* %add.ptr86, i64 -1, !dbg !1012
  store i8* %add.ptr87, i8** %cp, align 8, !dbg !1013
  br label %if.end88, !dbg !1014

if.end88:                                         ; preds = %if.then84, %if.then76
  %67 = load i8*, i8** %src, align 8, !dbg !1015
  %incdec.ptr89 = getelementptr inbounds i8, i8* %67, i32 1, !dbg !1015
  store i8* %incdec.ptr89, i8** %src, align 8, !dbg !1015
  %68 = load i8, i8* %67, align 1, !dbg !1016
  %69 = load i8*, i8** %cp, align 8, !dbg !1017
  %incdec.ptr90 = getelementptr inbounds i8, i8* %69, i32 1, !dbg !1017
  store i8* %incdec.ptr90, i8** %cp, align 8, !dbg !1017
  store i8 %68, i8* %69, align 1, !dbg !1018
  br label %if.end91, !dbg !1019

if.end91:                                         ; preds = %if.end88, %for.end
  br label %while.cond41, !dbg !926, !llvm.loop !1020

while.end92:                                      ; preds = %while.cond41
  br label %done, !dbg !926

done:                                             ; preds = %while.end92, %if.then64
  call void @llvm.dbg.label(metadata !1022), !dbg !1023
  %70 = load i8*, i8** %cp, align 8, !dbg !1024
  store i8 0, i8* %70, align 1, !dbg !1025
  %71 = load i32, i32* %dyn, align 4, !dbg !1026
  %tobool93 = icmp ne i32 %71, 0, !dbg !1026
  br i1 %tobool93, label %if.then94, label %if.end95, !dbg !1028

if.then94:                                        ; preds = %done
  %72 = load i8*, i8** %pbuf, align 8, !dbg !1029
  store i8* %72, i8** %retval, align 8, !dbg !1030
  br label %return, !dbg !1030

if.end95:                                         ; preds = %done
  %73 = load %struct.pool*, %struct.pool** %p.addr, align 8, !dbg !1031
  %arraydecay96 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 0, !dbg !1032
  %call97 = call i8* @pstrdup(%struct.pool* noundef %73, i8* noundef %arraydecay96), !dbg !1033
  store i8* %call97, i8** %retval, align 8, !dbg !1034
  br label %return, !dbg !1034

return:                                           ; preds = %if.end95, %if.then94
  %74 = load i8*, i8** %retval, align 8, !dbg !1035
  ret i8* %74, !dbg !1035
}

; Function Attrs: nofree nosync nounwind willreturn
declare void @llvm.va_start(i8*) #7

; Function Attrs: nofree nosync nounwind willreturn
declare void @llvm.va_end(i8*) #7

declare i32 @strncmp(i8* noundef, i8* noundef, i64 noundef) #4

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @pr_response_send_raw(i8* noundef %fmt, ...) #0 !dbg !1036 {
entry:
  %fmt.addr = alloca i8*, align 8
  %msg = alloca [1 x %struct.__va_list_tag], align 16
  store i8* %fmt, i8** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %fmt.addr, metadata !1039, metadata !DIExpression()), !dbg !1040
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %msg, metadata !1041, metadata !DIExpression()), !dbg !1042
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %msg, i64 0, i64 0, !dbg !1043
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !1043
  call void @llvm.va_start(i8* %arraydecay1), !dbg !1043
  %0 = load i8*, i8** %fmt.addr, align 8, !dbg !1044
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %msg, i64 0, i64 0, !dbg !1045
  %call = call i32 @vsnprintf(i8* noundef getelementptr inbounds ([2048 x i8], [2048 x i8]* @resp_buf, i64 0, i64 0), i64 noundef 2048, i8* noundef %0, %struct.__va_list_tag* noundef %arraydecay2), !dbg !1046
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %msg, i64 0, i64 0, !dbg !1047
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*, !dbg !1047
  call void @llvm.va_end(i8* %arraydecay34), !dbg !1047
  store i8 0, i8* getelementptr inbounds ([2048 x i8], [2048 x i8]* @resp_buf, i64 0, i64 2047), align 1, !dbg !1048
  %call5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8* noundef getelementptr inbounds ([2048 x i8], [2048 x i8]* @resp_buf, i64 0, i64 0)), !dbg !1049
  ret void, !dbg !1050
}

declare i32 @vsnprintf(i8* noundef, i64 noundef, i8* noundef, %struct.__va_list_tag* noundef) #4

declare i32 @printf(i8* noundef, ...) #4

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @core_display_file(i8* noundef %numeric, i8* noundef %fn, i8* noundef %fs) #0 !dbg !1051 {
entry:
  %numeric.addr = alloca i8*, align 8
  %fn.addr = alloca i8*, align 8
  %fs.addr = alloca i8*, align 8
  %buf = alloca [1024 x i8], align 16
  %len = alloca i32, align 4
  %current_clients = alloca i32*, align 8
  %max_clients = alloca i32*, align 8
  %fs_size = alloca i64, align 8
  %p = alloca %struct.pool*, align 8
  %s = alloca %struct.XAset*, align 8
  %c = alloca %struct.config_struc*, align 8
  %serverfqdn = alloca i8*, align 8
  %outs = alloca i8*, align 8
  %mg_size = alloca [12 x i8], align 1
  %mg_size_units = alloca [12 x i8], align 1
  %mg_max = alloca [12 x i8], align 1
  %total_files_in = alloca [12 x i8], align 1
  %total_files_out = alloca [12 x i8], align 1
  %total_files_xfer = alloca [12 x i8], align 1
  %mg_class_limit = alloca [12 x i8], align 1
  %mg_cur = alloca [12 x i8], align 1
  %mg_xfer_bytes = alloca [12 x i8], align 1
  %mg_cur_class = alloca [12 x i8], align 1
  %mg_xfer_units = alloca [12 x i8], align 1
  %config_class_users = alloca [128 x i8], align 16
  %user = alloca i8*, align 8
  %mg_time = alloca i8*, align 8
  %first = alloca i8, align 1
  store i8* %numeric, i8** %numeric.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %numeric.addr, metadata !1054, metadata !DIExpression()), !dbg !1055
  store i8* %fn, i8** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %fn.addr, metadata !1056, metadata !DIExpression()), !dbg !1057
  store i8* %fs, i8** %fs.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %fs.addr, metadata !1058, metadata !DIExpression()), !dbg !1059
  call void @llvm.dbg.declare(metadata [1024 x i8]* %buf, metadata !1060, metadata !DIExpression()), !dbg !1061
  %0 = bitcast [1024 x i8]* %buf to i8*, !dbg !1061
  call void @llvm.memset.p0i8.i64(i8* align 16 %0, i8 0, i64 1024, i1 false), !dbg !1061
  call void @llvm.dbg.declare(metadata i32* %len, metadata !1062, metadata !DIExpression()), !dbg !1063
  call void @llvm.dbg.declare(metadata i32** %current_clients, metadata !1064, metadata !DIExpression()), !dbg !1066
  store i32* null, i32** %current_clients, align 8, !dbg !1066
  call void @llvm.dbg.declare(metadata i32** %max_clients, metadata !1067, metadata !DIExpression()), !dbg !1068
  store i32* null, i32** %max_clients, align 8, !dbg !1068
  call void @llvm.dbg.declare(metadata i64* %fs_size, metadata !1069, metadata !DIExpression()), !dbg !1070
  store i64 0, i64* %fs_size, align 8, !dbg !1070
  call void @llvm.dbg.declare(metadata %struct.pool** %p, metadata !1071, metadata !DIExpression()), !dbg !1072
  call void @llvm.dbg.declare(metadata %struct.XAset** %s, metadata !1073, metadata !DIExpression()), !dbg !1074
  call void @llvm.dbg.declare(metadata %struct.config_struc** %c, metadata !1075, metadata !DIExpression()), !dbg !1076
  store %struct.config_struc* null, %struct.config_struc** %c, align 8, !dbg !1076
  call void @llvm.dbg.declare(metadata i8** %serverfqdn, metadata !1077, metadata !DIExpression()), !dbg !1078
  %1 = load %struct.server_struc*, %struct.server_struc** @main_server, align 8, !dbg !1079
  %ServerFQDN = getelementptr inbounds %struct.server_struc, %struct.server_struc* %1, i32 0, i32 6, !dbg !1080
  %2 = load i8*, i8** %ServerFQDN, align 8, !dbg !1080
  store i8* %2, i8** %serverfqdn, align 8, !dbg !1078
  call void @llvm.dbg.declare(metadata i8** %outs, metadata !1081, metadata !DIExpression()), !dbg !1082
  call void @llvm.dbg.declare(metadata [12 x i8]* %mg_size, metadata !1083, metadata !DIExpression()), !dbg !1085
  %3 = bitcast [12 x i8]* %mg_size to i8*, !dbg !1085
  call void @llvm.memset.p0i8.i64(i8* align 1 %3, i8 0, i64 12, i1 false), !dbg !1085
  call void @llvm.dbg.declare(metadata [12 x i8]* %mg_size_units, metadata !1086, metadata !DIExpression()), !dbg !1087
  %4 = bitcast [12 x i8]* %mg_size_units to i8*, !dbg !1087
  call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 0, i64 12, i1 false), !dbg !1087
  call void @llvm.dbg.declare(metadata [12 x i8]* %mg_max, metadata !1088, metadata !DIExpression()), !dbg !1089
  %5 = bitcast [12 x i8]* %mg_max to i8*, !dbg !1089
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 getelementptr inbounds ([12 x i8], [12 x i8]* @__const.core_display_file.mg_max, i32 0, i32 0), i64 12, i1 false), !dbg !1089
  call void @llvm.dbg.declare(metadata [12 x i8]* %total_files_in, metadata !1090, metadata !DIExpression()), !dbg !1091
  %6 = bitcast [12 x i8]* %total_files_in to i8*, !dbg !1091
  call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 0, i64 12, i1 false), !dbg !1091
  call void @llvm.dbg.declare(metadata [12 x i8]* %total_files_out, metadata !1092, metadata !DIExpression()), !dbg !1093
  %7 = bitcast [12 x i8]* %total_files_out to i8*, !dbg !1093
  call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 0, i64 12, i1 false), !dbg !1093
  call void @llvm.dbg.declare(metadata [12 x i8]* %total_files_xfer, metadata !1094, metadata !DIExpression()), !dbg !1095
  %8 = bitcast [12 x i8]* %total_files_xfer to i8*, !dbg !1095
  call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 0, i64 12, i1 false), !dbg !1095
  call void @llvm.dbg.declare(metadata [12 x i8]* %mg_class_limit, metadata !1096, metadata !DIExpression()), !dbg !1097
  %9 = bitcast [12 x i8]* %mg_class_limit to i8*, !dbg !1097
  call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 0, i64 12, i1 false), !dbg !1097
  call void @llvm.dbg.declare(metadata [12 x i8]* %mg_cur, metadata !1098, metadata !DIExpression()), !dbg !1099
  %10 = bitcast [12 x i8]* %mg_cur to i8*, !dbg !1099
  call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 0, i64 12, i1 false), !dbg !1099
  call void @llvm.dbg.declare(metadata [12 x i8]* %mg_xfer_bytes, metadata !1100, metadata !DIExpression()), !dbg !1101
  %11 = bitcast [12 x i8]* %mg_xfer_bytes to i8*, !dbg !1101
  call void @llvm.memset.p0i8.i64(i8* align 1 %11, i8 0, i64 12, i1 false), !dbg !1101
  call void @llvm.dbg.declare(metadata [12 x i8]* %mg_cur_class, metadata !1102, metadata !DIExpression()), !dbg !1103
  %12 = bitcast [12 x i8]* %mg_cur_class to i8*, !dbg !1103
  call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 12, i1 false), !dbg !1103
  call void @llvm.dbg.declare(metadata [12 x i8]* %mg_xfer_units, metadata !1104, metadata !DIExpression()), !dbg !1105
  %13 = bitcast [12 x i8]* %mg_xfer_units to i8*, !dbg !1105
  call void @llvm.memset.p0i8.i64(i8* align 1 %13, i8 0, i64 12, i1 false), !dbg !1105
  call void @llvm.dbg.declare(metadata [128 x i8]* %config_class_users, metadata !1106, metadata !DIExpression()), !dbg !1110
  %14 = bitcast [128 x i8]* %config_class_users to i8*, !dbg !1110
  call void @llvm.memset.p0i8.i64(i8* align 16 %14, i8 0, i64 128, i1 false), !dbg !1110
  call void @llvm.dbg.declare(metadata i8** %user, metadata !1111, metadata !DIExpression()), !dbg !1112
  call void @llvm.dbg.declare(metadata i8** %mg_time, metadata !1113, metadata !DIExpression()), !dbg !1114
  call void @llvm.dbg.declare(metadata i8* %first, metadata !1115, metadata !DIExpression()), !dbg !1116
  store i8 1, i8* %first, align 1, !dbg !1116
  br label %while.cond, !dbg !1117

while.cond:                                       ; preds = %while.end, %entry
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 0, !dbg !1118
  %cmp = icmp ne i8* %arraydecay, null, !dbg !1119
  br i1 %cmp, label %while.body, label %while.end21, !dbg !1117

while.body:                                       ; preds = %while.cond
  %arrayidx = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 1023, !dbg !1120
  store i8 0, i8* %arrayidx, align 1, !dbg !1122
  %arraydecay1 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 0, !dbg !1123
  %call = call i64 @strlen(i8* noundef %arraydecay1), !dbg !1124
  %conv = trunc i64 %call to i32, !dbg !1124
  store i32 %conv, i32* %len, align 4, !dbg !1125
  br label %while.cond2, !dbg !1126

while.cond2:                                      ; preds = %while.body13, %while.body
  %15 = load i32, i32* %len, align 4, !dbg !1127
  %tobool = icmp ne i32 %15, 0, !dbg !1127
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !1128

land.rhs:                                         ; preds = %while.cond2
  %16 = load i32, i32* %len, align 4, !dbg !1129
  %sub = sub nsw i32 %16, 1, !dbg !1130
  %idxprom = sext i32 %sub to i64, !dbg !1131
  %arrayidx3 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %idxprom, !dbg !1131
  %17 = load i8, i8* %arrayidx3, align 1, !dbg !1131
  %conv4 = sext i8 %17 to i32, !dbg !1131
  %cmp5 = icmp eq i32 %conv4, 13, !dbg !1132
  br i1 %cmp5, label %lor.end, label %lor.rhs, !dbg !1133

lor.rhs:                                          ; preds = %land.rhs
  %18 = load i32, i32* %len, align 4, !dbg !1134
  %sub7 = sub nsw i32 %18, 1, !dbg !1135
  %idxprom8 = sext i32 %sub7 to i64, !dbg !1136
  %arrayidx9 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %idxprom8, !dbg !1136
  %19 = load i8, i8* %arrayidx9, align 1, !dbg !1136
  %conv10 = sext i8 %19 to i32, !dbg !1136
  %cmp11 = icmp eq i32 %conv10, 10, !dbg !1137
  br label %lor.end, !dbg !1133

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %20 = phi i1 [ true, %land.rhs ], [ %cmp11, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %while.cond2
  %21 = phi i1 [ false, %while.cond2 ], [ %20, %lor.end ], !dbg !1138
  br i1 %21, label %while.body13, label %while.end, !dbg !1126

while.body13:                                     ; preds = %land.end
  %22 = load i32, i32* %len, align 4, !dbg !1139
  %sub14 = sub nsw i32 %22, 1, !dbg !1141
  %idxprom15 = sext i32 %sub14 to i64, !dbg !1142
  %arrayidx16 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %idxprom15, !dbg !1142
  store i8 0, i8* %arrayidx16, align 1, !dbg !1143
  %23 = load i32, i32* %len, align 4, !dbg !1144
  %dec = add nsw i32 %23, -1, !dbg !1144
  store i32 %dec, i32* %len, align 4, !dbg !1144
  br label %while.cond2, !dbg !1126, !llvm.loop !1145

while.end:                                        ; preds = %land.end
  %24 = load %struct.pool*, %struct.pool** %p, align 8, !dbg !1147
  %arraydecay17 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 0, !dbg !1148
  %25 = load i8, i8* getelementptr inbounds (%struct.session_t, %struct.session_t* @session, i32 0, i32 9, i64 0), align 8, !dbg !1149
  %conv18 = sext i8 %25 to i32, !dbg !1149
  %tobool19 = icmp ne i32 %conv18, 0, !dbg !1149
  %26 = zext i1 %tobool19 to i64, !dbg !1149
  %cond = select i1 %tobool19, i8* getelementptr inbounds (%struct.session_t, %struct.session_t* @session, i32 0, i32 9, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), !dbg !1149
  %27 = load %struct.server_struc*, %struct.server_struc** @main_server, align 8, !dbg !1150
  %ServerName = getelementptr inbounds %struct.server_struc, %struct.server_struc* %27, i32 0, i32 4, !dbg !1151
  %28 = load i8*, i8** %ServerName, align 8, !dbg !1151
  %call20 = call i8* (%struct.pool*, i8*, ...) @sreplace(%struct.pool* noundef %24, i8* noundef %arraydecay17, i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* noundef %cond, i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* noundef %28, i8* noundef null), !dbg !1152
  store i8* %call20, i8** %outs, align 8, !dbg !1153
  %29 = load i8*, i8** %outs, align 8, !dbg !1154
  call void (i8*, ...) @pr_response_send_raw(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i8* noundef %29), !dbg !1155
  br label %while.cond, !dbg !1117, !llvm.loop !1156

while.end21:                                      ; preds = %while.cond
  ret i32 0, !dbg !1158
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @pr_cmd_dispatch(%struct.cmd_struc* noundef %cmd) #0 !dbg !1159 {
entry:
  %cmd.addr = alloca %struct.cmd_struc*, align 8
  %cp = alloca i8*, align 8
  %success = alloca i32, align 4
  store %struct.cmd_struc* %cmd, %struct.cmd_struc** %cmd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cmd_struc** %cmd.addr, metadata !1162, metadata !DIExpression()), !dbg !1163
  call void @llvm.dbg.declare(metadata i8** %cp, metadata !1164, metadata !DIExpression()), !dbg !1165
  store i8* null, i8** %cp, align 8, !dbg !1165
  call void @llvm.dbg.declare(metadata i32* %success, metadata !1166, metadata !DIExpression()), !dbg !1167
  store i32 0, i32* %success, align 4, !dbg !1167
  store %struct.resp_struc* null, %struct.resp_struc** @resp_err_list, align 8, !dbg !1168
  store %struct.resp_struc* null, %struct.resp_struc** @resp_list, align 8, !dbg !1169
  %0 = load i8*, i8** %cp, align 8, !dbg !1170
  %call = call i32 @core_display_file(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i8* noundef %0, i8* noundef null), !dbg !1171
  %1 = load %struct.cmd_struc*, %struct.cmd_struc** %cmd.addr, align 8, !dbg !1172
  %call1 = call i32 @_dispatch(%struct.cmd_struc* noundef %1, i32 noundef 1, i32 noundef 0, i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !1173
  store i32 %call1, i32* %success, align 4, !dbg !1174
  %2 = load i32, i32* %success, align 4, !dbg !1175
  %tobool = icmp ne i32 %2, 0, !dbg !1175
  br i1 %tobool, label %if.end, label %if.then, !dbg !1177

if.then:                                          ; preds = %entry
  %3 = load %struct.cmd_struc*, %struct.cmd_struc** %cmd.addr, align 8, !dbg !1178
  %call2 = call i32 @_dispatch(%struct.cmd_struc* noundef %3, i32 noundef 1, i32 noundef 0, i8* noundef null), !dbg !1179
  store i32 %call2, i32* %success, align 4, !dbg !1180
  br label %if.end, !dbg !1181

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %success, align 4, !dbg !1182
  %cmp = icmp slt i32 %4, 0, !dbg !1184
  br i1 %cmp, label %if.then3, label %if.end8, !dbg !1185

if.then3:                                         ; preds = %if.end
  %5 = load %struct.cmd_struc*, %struct.cmd_struc** %cmd.addr, align 8, !dbg !1186
  %call4 = call i32 @_dispatch(%struct.cmd_struc* noundef %5, i32 noundef 4, i32 noundef 0, i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !1188
  %6 = load %struct.cmd_struc*, %struct.cmd_struc** %cmd.addr, align 8, !dbg !1189
  %call5 = call i32 @_dispatch(%struct.cmd_struc* noundef %6, i32 noundef 4, i32 noundef 0, i8* noundef null), !dbg !1190
  %7 = load %struct.cmd_struc*, %struct.cmd_struc** %cmd.addr, align 8, !dbg !1191
  %call6 = call i32 @_dispatch(%struct.cmd_struc* noundef %7, i32 noundef 6, i32 noundef 0, i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !1192
  %8 = load %struct.cmd_struc*, %struct.cmd_struc** %cmd.addr, align 8, !dbg !1193
  %call7 = call i32 @_dispatch(%struct.cmd_struc* noundef %8, i32 noundef 6, i32 noundef 0, i8* noundef null), !dbg !1194
  br label %if.end33, !dbg !1195

if.end8:                                          ; preds = %if.end
  %9 = load %struct.cmd_struc*, %struct.cmd_struc** %cmd.addr, align 8, !dbg !1196
  %call9 = call i32 @_dispatch(%struct.cmd_struc* noundef %9, i32 noundef 2, i32 noundef 0, i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !1197
  store i32 %call9, i32* %success, align 4, !dbg !1198
  %10 = load i32, i32* %success, align 4, !dbg !1199
  %tobool10 = icmp ne i32 %10, 0, !dbg !1199
  br i1 %tobool10, label %if.end13, label %if.then11, !dbg !1201

if.then11:                                        ; preds = %if.end8
  %11 = load %struct.cmd_struc*, %struct.cmd_struc** %cmd.addr, align 8, !dbg !1202
  %call12 = call i32 @_dispatch(%struct.cmd_struc* noundef %11, i32 noundef 2, i32 noundef 1, i8* noundef null), !dbg !1203
  store i32 %call12, i32* %success, align 4, !dbg !1204
  br label %if.end13, !dbg !1205

if.end13:                                         ; preds = %if.then11, %if.end8
  %12 = load i32, i32* %success, align 4, !dbg !1206
  %cmp14 = icmp eq i32 %12, 1, !dbg !1208
  br i1 %cmp14, label %if.then15, label %if.else, !dbg !1209

if.then15:                                        ; preds = %if.end13
  %13 = load %struct.cmd_struc*, %struct.cmd_struc** %cmd.addr, align 8, !dbg !1210
  %call16 = call i32 @_dispatch(%struct.cmd_struc* noundef %13, i32 noundef 3, i32 noundef 0, i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !1212
  store i32 %call16, i32* %success, align 4, !dbg !1213
  %14 = load i32, i32* %success, align 4, !dbg !1214
  %tobool17 = icmp ne i32 %14, 0, !dbg !1214
  br i1 %tobool17, label %if.end20, label %if.then18, !dbg !1216

if.then18:                                        ; preds = %if.then15
  %15 = load %struct.cmd_struc*, %struct.cmd_struc** %cmd.addr, align 8, !dbg !1217
  %call19 = call i32 @_dispatch(%struct.cmd_struc* noundef %15, i32 noundef 3, i32 noundef 0, i8* noundef null), !dbg !1218
  store i32 %call19, i32* %success, align 4, !dbg !1219
  br label %if.end20, !dbg !1220

if.end20:                                         ; preds = %if.then18, %if.then15
  %16 = load %struct.cmd_struc*, %struct.cmd_struc** %cmd.addr, align 8, !dbg !1221
  %call21 = call i32 @_dispatch(%struct.cmd_struc* noundef %16, i32 noundef 5, i32 noundef 0, i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !1222
  %17 = load %struct.cmd_struc*, %struct.cmd_struc** %cmd.addr, align 8, !dbg !1223
  %call22 = call i32 @_dispatch(%struct.cmd_struc* noundef %17, i32 noundef 5, i32 noundef 0, i8* noundef null), !dbg !1224
  br label %if.end33, !dbg !1225

if.else:                                          ; preds = %if.end13
  %18 = load i32, i32* %success, align 4, !dbg !1226
  %cmp23 = icmp slt i32 %18, 0, !dbg !1228
  br i1 %cmp23, label %if.then24, label %if.end32, !dbg !1229

if.then24:                                        ; preds = %if.else
  %19 = load %struct.cmd_struc*, %struct.cmd_struc** %cmd.addr, align 8, !dbg !1230
  %call25 = call i32 @_dispatch(%struct.cmd_struc* noundef %19, i32 noundef 4, i32 noundef 0, i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !1232
  store i32 %call25, i32* %success, align 4, !dbg !1233
  %20 = load i32, i32* %success, align 4, !dbg !1234
  %tobool26 = icmp ne i32 %20, 0, !dbg !1234
  br i1 %tobool26, label %if.end29, label %if.then27, !dbg !1236

if.then27:                                        ; preds = %if.then24
  %21 = load %struct.cmd_struc*, %struct.cmd_struc** %cmd.addr, align 8, !dbg !1237
  %call28 = call i32 @_dispatch(%struct.cmd_struc* noundef %21, i32 noundef 4, i32 noundef 0, i8* noundef null), !dbg !1238
  store i32 %call28, i32* %success, align 4, !dbg !1239
  br label %if.end29, !dbg !1240

if.end29:                                         ; preds = %if.then27, %if.then24
  %22 = load %struct.cmd_struc*, %struct.cmd_struc** %cmd.addr, align 8, !dbg !1241
  %call30 = call i32 @_dispatch(%struct.cmd_struc* noundef %22, i32 noundef 6, i32 noundef 0, i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !1242
  %23 = load %struct.cmd_struc*, %struct.cmd_struc** %cmd.addr, align 8, !dbg !1243
  %call31 = call i32 @_dispatch(%struct.cmd_struc* noundef %23, i32 noundef 6, i32 noundef 0, i8* noundef null), !dbg !1244
  br label %if.end32, !dbg !1245

if.end32:                                         ; preds = %if.end29, %if.else
  br label %if.end33

if.end33:                                         ; preds = %if.then3, %if.end32, %if.end20
  ret void, !dbg !1246
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @_dispatch(%struct.cmd_struc* noundef %cmd, i32 noundef %cmd_type, i32 noundef %validate, i8* noundef %match) #0 !dbg !375 {
entry:
  %cmd.addr = alloca %struct.cmd_struc*, align 8
  %cmd_type.addr = alloca i32, align 4
  %validate.addr = alloca i32, align 4
  %match.addr = alloca i8*, align 8
  %cmdargstr = alloca i8*, align 8
  %success = alloca i32, align 4
  %send_error = alloca i32, align 4
  %index_cache = alloca i32*, align 8
  store %struct.cmd_struc* %cmd, %struct.cmd_struc** %cmd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cmd_struc** %cmd.addr, metadata !1247, metadata !DIExpression()), !dbg !1248
  store i32 %cmd_type, i32* %cmd_type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cmd_type.addr, metadata !1249, metadata !DIExpression()), !dbg !1250
  store i32 %validate, i32* %validate.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %validate.addr, metadata !1251, metadata !DIExpression()), !dbg !1252
  store i8* %match, i8** %match.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %match.addr, metadata !1253, metadata !DIExpression()), !dbg !1254
  call void @llvm.dbg.declare(metadata i8** %cmdargstr, metadata !1255, metadata !DIExpression()), !dbg !1256
  store i8* null, i8** %cmdargstr, align 8, !dbg !1256
  call void @llvm.dbg.declare(metadata i32* %success, metadata !1257, metadata !DIExpression()), !dbg !1258
  store i32 0, i32* %success, align 4, !dbg !1258
  call void @llvm.dbg.declare(metadata i32* %send_error, metadata !1259, metadata !DIExpression()), !dbg !1260
  store i32 0, i32* %send_error, align 4, !dbg !1260
  call void @llvm.dbg.declare(metadata i32** %index_cache, metadata !1261, metadata !DIExpression()), !dbg !1263
  %0 = load i32, i32* %cmd_type.addr, align 4, !dbg !1264
  %cmp = icmp eq i32 %0, 1, !dbg !1265
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !1266

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %cmd_type.addr, align 4, !dbg !1267
  %cmp1 = icmp eq i32 %1, 2, !dbg !1268
  br i1 %cmp1, label %lor.end, label %lor.rhs, !dbg !1269

lor.rhs:                                          ; preds = %lor.lhs.false
  %2 = load i32, i32* %cmd_type.addr, align 4, !dbg !1270
  %cmp2 = icmp eq i32 %2, 4, !dbg !1271
  br label %lor.end, !dbg !1269

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %3 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp2, %lor.rhs ]
  %lor.ext = zext i1 %3 to i32, !dbg !1269
  store i32 %lor.ext, i32* %send_error, align 4, !dbg !1272
  %4 = load i8*, i8** %match.addr, align 8, !dbg !1273
  %tobool = icmp ne i8* %4, null, !dbg !1273
  br i1 %tobool, label %if.else, label %if.then, !dbg !1275

if.then:                                          ; preds = %lor.end
  %5 = load %struct.cmd_struc*, %struct.cmd_struc** %cmd.addr, align 8, !dbg !1276
  %argv = getelementptr inbounds %struct.cmd_struc, %struct.cmd_struc* %5, i32 0, i32 6, !dbg !1278
  %6 = load i8**, i8*** %argv, align 8, !dbg !1278
  %arrayidx = getelementptr inbounds i8*, i8** %6, i64 0, !dbg !1276
  %7 = load i8*, i8** %arrayidx, align 8, !dbg !1276
  store i8* %7, i8** %match.addr, align 8, !dbg !1279
  %8 = load %struct.cmd_struc*, %struct.cmd_struc** %cmd.addr, align 8, !dbg !1280
  %stash_index = getelementptr inbounds %struct.cmd_struc, %struct.cmd_struc* %8, i32 0, i32 9, !dbg !1281
  store i32* %stash_index, i32** %index_cache, align 8, !dbg !1282
  br label %if.end5, !dbg !1283

if.else:                                          ; preds = %lor.end
  %9 = load i8*, i8** @_dispatch.last_match, align 8, !dbg !1284
  %10 = load i8*, i8** %match.addr, align 8, !dbg !1287
  %cmp3 = icmp ne i8* %9, %10, !dbg !1288
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !1289

if.then4:                                         ; preds = %if.else
  store i32 -1, i32* @_dispatch.match_index_cache, align 4, !dbg !1290
  %11 = load i8*, i8** %match.addr, align 8, !dbg !1292
  store i8* %11, i8** @_dispatch.last_match, align 8, !dbg !1293
  br label %if.end, !dbg !1294

if.end:                                           ; preds = %if.then4, %if.else
  store i32* @_dispatch.match_index_cache, i32** %index_cache, align 8, !dbg !1295
  br label %if.end5

if.end5:                                          ; preds = %if.end, %if.then
  %12 = load i32, i32* %success, align 4, !dbg !1296
  ret i32 %12, !dbg !1297
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main(i32 noundef %argc, i8** noundef %argv, i8** noundef %envp) #0 !dbg !1298 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %envp.addr = alloca i8**, align 8
  %optc = alloca i32, align 4
  %show_version = alloca i32, align 4
  %cmdopts = alloca i8*, align 8
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !1301, metadata !DIExpression()), !dbg !1302
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !1303, metadata !DIExpression()), !dbg !1304
  store i8** %envp, i8*** %envp.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %envp.addr, metadata !1305, metadata !DIExpression()), !dbg !1306
  call void @llvm.dbg.declare(metadata i32* %optc, metadata !1307, metadata !DIExpression()), !dbg !1308
  call void @llvm.dbg.declare(metadata i32* %show_version, metadata !1309, metadata !DIExpression()), !dbg !1310
  store i32 0, i32* %show_version, align 4, !dbg !1310
  call void @llvm.dbg.declare(metadata i8** %cmdopts, metadata !1311, metadata !DIExpression()), !dbg !1312
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0), i8** %cmdopts, align 8, !dbg !1312
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (%struct.session_t* @session to i8*), i8 0, i64 2696, i1 false), !dbg !1313
  %call = call i32 (i8*, ...) bitcast (i32 (...)* @time to i32 (i8*, ...)*)(i8* noundef null), !dbg !1314
  call void @srand(i32 noundef %call) #12, !dbg !1315
  store i32 0, i32* @opterr, align 4, !dbg !1316
  br label %while.cond, !dbg !1317

while.cond:                                       ; preds = %sw.epilog, %entry
  %0 = load i32, i32* %argc.addr, align 4, !dbg !1318
  %1 = load i8**, i8*** %argv.addr, align 8, !dbg !1319
  %2 = load i8*, i8** %cmdopts, align 8, !dbg !1320
  %call1 = call i32 (i32, i8**, i8*, ...) bitcast (i32 (...)* @getopt to i32 (i32, i8**, i8*, ...)*)(i32 noundef %0, i8** noundef %1, i8* noundef %2), !dbg !1321
  store i32 %call1, i32* %optc, align 4, !dbg !1322
  %cmp = icmp ne i32 %call1, -1, !dbg !1323
  br i1 %cmp, label %while.body, label %while.end, !dbg !1317

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %optc, align 4, !dbg !1324
  switch i32 %3, label %sw.epilog [
    i32 68, label %sw.bb
    i32 110, label %sw.bb2
    i32 113, label %sw.bb3
    i32 100, label %sw.bb5
    i32 99, label %sw.bb9
    i32 108, label %sw.bb14
    i32 116, label %sw.bb15
    i32 112, label %sw.bb18
    i32 118, label %sw.bb29
    i32 1, label %sw.bb31
    i32 104, label %sw.bb32
    i32 63, label %sw.bb33
  ], !dbg !1326

sw.bb:                                            ; preds = %while.body
  %4 = load i8*, i8** @optarg, align 8, !dbg !1327
  %tobool = icmp ne i8* %4, null, !dbg !1327
  br i1 %tobool, label %if.end, label %if.then, !dbg !1330

if.then:                                          ; preds = %sw.bb
  call void @exit(i32 noundef 1) #13, !dbg !1331
  unreachable, !dbg !1331

if.end:                                           ; preds = %sw.bb
  br label %sw.epilog, !dbg !1333

sw.bb2:                                           ; preds = %while.body
  %5 = load i32, i32* @nodaemon, align 4, !dbg !1334
  %inc = add nsw i32 %5, 1, !dbg !1334
  store i32 %inc, i32* @nodaemon, align 4, !dbg !1334
  br label %sw.epilog, !dbg !1335

sw.bb3:                                           ; preds = %while.body
  %6 = load i32, i32* @quiet, align 4, !dbg !1336
  %inc4 = add nsw i32 %6, 1, !dbg !1336
  store i32 %inc4, i32* @quiet, align 4, !dbg !1336
  br label %sw.epilog, !dbg !1337

sw.bb5:                                           ; preds = %while.body
  %7 = load i8*, i8** @optarg, align 8, !dbg !1338
  %tobool6 = icmp ne i8* %7, null, !dbg !1338
  br i1 %tobool6, label %if.end8, label %if.then7, !dbg !1340

if.then7:                                         ; preds = %sw.bb5
  call void @exit(i32 noundef 1) #13, !dbg !1341
  unreachable, !dbg !1341

if.end8:                                          ; preds = %sw.bb5
  br label %sw.epilog, !dbg !1343

sw.bb9:                                           ; preds = %while.body
  %8 = load i8*, i8** @optarg, align 8, !dbg !1344
  %tobool10 = icmp ne i8* %8, null, !dbg !1344
  br i1 %tobool10, label %if.end12, label %if.then11, !dbg !1346

if.then11:                                        ; preds = %sw.bb9
  call void @exit(i32 noundef 1) #13, !dbg !1347
  unreachable, !dbg !1347

if.end12:                                         ; preds = %sw.bb9
  %9 = load i8*, i8** @optarg, align 8, !dbg !1349
  %call13 = call i8* @strdup(i8* noundef %9), !dbg !1350
  store i8* %call13, i8** @config_filename, align 8, !dbg !1351
  br label %sw.epilog, !dbg !1352

sw.bb14:                                          ; preds = %while.body
  call void @exit(i32 noundef 0) #13, !dbg !1353
  unreachable, !dbg !1353

sw.bb15:                                          ; preds = %while.body
  store i32 1, i32* @syntax_check, align 4, !dbg !1354
  %call16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([39 x i8], [39 x i8]* @.str.8, i64 0, i64 0)), !dbg !1355
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1356
  %call17 = call i32 (%struct._IO_FILE*, ...) bitcast (i32 (...)* @fflush to i32 (%struct._IO_FILE*, ...)*)(%struct._IO_FILE* noundef %10), !dbg !1357
  br label %sw.epilog, !dbg !1358

sw.bb18:                                          ; preds = %while.body
  %11 = load i8*, i8** @optarg, align 8, !dbg !1359
  %tobool19 = icmp ne i8* %11, null, !dbg !1359
  br i1 %tobool19, label %lor.lhs.false, label %if.then27, !dbg !1362

lor.lhs.false:                                    ; preds = %sw.bb18
  %12 = load i8*, i8** @optarg, align 8, !dbg !1363
  %call20 = call i32 @atoi(i8* noundef %12) #10, !dbg !1364
  %conv = trunc i32 %call20 to i8, !dbg !1364
  store i8 %conv, i8* @persistent_passwd, align 1, !dbg !1365
  %conv21 = zext i8 %conv to i32, !dbg !1366
  %cmp22 = icmp ne i32 %conv21, 1, !dbg !1367
  br i1 %cmp22, label %land.lhs.true, label %if.end28, !dbg !1368

land.lhs.true:                                    ; preds = %lor.lhs.false
  %13 = load i8, i8* @persistent_passwd, align 1, !dbg !1369
  %conv24 = zext i8 %13 to i32, !dbg !1369
  %cmp25 = icmp ne i32 %conv24, 0, !dbg !1370
  br i1 %cmp25, label %if.then27, label %if.end28, !dbg !1371

if.then27:                                        ; preds = %land.lhs.true, %sw.bb18
  call void @exit(i32 noundef 1) #13, !dbg !1372
  unreachable, !dbg !1372

if.end28:                                         ; preds = %land.lhs.true, %lor.lhs.false
  br label %sw.epilog, !dbg !1374

sw.bb29:                                          ; preds = %while.body
  %14 = load i32, i32* %show_version, align 4, !dbg !1375
  %inc30 = add nsw i32 %14, 1, !dbg !1375
  store i32 %inc30, i32* %show_version, align 4, !dbg !1375
  br label %sw.epilog, !dbg !1376

sw.bb31:                                          ; preds = %while.body
  store i32 2, i32* %show_version, align 4, !dbg !1377
  br label %sw.epilog, !dbg !1378

sw.bb32:                                          ; preds = %while.body
  call void @show_usage(i32 noundef 0), !dbg !1379
  br label %sw.bb33, !dbg !1379

sw.bb33:                                          ; preds = %while.body, %sw.bb32
  call void @show_usage(i32 noundef 1), !dbg !1380
  br label %sw.epilog, !dbg !1381

sw.epilog:                                        ; preds = %sw.bb33, %while.body, %sw.bb31, %sw.bb29, %if.end28, %sw.bb15, %if.end12, %if.end8, %sw.bb3, %sw.bb2, %if.end
  br label %while.cond, !dbg !1317, !llvm.loop !1382

while.end:                                        ; preds = %while.cond
  call void @inetd_main(), !dbg !1384
  ret i32 0, !dbg !1385
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #8

declare i32 @time(...) #4

declare i32 @getopt(...) #4

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #9

declare i8* @strdup(i8* noundef) #4

declare i32 @fflush(...) #4

; Function Attrs: nounwind readonly willreturn
declare i32 @atoi(i8* noundef) #2

; Function Attrs: noinline nounwind uwtable
define internal void @show_usage(i32 noundef %exit_code) #0 !dbg !1386 {
entry:
  %exit_code.addr = alloca i32, align 4
  %h = alloca %struct.option_help*, align 8
  store i32 %exit_code, i32* %exit_code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %exit_code.addr, metadata !1389, metadata !DIExpression()), !dbg !1390
  call void @llvm.dbg.declare(metadata %struct.option_help** %h, metadata !1391, metadata !DIExpression()), !dbg !1393
  %call = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i64 0, i64 0)), !dbg !1394
  store %struct.option_help* getelementptr inbounds ([12 x %struct.option_help], [12 x %struct.option_help]* @opts_help, i64 0, i64 0), %struct.option_help** %h, align 8, !dbg !1395
  br label %for.cond, !dbg !1397

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.option_help*, %struct.option_help** %h, align 8, !dbg !1398
  %long_opt = getelementptr inbounds %struct.option_help, %struct.option_help* %0, i32 0, i32 0, !dbg !1400
  %1 = load i8*, i8** %long_opt, align 8, !dbg !1400
  %tobool = icmp ne i8* %1, null, !dbg !1401
  br i1 %tobool, label %for.body, label %for.end, !dbg !1401

for.body:                                         ; preds = %for.cond
  %2 = load %struct.option_help*, %struct.option_help** %h, align 8, !dbg !1402
  %short_opt = getelementptr inbounds %struct.option_help, %struct.option_help* %2, i32 0, i32 1, !dbg !1404
  %3 = load i8*, i8** %short_opt, align 8, !dbg !1404
  %call1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0), i8* noundef %3), !dbg !1405
  %4 = load %struct.option_help*, %struct.option_help** %h, align 8, !dbg !1406
  %desc = getelementptr inbounds %struct.option_help, %struct.option_help* %4, i32 0, i32 2, !dbg !1407
  %5 = load i8*, i8** %desc, align 8, !dbg !1407
  %call2 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i64 0, i64 0), i8* noundef %5), !dbg !1408
  br label %for.inc, !dbg !1409

for.inc:                                          ; preds = %for.body
  %6 = load %struct.option_help*, %struct.option_help** %h, align 8, !dbg !1410
  %incdec.ptr = getelementptr inbounds %struct.option_help, %struct.option_help* %6, i32 1, !dbg !1410
  store %struct.option_help* %incdec.ptr, %struct.option_help** %h, align 8, !dbg !1410
  br label %for.cond, !dbg !1411, !llvm.loop !1412

for.end:                                          ; preds = %for.cond
  %7 = load i32, i32* %exit_code.addr, align 4, !dbg !1414
  call void @exit(i32 noundef %7) #13, !dbg !1415
  unreachable, !dbg !1415
}

; Function Attrs: noinline nounwind uwtable
define internal void @inetd_main() #0 !dbg !1416 {
entry:
  %res = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %res, metadata !1419, metadata !DIExpression()), !dbg !1420
  store i32 0, i32* %res, align 4, !dbg !1420
  call void @fork_server(i32 noundef 0, i8 noundef zeroext 1), !dbg !1421
  ret void, !dbg !1422
}

; Function Attrs: noinline nounwind uwtable
define internal void @fork_server(i32 noundef %fd, i8 noundef zeroext %nofork) #0 !dbg !1423 {
entry:
  %fd.addr = alloca i32, align 4
  %nofork.addr = alloca i8, align 1
  %conn = alloca %struct.conn_struc*, align 8
  %ident_lookups = alloca i8*, align 8
  %i = alloca i32, align 4
  %rev = alloca i32, align 4
  %semfds = alloca [2 x i32], align 4
  %xerrno = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !1426, metadata !DIExpression()), !dbg !1427
  store i8 %nofork, i8* %nofork.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %nofork.addr, metadata !1428, metadata !DIExpression()), !dbg !1429
  call void @llvm.dbg.declare(metadata %struct.conn_struc** %conn, metadata !1430, metadata !DIExpression()), !dbg !1431
  store %struct.conn_struc* null, %struct.conn_struc** %conn, align 8, !dbg !1431
  call void @llvm.dbg.declare(metadata i8** %ident_lookups, metadata !1432, metadata !DIExpression()), !dbg !1434
  store i8* null, i8** %ident_lookups, align 8, !dbg !1434
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1435, metadata !DIExpression()), !dbg !1436
  call void @llvm.dbg.declare(metadata i32* %rev, metadata !1437, metadata !DIExpression()), !dbg !1438
  call void @llvm.dbg.declare(metadata [2 x i32]* %semfds, metadata !1439, metadata !DIExpression()), !dbg !1443
  %0 = bitcast [2 x i32]* %semfds to i8*, !dbg !1443
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %0, i8* align 4 bitcast ([2 x i32]* @__const.fork_server.semfds to i8*), i64 8, i1 false), !dbg !1443
  call void @llvm.dbg.declare(metadata i32* %xerrno, metadata !1444, metadata !DIExpression()), !dbg !1445
  store i32 0, i32* %xerrno, align 4, !dbg !1445
  %1 = load %struct.server_struc*, %struct.server_struc** @main_server, align 8, !dbg !1446
  %2 = load %struct.conn_struc*, %struct.conn_struc** %conn, align 8, !dbg !1447
  call void @cmd_loop(%struct.server_struc* noundef %1, %struct.conn_struc* noundef %2), !dbg !1448
  ret void, !dbg !1449
}

; Function Attrs: noinline nounwind uwtable
define internal void @cmd_loop(%struct.server_struc* noundef %server, %struct.conn_struc* noundef %c) #0 !dbg !401 {
entry:
  %server.addr = alloca %struct.server_struc*, align 8
  %c.addr = alloca %struct.conn_struc*, align 8
  %id = alloca %struct.config_struc*, align 8
  %buf = alloca [1024 x i8], align 16
  %cp = alloca i8*, align 8
  %display = alloca i8*, align 8
  %serveraddress = alloca i8*, align 8
  %masq_c = alloca %struct.config_struc*, align 8
  %i = alloca i32, align 4
  %MAX_LOOP = alloca i32, align 4
  %cmd = alloca %struct.cmd_struc*, align 8
  %flags = alloca i32, align 4
  store %struct.server_struc* %server, %struct.server_struc** %server.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.server_struc** %server.addr, metadata !1450, metadata !DIExpression()), !dbg !1451
  store %struct.conn_struc* %c, %struct.conn_struc** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.conn_struc** %c.addr, metadata !1452, metadata !DIExpression()), !dbg !1453
  call void @llvm.dbg.declare(metadata %struct.config_struc** %id, metadata !1454, metadata !DIExpression()), !dbg !1455
  store %struct.config_struc* null, %struct.config_struc** %id, align 8, !dbg !1455
  call void @llvm.dbg.declare(metadata [1024 x i8]* %buf, metadata !1456, metadata !DIExpression()), !dbg !1457
  %0 = bitcast [1024 x i8]* %buf to i8*, !dbg !1457
  call void @llvm.memset.p0i8.i64(i8* align 16 %0, i8 0, i64 1024, i1 false), !dbg !1457
  call void @llvm.dbg.declare(metadata i8** %cp, metadata !1458, metadata !DIExpression()), !dbg !1459
  call void @llvm.dbg.declare(metadata i8** %display, metadata !1460, metadata !DIExpression()), !dbg !1461
  store i8* null, i8** %display, align 8, !dbg !1461
  call void @llvm.dbg.declare(metadata i8** %serveraddress, metadata !1462, metadata !DIExpression()), !dbg !1463
  store i8* null, i8** %serveraddress, align 8, !dbg !1463
  call void @llvm.dbg.declare(metadata %struct.config_struc** %masq_c, metadata !1464, metadata !DIExpression()), !dbg !1465
  store %struct.config_struc* null, %struct.config_struc** %masq_c, align 8, !dbg !1465
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1466, metadata !DIExpression()), !dbg !1467
  call void @klee_make_symbolic(i8* noundef bitcast (i64* @cmd_loop.cmd_buf_size to i8*), i64 noundef 8, i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.46, i64 0, i64 0)), !dbg !1468
  %1 = bitcast [1024 x i8]* %buf to i8*, !dbg !1469
  call void @klee_make_symbolic(i8* noundef %1, i64 noundef 1024, i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.47, i64 0, i64 0)), !dbg !1470
  %2 = bitcast i8** %cp to i8*, !dbg !1471
  call void @klee_make_symbolic(i8* noundef %2, i64 noundef 8, i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.48, i64 0, i64 0)), !dbg !1472
  %3 = bitcast i8** %display to i8*, !dbg !1473
  call void @klee_make_symbolic(i8* noundef %3, i64 noundef 8, i8* noundef getelementptr inbounds ([8 x i8], [8 x i8]* @.str.49, i64 0, i64 0)), !dbg !1474
  %4 = bitcast i8** %serveraddress to i8*, !dbg !1475
  call void @klee_make_symbolic(i8* noundef %4, i64 noundef 8, i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.50, i64 0, i64 0)), !dbg !1476
  %5 = bitcast %struct.config_struc** %masq_c to i8*, !dbg !1477
  call void @klee_make_symbolic(i8* noundef %5, i64 noundef 8, i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.51, i64 0, i64 0)), !dbg !1478
  %6 = bitcast i32* %i to i8*, !dbg !1479
  call void @klee_make_symbolic(i8* noundef %6, i64 noundef 4, i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i64 0, i64 0)), !dbg !1480
  call void @llvm.dbg.declare(metadata i32* %MAX_LOOP, metadata !1481, metadata !DIExpression()), !dbg !1482
  store i32 10, i32* %MAX_LOOP, align 4, !dbg !1482
  br label %while.cond, !dbg !1483

while.cond:                                       ; preds = %if.end47, %entry
  %7 = load i32, i32* %MAX_LOOP, align 4, !dbg !1484
  %cmp = icmp sgt i32 %7, 0, !dbg !1485
  br i1 %cmp, label %while.body, label %while.end, !dbg !1483

while.body:                                       ; preds = %while.cond
  %8 = load i32, i32* %MAX_LOOP, align 4, !dbg !1486
  %dec = add nsw i32 %8, -1, !dbg !1486
  store i32 %dec, i32* %MAX_LOOP, align 4, !dbg !1486
  %9 = load i64, i64* @cmd_loop.cmd_buf_size, align 8, !dbg !1488
  %cmp1 = icmp eq i64 %9, -1, !dbg !1490
  br i1 %cmp1, label %if.then, label %if.end, !dbg !1491

if.then:                                          ; preds = %while.body
  store i64 512, i64* @cmd_loop.cmd_buf_size, align 8, !dbg !1492
  br label %if.end, !dbg !1494

if.end:                                           ; preds = %if.then, %while.body
  %10 = load i64, i64* @cmd_loop.cmd_buf_size, align 8, !dbg !1495
  %sub = sub nsw i64 %10, 1, !dbg !1496
  %arrayidx = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %sub, !dbg !1497
  store i8 0, i8* %arrayidx, align 1, !dbg !1498
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 0, !dbg !1499
  %call = call i64 @strlen(i8* noundef %arraydecay), !dbg !1500
  %conv = trunc i64 %call to i32, !dbg !1500
  store i32 %conv, i32* %i, align 4, !dbg !1501
  %11 = load i32, i32* %i, align 4, !dbg !1502
  %tobool = icmp ne i32 %11, 0, !dbg !1502
  br i1 %tobool, label %land.lhs.true, label %if.end38, !dbg !1504

land.lhs.true:                                    ; preds = %if.end
  %12 = load i32, i32* %i, align 4, !dbg !1505
  %sub2 = sub nsw i32 %12, 1, !dbg !1506
  %idxprom = sext i32 %sub2 to i64, !dbg !1507
  %arrayidx3 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %idxprom, !dbg !1507
  %13 = load i8, i8* %arrayidx3, align 1, !dbg !1507
  %conv4 = sext i8 %13 to i32, !dbg !1507
  %cmp5 = icmp eq i32 %conv4, 10, !dbg !1508
  br i1 %cmp5, label %if.then13, label %lor.lhs.false, !dbg !1509

lor.lhs.false:                                    ; preds = %land.lhs.true
  %14 = load i32, i32* %i, align 4, !dbg !1510
  %sub7 = sub nsw i32 %14, 1, !dbg !1511
  %idxprom8 = sext i32 %sub7 to i64, !dbg !1512
  %arrayidx9 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %idxprom8, !dbg !1512
  %15 = load i8, i8* %arrayidx9, align 1, !dbg !1512
  %conv10 = sext i8 %15 to i32, !dbg !1512
  %cmp11 = icmp eq i32 %conv10, 13, !dbg !1513
  br i1 %cmp11, label %if.then13, label %if.end38, !dbg !1514

if.then13:                                        ; preds = %lor.lhs.false, %land.lhs.true
  %16 = load i32, i32* %i, align 4, !dbg !1515
  %sub14 = sub nsw i32 %16, 1, !dbg !1517
  %idxprom15 = sext i32 %sub14 to i64, !dbg !1518
  %arrayidx16 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %idxprom15, !dbg !1518
  store i8 0, i8* %arrayidx16, align 1, !dbg !1519
  %17 = load i32, i32* %i, align 4, !dbg !1520
  %dec17 = add nsw i32 %17, -1, !dbg !1520
  store i32 %dec17, i32* %i, align 4, !dbg !1520
  %18 = load i32, i32* %i, align 4, !dbg !1521
  %tobool18 = icmp ne i32 %18, 0, !dbg !1521
  br i1 %tobool18, label %land.lhs.true19, label %if.end37, !dbg !1523

land.lhs.true19:                                  ; preds = %if.then13
  %19 = load i32, i32* %i, align 4, !dbg !1524
  %sub20 = sub nsw i32 %19, 1, !dbg !1525
  %idxprom21 = sext i32 %sub20 to i64, !dbg !1526
  %arrayidx22 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %idxprom21, !dbg !1526
  %20 = load i8, i8* %arrayidx22, align 1, !dbg !1526
  %conv23 = sext i8 %20 to i32, !dbg !1526
  %cmp24 = icmp eq i32 %conv23, 10, !dbg !1527
  br i1 %cmp24, label %if.then33, label %lor.lhs.false26, !dbg !1528

lor.lhs.false26:                                  ; preds = %land.lhs.true19
  %21 = load i32, i32* %i, align 4, !dbg !1529
  %sub27 = sub nsw i32 %21, 1, !dbg !1530
  %idxprom28 = sext i32 %sub27 to i64, !dbg !1531
  %arrayidx29 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %idxprom28, !dbg !1531
  %22 = load i8, i8* %arrayidx29, align 1, !dbg !1531
  %conv30 = sext i8 %22 to i32, !dbg !1531
  %cmp31 = icmp eq i32 %conv30, 13, !dbg !1532
  br i1 %cmp31, label %if.then33, label %if.end37, !dbg !1533

if.then33:                                        ; preds = %lor.lhs.false26, %land.lhs.true19
  %23 = load i32, i32* %i, align 4, !dbg !1534
  %sub34 = sub nsw i32 %23, 1, !dbg !1535
  %idxprom35 = sext i32 %sub34 to i64, !dbg !1536
  %arrayidx36 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %idxprom35, !dbg !1536
  store i8 0, i8* %arrayidx36, align 1, !dbg !1537
  br label %if.end37, !dbg !1536

if.end37:                                         ; preds = %if.then33, %lor.lhs.false26, %if.then13
  br label %if.end38, !dbg !1538

if.end38:                                         ; preds = %if.end37, %lor.lhs.false, %if.end
  %arraydecay39 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 0, !dbg !1539
  store i8* %arraydecay39, i8** %cp, align 8, !dbg !1540
  %24 = load i8*, i8** %cp, align 8, !dbg !1541
  %25 = load i8, i8* %24, align 1, !dbg !1543
  %conv40 = sext i8 %25 to i32, !dbg !1543
  %cmp41 = icmp eq i32 %conv40, 13, !dbg !1544
  br i1 %cmp41, label %if.then43, label %if.end44, !dbg !1545

if.then43:                                        ; preds = %if.end38
  %26 = load i8*, i8** %cp, align 8, !dbg !1546
  %incdec.ptr = getelementptr inbounds i8, i8* %26, i32 1, !dbg !1546
  store i8* %incdec.ptr, i8** %cp, align 8, !dbg !1546
  br label %if.end44, !dbg !1547

if.end44:                                         ; preds = %if.then43, %if.end38
  %27 = load i8*, i8** %cp, align 8, !dbg !1548
  %28 = load i8, i8* %27, align 1, !dbg !1550
  %tobool45 = icmp ne i8 %28, 0, !dbg !1550
  br i1 %tobool45, label %if.then46, label %if.end47, !dbg !1551

if.then46:                                        ; preds = %if.end44
  call void @llvm.dbg.declare(metadata %struct.cmd_struc** %cmd, metadata !1552, metadata !DIExpression()), !dbg !1554
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !1555, metadata !DIExpression()), !dbg !1556
  store i32 0, i32* %flags, align 4, !dbg !1556
  store %struct.cmd_struc* null, %struct.cmd_struc** %cmd, align 8, !dbg !1557
  %29 = load %struct.cmd_struc*, %struct.cmd_struc** %cmd, align 8, !dbg !1558
  call void @pr_cmd_dispatch(%struct.cmd_struc* noundef %29), !dbg !1559
  br label %if.end47, !dbg !1560

if.end47:                                         ; preds = %if.then46, %if.end44
  br label %while.cond, !dbg !1483, !llvm.loop !1561

while.end:                                        ; preds = %while.cond
  ret void, !dbg !1563
}

declare void @klee_make_symbolic(i8* noundef, i64 noundef, i8* noundef) #4

attributes #0 = { noinline nounwind uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind readonly willreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { argmemonly nofree nounwind willreturn }
attributes #4 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind readnone willreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { argmemonly nofree nounwind willreturn writeonly }
attributes #7 = { nofree nosync nounwind willreturn }
attributes #8 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { nounwind readonly willreturn }
attributes #11 = { nounwind readnone willreturn }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!406, !407, !408, !409, !410, !411, !412}
!llvm.ident = !{!413}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "TimeoutIdle", scope: !2, file: !3, line: 108, type: !27, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "Ubuntu clang version 14.0.0-1ubuntu1.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !21, globals: !60, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "src/main.c", directory: "/home/gok99/Local/doppler/DOPExploit/MyDOP/benchmarks/proftpd-simple-klee", checksumkind: CSK_MD5, checksum: "0acea61b678aa3c885aaa23bcfc0ab6c")
!4 = !{!5}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !6, line: 46, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "/usr/include/ctype.h", directory: "", checksumkind: CSK_MD5, checksum: "3ab3dd7fdf2578005732722ee2393e59")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20}
!9 = !DIEnumerator(name: "_ISupper", value: 256)
!10 = !DIEnumerator(name: "_ISlower", value: 512)
!11 = !DIEnumerator(name: "_ISalpha", value: 1024)
!12 = !DIEnumerator(name: "_ISdigit", value: 2048)
!13 = !DIEnumerator(name: "_ISxdigit", value: 4096)
!14 = !DIEnumerator(name: "_ISspace", value: 8192)
!15 = !DIEnumerator(name: "_ISprint", value: 16384)
!16 = !DIEnumerator(name: "_ISgraph", value: 32768)
!17 = !DIEnumerator(name: "_ISblank", value: 1)
!18 = !DIEnumerator(name: "_IScntrl", value: 2)
!19 = !DIEnumerator(name: "_ISpunct", value: 4)
!20 = !DIEnumerator(name: "_ISalnum", value: 8)
!21 = !{!22, !25, !27, !28, !29, !30}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !23, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !24)
!24 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !26, size: 64)
!26 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!27 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!28 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!29 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!30 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !31, size: 64)
!31 = !DIDerivedType(tag: DW_TAG_typedef, name: "array_header", file: !32, line: 79, baseType: !33)
!32 = !DIFile(filename: "include/pool.h", directory: "/home/gok99/Local/doppler/DOPExploit/MyDOP/benchmarks/proftpd-simple-klee", checksumkind: CSK_MD5, checksum: "bdedd30d555224a431d9cd0235349bf6")
!33 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !32, line: 73, size: 256, elements: !34)
!34 = !{!35, !56, !57, !58, !59}
!35 = !DIDerivedType(tag: DW_TAG_member, name: "pool", scope: !33, file: !32, line: 74, baseType: !36, size: 64)
!36 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !37, size: 64)
!37 = !DIDerivedType(tag: DW_TAG_typedef, name: "pool", file: !32, line: 38, baseType: !38)
!38 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pool", file: !3, line: 217, size: 576, elements: !39)
!39 = !{!40, !43, !44, !47, !49, !50, !51, !52, !53}
!40 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !38, file: !3, line: 218, baseType: !41, size: 64)
!41 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !42, size: 64)
!42 = !DICompositeType(tag: DW_TAG_union_type, name: "block_hdr", file: !3, line: 218, flags: DIFlagFwdDecl)
!43 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !38, file: !3, line: 219, baseType: !41, size: 64, offset: 64)
!44 = !DIDerivedType(tag: DW_TAG_member, name: "cleanups", scope: !38, file: !3, line: 220, baseType: !45, size: 64, offset: 128)
!45 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !46, size: 64)
!46 = !DICompositeType(tag: DW_TAG_structure_type, name: "cleanup", file: !3, line: 220, flags: DIFlagFwdDecl)
!47 = !DIDerivedType(tag: DW_TAG_member, name: "sub_pools", scope: !38, file: !3, line: 221, baseType: !48, size: 64, offset: 192)
!48 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !38, size: 64)
!49 = !DIDerivedType(tag: DW_TAG_member, name: "sub_next", scope: !38, file: !3, line: 222, baseType: !48, size: 64, offset: 256)
!50 = !DIDerivedType(tag: DW_TAG_member, name: "sub_prev", scope: !38, file: !3, line: 223, baseType: !48, size: 64, offset: 320)
!51 = !DIDerivedType(tag: DW_TAG_member, name: "parent", scope: !38, file: !3, line: 224, baseType: !48, size: 64, offset: 384)
!52 = !DIDerivedType(tag: DW_TAG_member, name: "free_first_avail", scope: !38, file: !3, line: 225, baseType: !25, size: 64, offset: 448)
!53 = !DIDerivedType(tag: DW_TAG_member, name: "tag", scope: !38, file: !3, line: 226, baseType: !54, size: 64, offset: 512)
!54 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !55, size: 64)
!55 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !26)
!56 = !DIDerivedType(tag: DW_TAG_member, name: "elt_size", scope: !33, file: !32, line: 75, baseType: !27, size: 32, offset: 64)
!57 = !DIDerivedType(tag: DW_TAG_member, name: "nelts", scope: !33, file: !32, line: 76, baseType: !27, size: 32, offset: 96)
!58 = !DIDerivedType(tag: DW_TAG_member, name: "nalloc", scope: !33, file: !32, line: 77, baseType: !27, size: 32, offset: 128)
!59 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !33, file: !32, line: 78, baseType: !29, size: 64, offset: 192)
!60 = !{!0, !61, !63, !166, !168, !170, !172, !177, !188, !191, !201, !203, !274, !362, !364, !366, !368, !373, !379, !381, !383, !385, !387, !389, !399}
!61 = !DIGlobalVariableExpression(var: !62, expr: !DIExpression())
!62 = distinct !DIGlobalVariable(name: "persistent_passwd", scope: !2, file: !3, line: 144, type: !24, isLocal: false, isDefinition: true)
!63 = !DIGlobalVariableExpression(var: !64, expr: !DIExpression())
!64 = distinct !DIGlobalVariable(name: "main_server", scope: !2, file: !3, line: 451, type: !65, isLocal: false, isDefinition: true)
!65 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !66, size: 64)
!66 = !DIDerivedType(tag: DW_TAG_typedef, name: "server_rec", file: !3, line: 377, baseType: !67)
!67 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "server_struc", file: !3, line: 333, size: 960, elements: !68)
!68 = !{!69, !71, !72, !75, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !120, !163, !164, !165}
!69 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !67, file: !3, line: 334, baseType: !70, size: 64)
!70 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !67, size: 64)
!71 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !67, file: !3, line: 334, baseType: !70, size: 64, offset: 64)
!72 = !DIDerivedType(tag: DW_TAG_member, name: "pool", scope: !67, file: !3, line: 336, baseType: !73, size: 64, offset: 128)
!73 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !74, size: 64)
!74 = !DIDerivedType(tag: DW_TAG_typedef, name: "pool", file: !3, line: 216, baseType: !38)
!75 = !DIDerivedType(tag: DW_TAG_member, name: "set", scope: !67, file: !3, line: 337, baseType: !76, size: 64, offset: 192)
!76 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !77, size: 64)
!77 = !DIDerivedType(tag: DW_TAG_typedef, name: "xaset_t", file: !78, line: 36, baseType: !79)
!78 = !DIFile(filename: "include/sets.h", directory: "/home/gok99/Local/doppler/DOPExploit/MyDOP/benchmarks/proftpd-simple-klee", checksumkind: CSK_MD5, checksum: "8c472141caf72a6d22065f41fa061e3e")
!79 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "XAset", file: !78, line: 44, size: 192, elements: !80)
!80 = !{!81, !88, !89}
!81 = !DIDerivedType(tag: DW_TAG_member, name: "xas_list", scope: !79, file: !78, line: 45, baseType: !82, size: 64)
!82 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !83, size: 64)
!83 = !DIDerivedType(tag: DW_TAG_typedef, name: "xasetmember_t", file: !78, line: 35, baseType: !84)
!84 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "XAsetmember", file: !78, line: 40, size: 128, elements: !85)
!85 = !{!86, !87}
!86 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !84, file: !78, line: 41, baseType: !82, size: 64)
!87 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !84, file: !78, line: 41, baseType: !82, size: 64, offset: 64)
!88 = !DIDerivedType(tag: DW_TAG_member, name: "pool", scope: !79, file: !78, line: 47, baseType: !36, size: 64, offset: 64)
!89 = !DIDerivedType(tag: DW_TAG_member, name: "xas_compare", scope: !79, file: !78, line: 48, baseType: !90, size: 64, offset: 128)
!90 = !DIDerivedType(tag: DW_TAG_typedef, name: "XASET_COMPARE", file: !78, line: 37, baseType: !91)
!91 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !92, size: 64)
!92 = !DISubroutineType(types: !93)
!93 = !{!27, !82, !82}
!94 = !DIDerivedType(tag: DW_TAG_member, name: "ServerName", scope: !67, file: !3, line: 340, baseType: !54, size: 64, offset: 256)
!95 = !DIDerivedType(tag: DW_TAG_member, name: "ServerAddress", scope: !67, file: !3, line: 343, baseType: !54, size: 64, offset: 320)
!96 = !DIDerivedType(tag: DW_TAG_member, name: "ServerFQDN", scope: !67, file: !3, line: 346, baseType: !54, size: 64, offset: 384)
!97 = !DIDerivedType(tag: DW_TAG_member, name: "ServerPort", scope: !67, file: !3, line: 350, baseType: !7, size: 32, offset: 448)
!98 = !DIDerivedType(tag: DW_TAG_member, name: "tcp_mss_len", scope: !67, file: !3, line: 354, baseType: !27, size: 32, offset: 480)
!99 = !DIDerivedType(tag: DW_TAG_member, name: "tcp_rcvbuf_len", scope: !67, file: !3, line: 356, baseType: !27, size: 32, offset: 512)
!100 = !DIDerivedType(tag: DW_TAG_member, name: "tcp_rcvbuf_override", scope: !67, file: !3, line: 357, baseType: !24, size: 8, offset: 544)
!101 = !DIDerivedType(tag: DW_TAG_member, name: "tcp_sndbuf_len", scope: !67, file: !3, line: 359, baseType: !27, size: 32, offset: 576)
!102 = !DIDerivedType(tag: DW_TAG_member, name: "tcp_sndbuf_override", scope: !67, file: !3, line: 360, baseType: !24, size: 8, offset: 608)
!103 = !DIDerivedType(tag: DW_TAG_member, name: "ServerAdmin", scope: !67, file: !3, line: 363, baseType: !25, size: 64, offset: 640)
!104 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !67, file: !3, line: 366, baseType: !105, size: 64, offset: 704)
!105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !106, size: 64)
!106 = !DIDerivedType(tag: DW_TAG_typedef, name: "pr_netaddr_t", file: !3, line: 301, baseType: !107)
!107 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 278, size: 2528, elements: !108)
!108 = !{!109, !110, !114, !115, !119}
!109 = !DIDerivedType(tag: DW_TAG_member, name: "na_family", scope: !107, file: !3, line: 279, baseType: !27, size: 32)
!110 = !DIDerivedType(tag: DW_TAG_member, name: "na_dnsstr", scope: !107, file: !3, line: 284, baseType: !111, size: 2048, offset: 32)
!111 = !DICompositeType(tag: DW_TAG_array_type, baseType: !26, size: 2048, elements: !112)
!112 = !{!113}
!113 = !DISubrange(count: 256)
!114 = !DIDerivedType(tag: DW_TAG_member, name: "na_have_dnsstr", scope: !107, file: !3, line: 285, baseType: !27, size: 32, offset: 2080)
!115 = !DIDerivedType(tag: DW_TAG_member, name: "na_ipstr", scope: !107, file: !3, line: 287, baseType: !116, size: 368, offset: 2112)
!116 = !DICompositeType(tag: DW_TAG_array_type, baseType: !26, size: 368, elements: !117)
!117 = !{!118}
!118 = !DISubrange(count: 46)
!119 = !DIDerivedType(tag: DW_TAG_member, name: "na_have_ipstr", scope: !107, file: !3, line: 288, baseType: !27, size: 32, offset: 2496)
!120 = !DIDerivedType(tag: DW_TAG_member, name: "listen", scope: !67, file: !3, line: 368, baseType: !121, size: 64, offset: 768)
!121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !122, size: 64)
!122 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "conn_struc", file: !3, line: 304, size: 832, elements: !123)
!123 = !{!124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !157, !158, !159, !160, !161, !162}
!124 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !122, file: !3, line: 305, baseType: !121, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_member, name: "pool", scope: !122, file: !3, line: 306, baseType: !73, size: 64, offset: 64)
!126 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !122, file: !3, line: 307, baseType: !27, size: 32, offset: 128)
!127 = !DIDerivedType(tag: DW_TAG_member, name: "listen_fd", scope: !122, file: !3, line: 308, baseType: !27, size: 32, offset: 160)
!128 = !DIDerivedType(tag: DW_TAG_member, name: "rcvbuf", scope: !122, file: !3, line: 309, baseType: !27, size: 32, offset: 192)
!129 = !DIDerivedType(tag: DW_TAG_member, name: "sndbuf", scope: !122, file: !3, line: 309, baseType: !27, size: 32, offset: 224)
!130 = !DIDerivedType(tag: DW_TAG_member, name: "xerrno", scope: !122, file: !3, line: 311, baseType: !27, size: 32, offset: 256)
!131 = !DIDerivedType(tag: DW_TAG_member, name: "rfd", scope: !122, file: !3, line: 313, baseType: !27, size: 32, offset: 288)
!132 = !DIDerivedType(tag: DW_TAG_member, name: "wfd", scope: !122, file: !3, line: 313, baseType: !27, size: 32, offset: 320)
!133 = !DIDerivedType(tag: DW_TAG_member, name: "instrm", scope: !122, file: !3, line: 314, baseType: !134, size: 64, offset: 384)
!134 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !135, size: 64)
!135 = !DIDerivedType(tag: DW_TAG_typedef, name: "pr_netio_stream_t", file: !3, line: 276, baseType: !136)
!136 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 245, size: 448, elements: !137)
!137 = !{!138, !139, !140, !141, !142, !143, !146, !155, !156}
!138 = !DIDerivedType(tag: DW_TAG_member, name: "strm_pool", scope: !136, file: !3, line: 248, baseType: !73, size: 64)
!139 = !DIDerivedType(tag: DW_TAG_member, name: "strm_type", scope: !136, file: !3, line: 251, baseType: !27, size: 32, offset: 64)
!140 = !DIDerivedType(tag: DW_TAG_member, name: "strm_fd", scope: !136, file: !3, line: 254, baseType: !27, size: 32, offset: 96)
!141 = !DIDerivedType(tag: DW_TAG_member, name: "strm_mode", scope: !136, file: !3, line: 259, baseType: !27, size: 32, offset: 128)
!142 = !DIDerivedType(tag: DW_TAG_member, name: "strm_interval", scope: !136, file: !3, line: 262, baseType: !7, size: 32, offset: 160)
!143 = !DIDerivedType(tag: DW_TAG_member, name: "strm_flags", scope: !136, file: !3, line: 265, baseType: !144, size: 64, offset: 192)
!144 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !145)
!145 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!146 = !DIDerivedType(tag: DW_TAG_member, name: "strm_buf", scope: !136, file: !3, line: 268, baseType: !147, size: 64, offset: 256)
!147 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !148, size: 64)
!148 = !DIDerivedType(tag: DW_TAG_typedef, name: "pr_buffer_t", file: !3, line: 243, baseType: !149)
!149 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 229, size: 256, elements: !150)
!150 = !{!151, !152, !153, !154}
!151 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !149, file: !3, line: 232, baseType: !25, size: 64)
!152 = !DIDerivedType(tag: DW_TAG_member, name: "buflen", scope: !149, file: !3, line: 235, baseType: !145, size: 64, offset: 64)
!153 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !149, file: !3, line: 238, baseType: !25, size: 64, offset: 128)
!154 = !DIDerivedType(tag: DW_TAG_member, name: "remaining", scope: !149, file: !3, line: 241, baseType: !27, size: 32, offset: 192)
!155 = !DIDerivedType(tag: DW_TAG_member, name: "strm_data", scope: !136, file: !3, line: 271, baseType: !29, size: 64, offset: 320)
!156 = !DIDerivedType(tag: DW_TAG_member, name: "strm_errno", scope: !136, file: !3, line: 274, baseType: !27, size: 32, offset: 384)
!157 = !DIDerivedType(tag: DW_TAG_member, name: "outstrm", scope: !122, file: !3, line: 314, baseType: !134, size: 64, offset: 448)
!158 = !DIDerivedType(tag: DW_TAG_member, name: "remote_addr", scope: !122, file: !3, line: 317, baseType: !105, size: 64, offset: 512)
!159 = !DIDerivedType(tag: DW_TAG_member, name: "remote_port", scope: !122, file: !3, line: 320, baseType: !27, size: 32, offset: 576)
!160 = !DIDerivedType(tag: DW_TAG_member, name: "remote_name", scope: !122, file: !3, line: 323, baseType: !54, size: 64, offset: 640)
!161 = !DIDerivedType(tag: DW_TAG_member, name: "local_addr", scope: !122, file: !3, line: 326, baseType: !105, size: 64, offset: 704)
!162 = !DIDerivedType(tag: DW_TAG_member, name: "local_port", scope: !122, file: !3, line: 329, baseType: !27, size: 32, offset: 768)
!163 = !DIDerivedType(tag: DW_TAG_member, name: "conf", scope: !67, file: !3, line: 371, baseType: !76, size: 64, offset: 832)
!164 = !DIDerivedType(tag: DW_TAG_member, name: "config_type", scope: !67, file: !3, line: 372, baseType: !27, size: 32, offset: 896)
!165 = !DIDerivedType(tag: DW_TAG_member, name: "sid", scope: !67, file: !3, line: 375, baseType: !7, size: 32, offset: 928)
!166 = !DIGlobalVariableExpression(var: !167, expr: !DIExpression())
!167 = distinct !DIGlobalVariable(name: "max_connects", scope: !2, file: !3, line: 587, type: !145, isLocal: false, isDefinition: true)
!168 = !DIGlobalVariableExpression(var: !169, expr: !DIExpression())
!169 = distinct !DIGlobalVariable(name: "max_connect_interval", scope: !2, file: !3, line: 588, type: !7, isLocal: false, isDefinition: true)
!170 = !DIGlobalVariableExpression(var: !171, expr: !DIExpression())
!171 = distinct !DIGlobalVariable(name: "is_master", scope: !2, file: !3, line: 596, type: !24, isLocal: false, isDefinition: true)
!172 = !DIGlobalVariableExpression(var: !173, expr: !DIExpression())
!173 = distinct !DIGlobalVariable(name: "mpid", scope: !2, file: !3, line: 598, type: !174, isLocal: false, isDefinition: true)
!174 = !DIDerivedType(tag: DW_TAG_typedef, name: "pid_t", file: !3, line: 465, baseType: !175)
!175 = !DIDerivedType(tag: DW_TAG_typedef, name: "__pid_t", file: !176, line: 154, baseType: !27)
!176 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "", checksumkind: CSK_MD5, checksum: "d108b5f93a74c50510d7d9bc0ab36df9")
!177 = !DIGlobalVariableExpression(var: !178, expr: !DIExpression())
!178 = distinct !DIGlobalVariable(name: "rehash_list", scope: !2, file: !3, line: 599, type: !179, isLocal: false, isDefinition: true)
!179 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !180, size: 64)
!180 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rehash", file: !3, line: 580, size: 192, elements: !181)
!181 = !{!182, !183, !184}
!182 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !180, file: !3, line: 581, baseType: !179, size: 64)
!183 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !180, file: !3, line: 583, baseType: !29, size: 64, offset: 64)
!184 = !DIDerivedType(tag: DW_TAG_member, name: "rehash", scope: !180, file: !3, line: 584, baseType: !185, size: 64, offset: 128)
!185 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !186, size: 64)
!186 = !DISubroutineType(types: !187)
!187 = !{null, !29}
!188 = !DIGlobalVariableExpression(var: !189, expr: !DIExpression())
!189 = distinct !DIGlobalVariable(name: "recvd_signal_flags", scope: !2, file: !3, line: 634, type: !190, isLocal: false, isDefinition: true)
!190 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !7)
!191 = !DIGlobalVariableExpression(var: !192, expr: !DIExpression())
!192 = distinct !DIGlobalVariable(name: "resp_list", scope: !2, file: !3, line: 972, type: !193, isLocal: false, isDefinition: true)
!193 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !194, size: 64)
!194 = !DIDerivedType(tag: DW_TAG_typedef, name: "pr_response_t", file: !3, line: 970, baseType: !195)
!195 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "resp_struc", file: !3, line: 966, size: 192, elements: !196)
!196 = !{!197, !199, !200}
!197 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !195, file: !3, line: 967, baseType: !198, size: 64)
!198 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !195, size: 64)
!199 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !195, file: !3, line: 968, baseType: !25, size: 64, offset: 64)
!200 = !DIDerivedType(tag: DW_TAG_member, name: "msg", scope: !195, file: !3, line: 969, baseType: !25, size: 64, offset: 128)
!201 = !DIGlobalVariableExpression(var: !202, expr: !DIExpression())
!202 = distinct !DIGlobalVariable(name: "resp_err_list", scope: !2, file: !3, line: 972, type: !193, isLocal: false, isDefinition: true)
!203 = !DIGlobalVariableExpression(var: !204, expr: !DIExpression())
!204 = distinct !DIGlobalVariable(name: "cmd_auth_chk", scope: !2, file: !3, line: 574, type: !205, isLocal: false, isDefinition: true)
!205 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !206, size: 64)
!206 = !DISubroutineType(types: !207)
!207 = !{!27, !208}
!208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !209, size: 64)
!209 = !DIDerivedType(tag: DW_TAG_typedef, name: "cmd_rec", file: !3, line: 449, baseType: !210)
!210 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cmd_struc", file: !3, line: 432, size: 704, elements: !211)
!211 = !{!212, !213, !214, !235, !236, !237, !238, !240, !241, !242, !243, !273}
!212 = !DIDerivedType(tag: DW_TAG_member, name: "pool", scope: !210, file: !3, line: 433, baseType: !73, size: 64)
!213 = !DIDerivedType(tag: DW_TAG_member, name: "server", scope: !210, file: !3, line: 434, baseType: !65, size: 64, offset: 64)
!214 = !DIDerivedType(tag: DW_TAG_member, name: "config", scope: !210, file: !3, line: 435, baseType: !215, size: 64, offset: 128)
!215 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !216, size: 64)
!216 = !DIDerivedType(tag: DW_TAG_typedef, name: "config_rec", file: !3, line: 379, baseType: !217)
!217 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "config_struc", file: !3, line: 381, size: 832, elements: !218)
!218 = !{!219, !221, !222, !223, !224, !225, !226, !227, !229, !231, !232, !233, !234}
!219 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !217, file: !3, line: 382, baseType: !220, size: 64)
!220 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !217, size: 64)
!221 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !217, file: !3, line: 382, baseType: !220, size: 64, offset: 64)
!222 = !DIDerivedType(tag: DW_TAG_member, name: "config_type", scope: !217, file: !3, line: 384, baseType: !27, size: 32, offset: 128)
!223 = !DIDerivedType(tag: DW_TAG_member, name: "pool", scope: !217, file: !3, line: 385, baseType: !73, size: 64, offset: 192)
!224 = !DIDerivedType(tag: DW_TAG_member, name: "set", scope: !217, file: !3, line: 386, baseType: !76, size: 64, offset: 256)
!225 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !217, file: !3, line: 387, baseType: !25, size: 64, offset: 320)
!226 = !DIDerivedType(tag: DW_TAG_member, name: "argc", scope: !217, file: !3, line: 388, baseType: !27, size: 32, offset: 384)
!227 = !DIDerivedType(tag: DW_TAG_member, name: "argv", scope: !217, file: !3, line: 389, baseType: !228, size: 64, offset: 448)
!228 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !29, size: 64)
!229 = !DIDerivedType(tag: DW_TAG_member, name: "overrides", scope: !217, file: !3, line: 390, baseType: !230, size: 64, offset: 512)
!230 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!231 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !217, file: !3, line: 391, baseType: !230, size: 64, offset: 576)
!232 = !DIDerivedType(tag: DW_TAG_member, name: "server", scope: !217, file: !3, line: 393, baseType: !65, size: 64, offset: 640)
!233 = !DIDerivedType(tag: DW_TAG_member, name: "parent", scope: !217, file: !3, line: 394, baseType: !215, size: 64, offset: 704)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "subset", scope: !217, file: !3, line: 395, baseType: !76, size: 64, offset: 768)
!235 = !DIDerivedType(tag: DW_TAG_member, name: "tmp_pool", scope: !210, file: !3, line: 436, baseType: !73, size: 64, offset: 192)
!236 = !DIDerivedType(tag: DW_TAG_member, name: "argc", scope: !210, file: !3, line: 439, baseType: !27, size: 32, offset: 256)
!237 = !DIDerivedType(tag: DW_TAG_member, name: "arg", scope: !210, file: !3, line: 441, baseType: !25, size: 64, offset: 320)
!238 = !DIDerivedType(tag: DW_TAG_member, name: "argv", scope: !210, file: !3, line: 442, baseType: !239, size: 64, offset: 384)
!239 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !25, size: 64)
!240 = !DIDerivedType(tag: DW_TAG_member, name: "group", scope: !210, file: !3, line: 443, baseType: !25, size: 64, offset: 448)
!241 = !DIDerivedType(tag: DW_TAG_member, name: "class", scope: !210, file: !3, line: 445, baseType: !27, size: 32, offset: 512)
!242 = !DIDerivedType(tag: DW_TAG_member, name: "stash_index", scope: !210, file: !3, line: 446, baseType: !27, size: 32, offset: 544)
!243 = !DIDerivedType(tag: DW_TAG_member, name: "private", scope: !210, file: !3, line: 447, baseType: !244, size: 64, offset: 576)
!244 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !245, size: 64)
!245 = !DIDerivedType(tag: DW_TAG_typedef, name: "privdata_t", file: !3, line: 430, baseType: !246)
!246 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "privdata", file: !3, line: 420, size: 192, elements: !247)
!247 = !{!248, !249, !256}
!248 = !DIDerivedType(tag: DW_TAG_member, name: "tag", scope: !246, file: !3, line: 421, baseType: !25, size: 64)
!249 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !246, file: !3, line: 427, baseType: !250, size: 64, offset: 64)
!250 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !246, file: !3, line: 422, size: 64, elements: !251)
!251 = !{!252, !253, !254, !255}
!252 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_val", scope: !250, file: !3, line: 423, baseType: !29, size: 64)
!253 = !DIDerivedType(tag: DW_TAG_member, name: "int_val", scope: !250, file: !3, line: 424, baseType: !27, size: 32)
!254 = !DIDerivedType(tag: DW_TAG_member, name: "long_val", scope: !250, file: !3, line: 425, baseType: !230, size: 64)
!255 = !DIDerivedType(tag: DW_TAG_member, name: "str_val", scope: !250, file: !3, line: 426, baseType: !25, size: 64)
!256 = !DIDerivedType(tag: DW_TAG_member, name: "m", scope: !246, file: !3, line: 429, baseType: !257, size: 64, offset: 128)
!257 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !258, size: 64)
!258 = !DIDerivedType(tag: DW_TAG_typedef, name: "module", file: !3, line: 398, baseType: !259)
!259 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "module_struc", file: !3, line: 400, size: 576, elements: !260)
!260 = !{!261, !262, !263, !264, !265, !269, !270, !271, !272}
!261 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !259, file: !3, line: 401, baseType: !257, size: 64)
!262 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !259, file: !3, line: 401, baseType: !257, size: 64, offset: 64)
!263 = !DIDerivedType(tag: DW_TAG_member, name: "api_version", scope: !259, file: !3, line: 403, baseType: !27, size: 32, offset: 128)
!264 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !259, file: !3, line: 404, baseType: !25, size: 64, offset: 192)
!265 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !259, file: !3, line: 410, baseType: !266, size: 64, offset: 256)
!266 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !267, size: 64)
!267 = !DISubroutineType(types: !268)
!268 = !{!27}
!269 = !DIDerivedType(tag: DW_TAG_member, name: "sess_init", scope: !259, file: !3, line: 411, baseType: !266, size: 64, offset: 320)
!270 = !DIDerivedType(tag: DW_TAG_member, name: "module_version", scope: !259, file: !3, line: 413, baseType: !25, size: 64, offset: 384)
!271 = !DIDerivedType(tag: DW_TAG_member, name: "handle", scope: !259, file: !3, line: 414, baseType: !29, size: 64, offset: 448)
!272 = !DIDerivedType(tag: DW_TAG_member, name: "priority", scope: !259, file: !3, line: 417, baseType: !27, size: 32, offset: 512)
!273 = !DIDerivedType(tag: DW_TAG_member, name: "privarr", scope: !210, file: !3, line: 448, baseType: !30, size: 64, offset: 640)
!274 = !DIGlobalVariableExpression(var: !275, expr: !DIExpression())
!275 = distinct !DIGlobalVariable(name: "session", scope: !2, file: !3, line: 590, type: !276, isLocal: false, isDefinition: true)
!276 = !DIDerivedType(tag: DW_TAG_typedef, name: "session_t", file: !3, line: 572, baseType: !277)
!277 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 468, size: 21568, elements: !278)
!278 = !{!279, !280, !282, !283, !284, !285, !286, !287, !288, !289, !293, !294, !295, !296, !299, !300, !303, !304, !305, !306, !307, !308, !309, !310, !311, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !335, !358, !359, !360, !361}
!279 = !DIDerivedType(tag: DW_TAG_member, name: "pool", scope: !277, file: !3, line: 469, baseType: !73, size: 64)
!280 = !DIDerivedType(tag: DW_TAG_member, name: "sf_flags", scope: !277, file: !3, line: 471, baseType: !281, size: 32, offset: 64)
!281 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !27)
!282 = !DIDerivedType(tag: DW_TAG_member, name: "sp_flags", scope: !277, file: !3, line: 472, baseType: !281, size: 32, offset: 96)
!283 = !DIDerivedType(tag: DW_TAG_member, name: "data_addr", scope: !277, file: !3, line: 474, baseType: !106, size: 2528, offset: 128)
!284 = !DIDerivedType(tag: DW_TAG_member, name: "data_port", scope: !277, file: !3, line: 475, baseType: !28, size: 16, offset: 2656)
!285 = !DIDerivedType(tag: DW_TAG_member, name: "ident_lookups", scope: !277, file: !3, line: 477, baseType: !24, size: 8, offset: 2672)
!286 = !DIDerivedType(tag: DW_TAG_member, name: "ident_user", scope: !277, file: !3, line: 478, baseType: !25, size: 64, offset: 2688)
!287 = !DIDerivedType(tag: DW_TAG_member, name: "auth_mech", scope: !277, file: !3, line: 480, baseType: !54, size: 64, offset: 2752)
!288 = !DIDerivedType(tag: DW_TAG_member, name: "rfc2228_mech", scope: !277, file: !3, line: 485, baseType: !54, size: 64, offset: 2816)
!289 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !277, file: !3, line: 489, baseType: !290, size: 8192, offset: 2880)
!290 = !DICompositeType(tag: DW_TAG_array_type, baseType: !26, size: 8192, elements: !291)
!291 = !{!292}
!292 = !DISubrange(count: 1024)
!293 = !DIDerivedType(tag: DW_TAG_member, name: "vwd", scope: !277, file: !3, line: 490, baseType: !290, size: 8192, offset: 11072)
!294 = !DIDerivedType(tag: DW_TAG_member, name: "dir_config", scope: !277, file: !3, line: 492, baseType: !220, size: 64, offset: 19264)
!295 = !DIDerivedType(tag: DW_TAG_member, name: "disable_id_switching", scope: !277, file: !3, line: 500, baseType: !27, size: 32, offset: 19328)
!296 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !277, file: !3, line: 501, baseType: !297, size: 32, offset: 19360)
!297 = !DIDerivedType(tag: DW_TAG_typedef, name: "uid_t", file: !3, line: 462, baseType: !298)
!298 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uid_t", file: !176, line: 146, baseType: !7)
!299 = !DIDerivedType(tag: DW_TAG_member, name: "ouid", scope: !277, file: !3, line: 501, baseType: !297, size: 32, offset: 19392)
!300 = !DIDerivedType(tag: DW_TAG_member, name: "gid", scope: !277, file: !3, line: 502, baseType: !301, size: 32, offset: 19424)
!301 = !DIDerivedType(tag: DW_TAG_typedef, name: "gid_t", file: !3, line: 463, baseType: !302)
!302 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gid_t", file: !176, line: 147, baseType: !7)
!303 = !DIDerivedType(tag: DW_TAG_member, name: "gids", scope: !277, file: !3, line: 504, baseType: !30, size: 64, offset: 19456)
!304 = !DIDerivedType(tag: DW_TAG_member, name: "groups", scope: !277, file: !3, line: 505, baseType: !30, size: 64, offset: 19520)
!305 = !DIDerivedType(tag: DW_TAG_member, name: "fsuid", scope: !277, file: !3, line: 510, baseType: !297, size: 32, offset: 19584)
!306 = !DIDerivedType(tag: DW_TAG_member, name: "fsgid", scope: !277, file: !3, line: 511, baseType: !301, size: 32, offset: 19616)
!307 = !DIDerivedType(tag: DW_TAG_member, name: "user", scope: !277, file: !3, line: 513, baseType: !25, size: 64, offset: 19648)
!308 = !DIDerivedType(tag: DW_TAG_member, name: "group", scope: !277, file: !3, line: 513, baseType: !25, size: 64, offset: 19712)
!309 = !DIDerivedType(tag: DW_TAG_member, name: "login_uid", scope: !277, file: !3, line: 514, baseType: !297, size: 32, offset: 19776)
!310 = !DIDerivedType(tag: DW_TAG_member, name: "login_gid", scope: !277, file: !3, line: 517, baseType: !301, size: 32, offset: 19808)
!311 = !DIDerivedType(tag: DW_TAG_member, name: "class", scope: !277, file: !3, line: 521, baseType: !312, size: 64, offset: 19840)
!312 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !313, size: 64)
!313 = !DIDerivedType(tag: DW_TAG_typedef, name: "pr_class_t", file: !3, line: 460, baseType: !314)
!314 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pr_class_t", file: !3, line: 453, size: 320, elements: !315)
!315 = !{!316, !317, !318, !319, !320}
!316 = !DIDerivedType(tag: DW_TAG_member, name: "cls_pool", scope: !314, file: !3, line: 454, baseType: !73, size: 64)
!317 = !DIDerivedType(tag: DW_TAG_member, name: "cls_name", scope: !314, file: !3, line: 455, baseType: !25, size: 64, offset: 64)
!318 = !DIDerivedType(tag: DW_TAG_member, name: "cls_satisfy", scope: !314, file: !3, line: 456, baseType: !7, size: 32, offset: 128)
!319 = !DIDerivedType(tag: DW_TAG_member, name: "cls_acls", scope: !314, file: !3, line: 457, baseType: !30, size: 64, offset: 192)
!320 = !DIDerivedType(tag: DW_TAG_member, name: "cls_next", scope: !314, file: !3, line: 459, baseType: !321, size: 64, offset: 256)
!321 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !314, size: 64)
!322 = !DIDerivedType(tag: DW_TAG_member, name: "proc_prefix", scope: !277, file: !3, line: 522, baseType: !25, size: 64, offset: 19904)
!323 = !DIDerivedType(tag: DW_TAG_member, name: "wtmp_log", scope: !277, file: !3, line: 524, baseType: !27, size: 32, offset: 19968)
!324 = !DIDerivedType(tag: DW_TAG_member, name: "c", scope: !277, file: !3, line: 525, baseType: !121, size: 64, offset: 20032)
!325 = !DIDerivedType(tag: DW_TAG_member, name: "d", scope: !277, file: !3, line: 526, baseType: !121, size: 64, offset: 20096)
!326 = !DIDerivedType(tag: DW_TAG_member, name: "hide_password", scope: !277, file: !3, line: 528, baseType: !27, size: 32, offset: 20160)
!327 = !DIDerivedType(tag: DW_TAG_member, name: "chroot_path", scope: !277, file: !3, line: 530, baseType: !25, size: 64, offset: 20224)
!328 = !DIDerivedType(tag: DW_TAG_member, name: "anon_config", scope: !277, file: !3, line: 532, baseType: !220, size: 64, offset: 20288)
!329 = !DIDerivedType(tag: DW_TAG_member, name: "anon_user", scope: !277, file: !3, line: 533, baseType: !25, size: 64, offset: 20352)
!330 = !DIDerivedType(tag: DW_TAG_member, name: "curr_cmd", scope: !277, file: !3, line: 535, baseType: !25, size: 64, offset: 20416)
!331 = !DIDerivedType(tag: DW_TAG_member, name: "curr_phase", scope: !277, file: !3, line: 536, baseType: !27, size: 32, offset: 20480)
!332 = !DIDerivedType(tag: DW_TAG_member, name: "restart_pos", scope: !277, file: !3, line: 538, baseType: !333, size: 64, offset: 20544)
!333 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !3, line: 464, baseType: !334)
!334 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !176, line: 152, baseType: !230)
!335 = !DIDerivedType(tag: DW_TAG_member, name: "xfer", scope: !277, file: !3, line: 556, baseType: !336, size: 768, offset: 20608)
!336 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !277, file: !3, line: 540, size: 768, elements: !337)
!337 = !{!338, !339, !340, !341, !342, !343, !344, !345, !346, !354, !355, !356, !357}
!338 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !336, file: !3, line: 541, baseType: !48, size: 64)
!339 = !DIDerivedType(tag: DW_TAG_member, name: "xfer_type", scope: !336, file: !3, line: 543, baseType: !27, size: 32, offset: 64)
!340 = !DIDerivedType(tag: DW_TAG_member, name: "direction", scope: !336, file: !3, line: 544, baseType: !27, size: 32, offset: 96)
!341 = !DIDerivedType(tag: DW_TAG_member, name: "filename", scope: !336, file: !3, line: 545, baseType: !25, size: 64, offset: 128)
!342 = !DIDerivedType(tag: DW_TAG_member, name: "path", scope: !336, file: !3, line: 546, baseType: !25, size: 64, offset: 192)
!343 = !DIDerivedType(tag: DW_TAG_member, name: "path_hidden", scope: !336, file: !3, line: 547, baseType: !25, size: 64, offset: 256)
!344 = !DIDerivedType(tag: DW_TAG_member, name: "bufsize", scope: !336, file: !3, line: 549, baseType: !7, size: 32, offset: 320)
!345 = !DIDerivedType(tag: DW_TAG_member, name: "buflen", scope: !336, file: !3, line: 549, baseType: !7, size: 32, offset: 352)
!346 = !DIDerivedType(tag: DW_TAG_member, name: "start_time", scope: !336, file: !3, line: 551, baseType: !347, size: 128, offset: 384)
!347 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timeval", file: !348, line: 8, size: 128, elements: !349)
!348 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h", directory: "", checksumkind: CSK_MD5, checksum: "9b45d950050c215f216850b27bd1e8f3")
!349 = !{!350, !352}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !347, file: !348, line: 14, baseType: !351, size: 64)
!351 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !176, line: 160, baseType: !230)
!352 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !347, file: !348, line: 15, baseType: !353, size: 64, offset: 64)
!353 = !DIDerivedType(tag: DW_TAG_typedef, name: "__suseconds_t", file: !176, line: 162, baseType: !230)
!354 = !DIDerivedType(tag: DW_TAG_member, name: "file_size", scope: !336, file: !3, line: 552, baseType: !333, size: 64, offset: 512)
!355 = !DIDerivedType(tag: DW_TAG_member, name: "total_bytes", scope: !336, file: !3, line: 553, baseType: !333, size: 64, offset: 576)
!356 = !DIDerivedType(tag: DW_TAG_member, name: "bufstart", scope: !336, file: !3, line: 555, baseType: !25, size: 64, offset: 640)
!357 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !336, file: !3, line: 555, baseType: !25, size: 64, offset: 704)
!358 = !DIDerivedType(tag: DW_TAG_member, name: "total_bytes", scope: !277, file: !3, line: 559, baseType: !333, size: 64, offset: 21376)
!359 = !DIDerivedType(tag: DW_TAG_member, name: "total_files_in", scope: !277, file: !3, line: 562, baseType: !7, size: 32, offset: 21440)
!360 = !DIDerivedType(tag: DW_TAG_member, name: "total_files_out", scope: !277, file: !3, line: 565, baseType: !7, size: 32, offset: 21472)
!361 = !DIDerivedType(tag: DW_TAG_member, name: "total_files_xfer", scope: !277, file: !3, line: 570, baseType: !7, size: 32, offset: 21504)
!362 = !DIGlobalVariableExpression(var: !363, expr: !DIExpression())
!363 = distinct !DIGlobalVariable(name: "daemon_uid", scope: !2, file: !3, line: 601, type: !297, isLocal: false, isDefinition: true)
!364 = !DIGlobalVariableExpression(var: !365, expr: !DIExpression())
!365 = distinct !DIGlobalVariable(name: "daemon_gid", scope: !2, file: !3, line: 602, type: !301, isLocal: false, isDefinition: true)
!366 = !DIGlobalVariableExpression(var: !367, expr: !DIExpression())
!367 = distinct !DIGlobalVariable(name: "daemon_gids", scope: !2, file: !3, line: 603, type: !30, isLocal: false, isDefinition: true)
!368 = !DIGlobalVariableExpression(var: !369, expr: !DIExpression())
!369 = distinct !DIGlobalVariable(name: "resp_buf", scope: !2, file: !3, line: 888, type: !370, isLocal: true, isDefinition: true)
!370 = !DICompositeType(tag: DW_TAG_array_type, baseType: !26, size: 16384, elements: !371)
!371 = !{!372}
!372 = !DISubrange(count: 2048)
!373 = !DIGlobalVariableExpression(var: !374, expr: !DIExpression())
!374 = distinct !DIGlobalVariable(name: "match_index_cache", scope: !375, file: !3, line: 943, type: !27, isLocal: true, isDefinition: true)
!375 = distinct !DISubprogram(name: "_dispatch", scope: !3, file: !3, line: 939, type: !376, scopeLine: 939, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !378)
!376 = !DISubroutineType(types: !377)
!377 = !{!27, !208, !27, !27, !25}
!378 = !{}
!379 = !DIGlobalVariableExpression(var: !380, expr: !DIExpression())
!380 = distinct !DIGlobalVariable(name: "last_match", scope: !375, file: !3, line: 944, type: !25, isLocal: true, isDefinition: true)
!381 = !DIGlobalVariableExpression(var: !382, expr: !DIExpression())
!382 = distinct !DIGlobalVariable(name: "nodaemon", scope: !2, file: !3, line: 625, type: !27, isLocal: true, isDefinition: true)
!383 = !DIGlobalVariableExpression(var: !384, expr: !DIExpression())
!384 = distinct !DIGlobalVariable(name: "quiet", scope: !2, file: !3, line: 626, type: !27, isLocal: true, isDefinition: true)
!385 = !DIGlobalVariableExpression(var: !386, expr: !DIExpression())
!386 = distinct !DIGlobalVariable(name: "config_filename", scope: !2, file: !3, line: 639, type: !54, isLocal: true, isDefinition: true)
!387 = !DIGlobalVariableExpression(var: !388, expr: !DIExpression())
!388 = distinct !DIGlobalVariable(name: "syntax_check", scope: !2, file: !3, line: 628, type: !27, isLocal: true, isDefinition: true)
!389 = !DIGlobalVariableExpression(var: !390, expr: !DIExpression())
!390 = distinct !DIGlobalVariable(name: "opts_help", scope: !2, file: !3, line: 1145, type: !391, isLocal: true, isDefinition: true)
!391 = !DICompositeType(tag: DW_TAG_array_type, baseType: !392, size: 2304, elements: !397)
!392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option_help", file: !3, line: 1143, size: 192, elements: !393)
!393 = !{!394, !395, !396}
!394 = !DIDerivedType(tag: DW_TAG_member, name: "long_opt", scope: !392, file: !3, line: 1144, baseType: !54, size: 64)
!395 = !DIDerivedType(tag: DW_TAG_member, name: "short_opt", scope: !392, file: !3, line: 1144, baseType: !54, size: 64, offset: 64)
!396 = !DIDerivedType(tag: DW_TAG_member, name: "desc", scope: !392, file: !3, line: 1144, baseType: !54, size: 64, offset: 128)
!397 = !{!398}
!398 = !DISubrange(count: 12)
!399 = !DIGlobalVariableExpression(var: !400, expr: !DIExpression())
!400 = distinct !DIGlobalVariable(name: "cmd_buf_size", scope: !401, file: !3, line: 1045, type: !230, isLocal: true, isDefinition: true)
!401 = distinct !DISubprogram(name: "cmd_loop", scope: !3, file: !3, line: 1044, type: !402, scopeLine: 1044, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !378)
!402 = !DISubroutineType(types: !403)
!403 = !{null, !65, !404}
!404 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !405, size: 64)
!405 = !DIDerivedType(tag: DW_TAG_typedef, name: "conn_t", file: !3, line: 331, baseType: !122)
!406 = !{i32 7, !"Dwarf Version", i32 5}
!407 = !{i32 2, !"Debug Info Version", i32 3}
!408 = !{i32 1, !"wchar_size", i32 4}
!409 = !{i32 7, !"PIC Level", i32 2}
!410 = !{i32 7, !"PIE Level", i32 2}
!411 = !{i32 7, !"uwtable", i32 1}
!412 = !{i32 7, !"frame-pointer", i32 2}
!413 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!414 = distinct !DISubprogram(name: "my_strncasecmp", scope: !3, file: !3, line: 43, type: !415, scopeLine: 44, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !378)
!415 = !DISubroutineType(types: !416)
!416 = !{!27, !54, !54, !417}
!417 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !418, line: 46, baseType: !145)
!418 = !DIFile(filename: "/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h", directory: "", checksumkind: CSK_MD5, checksum: "2499dd2361b915724b073282bea3a7bc")
!419 = !DILocalVariable(name: "s1", arg: 1, scope: !414, file: !3, line: 43, type: !54)
!420 = !DILocation(line: 43, column: 32, scope: !414)
!421 = !DILocalVariable(name: "s2", arg: 2, scope: !414, file: !3, line: 43, type: !54)
!422 = !DILocation(line: 43, column: 48, scope: !414)
!423 = !DILocalVariable(name: "n", arg: 3, scope: !414, file: !3, line: 43, type: !417)
!424 = !DILocation(line: 43, column: 59, scope: !414)
!425 = !DILocation(line: 45, column: 9, scope: !426)
!426 = distinct !DILexicalBlock(scope: !414, file: !3, line: 45, column: 9)
!427 = !DILocation(line: 45, column: 11, scope: !426)
!428 = !DILocation(line: 45, column: 9, scope: !414)
!429 = !DILocation(line: 45, column: 17, scope: !426)
!430 = !DILocation(line: 47, column: 5, scope: !414)
!431 = !DILocation(line: 47, column: 13, scope: !414)
!432 = !DILocation(line: 47, column: 16, scope: !414)
!433 = !DILocation(line: 47, column: 21, scope: !414)
!434 = !DILocation(line: 47, column: 33, scope: !414)
!435 = !DILocation(line: 47, column: 32, scope: !414)
!436 = !DILocation(line: 47, column: 24, scope: !414)
!437 = !DILocation(line: 47, column: 49, scope: !414)
!438 = !DILocation(line: 47, column: 48, scope: !414)
!439 = !DILocation(line: 47, column: 40, scope: !414)
!440 = !DILocation(line: 47, column: 37, scope: !414)
!441 = !DILocation(line: 0, scope: !414)
!442 = !DILocation(line: 48, column: 13, scope: !443)
!443 = distinct !DILexicalBlock(scope: !444, file: !3, line: 48, column: 13)
!444 = distinct !DILexicalBlock(scope: !414, file: !3, line: 47, column: 54)
!445 = !DILocation(line: 48, column: 15, scope: !443)
!446 = !DILocation(line: 48, column: 20, scope: !443)
!447 = !DILocation(line: 48, column: 24, scope: !443)
!448 = !DILocation(line: 48, column: 23, scope: !443)
!449 = !DILocation(line: 48, column: 27, scope: !443)
!450 = !DILocation(line: 48, column: 35, scope: !443)
!451 = !DILocation(line: 48, column: 39, scope: !443)
!452 = !DILocation(line: 48, column: 38, scope: !443)
!453 = !DILocation(line: 48, column: 42, scope: !443)
!454 = !DILocation(line: 48, column: 13, scope: !444)
!455 = !DILocation(line: 49, column: 13, scope: !443)
!456 = !DILocation(line: 50, column: 11, scope: !444)
!457 = !DILocation(line: 51, column: 11, scope: !444)
!458 = distinct !{!458, !430, !459, !460}
!459 = !DILocation(line: 52, column: 5, scope: !414)
!460 = !{!"llvm.loop.mustprogress"}
!461 = !DILocation(line: 54, column: 44, scope: !414)
!462 = !DILocation(line: 54, column: 20, scope: !414)
!463 = !DILocation(line: 54, column: 12, scope: !414)
!464 = !DILocation(line: 55, column: 46, scope: !414)
!465 = !DILocation(line: 55, column: 22, scope: !414)
!466 = !DILocation(line: 55, column: 14, scope: !414)
!467 = !DILocation(line: 55, column: 12, scope: !414)
!468 = !DILocation(line: 54, column: 5, scope: !414)
!469 = !DILocation(line: 56, column: 1, scope: !414)
!470 = distinct !DISubprogram(name: "set_auth_check", scope: !3, file: !3, line: 641, type: !471, scopeLine: 641, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !378)
!471 = !DISubroutineType(types: !472)
!472 = !{null, !205}
!473 = !DILocalVariable(name: "chk", arg: 1, scope: !470, file: !3, line: 641, type: !205)
!474 = !DILocation(line: 641, column: 27, scope: !470)
!475 = !DILocation(line: 642, column: 18, scope: !470)
!476 = !DILocation(line: 642, column: 16, scope: !470)
!477 = !DILocation(line: 643, column: 1, scope: !470)
!478 = distinct !DISubprogram(name: "sstrncpy", scope: !3, file: !3, line: 646, type: !479, scopeLine: 646, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !378)
!479 = !DISubroutineType(types: !480)
!480 = !{!25, !25, !54, !417}
!481 = !DILocalVariable(name: "dest", arg: 1, scope: !478, file: !3, line: 646, type: !25)
!482 = !DILocation(line: 646, column: 22, scope: !478)
!483 = !DILocalVariable(name: "src", arg: 2, scope: !478, file: !3, line: 646, type: !54)
!484 = !DILocation(line: 646, column: 40, scope: !478)
!485 = !DILocalVariable(name: "n", arg: 3, scope: !478, file: !3, line: 646, type: !417)
!486 = !DILocation(line: 646, column: 52, scope: !478)
!487 = !DILocalVariable(name: "d", scope: !478, file: !3, line: 647, type: !25)
!488 = !DILocation(line: 647, column: 18, scope: !478)
!489 = !DILocation(line: 647, column: 22, scope: !478)
!490 = !DILocation(line: 649, column: 8, scope: !491)
!491 = distinct !DILexicalBlock(scope: !478, file: !3, line: 649, column: 7)
!492 = !DILocation(line: 649, column: 7, scope: !478)
!493 = !DILocation(line: 650, column: 5, scope: !491)
!494 = !DILocation(line: 652, column: 7, scope: !495)
!495 = distinct !DILexicalBlock(scope: !478, file: !3, line: 652, column: 7)
!496 = !DILocation(line: 652, column: 11, scope: !495)
!497 = !DILocation(line: 652, column: 15, scope: !495)
!498 = !DILocation(line: 652, column: 14, scope: !495)
!499 = !DILocation(line: 652, column: 7, scope: !478)
!500 = !DILocation(line: 653, column: 5, scope: !501)
!501 = distinct !DILexicalBlock(scope: !495, file: !3, line: 652, column: 20)
!502 = !DILocation(line: 653, column: 13, scope: !503)
!503 = distinct !DILexicalBlock(scope: !504, file: !3, line: 653, column: 5)
!504 = distinct !DILexicalBlock(scope: !501, file: !3, line: 653, column: 5)
!505 = !DILocation(line: 653, column: 12, scope: !503)
!506 = !DILocation(line: 653, column: 17, scope: !503)
!507 = !DILocation(line: 653, column: 20, scope: !503)
!508 = !DILocation(line: 653, column: 22, scope: !503)
!509 = !DILocation(line: 0, scope: !503)
!510 = !DILocation(line: 653, column: 5, scope: !504)
!511 = !DILocation(line: 654, column: 18, scope: !503)
!512 = !DILocation(line: 654, column: 14, scope: !503)
!513 = !DILocation(line: 654, column: 9, scope: !503)
!514 = !DILocation(line: 654, column: 12, scope: !503)
!515 = !DILocation(line: 654, column: 7, scope: !503)
!516 = !DILocation(line: 653, column: 28, scope: !503)
!517 = !DILocation(line: 653, column: 5, scope: !503)
!518 = distinct !{!518, !510, !519, !460}
!519 = !DILocation(line: 654, column: 18, scope: !504)
!520 = !DILocation(line: 655, column: 3, scope: !501)
!521 = !DILocation(line: 657, column: 4, scope: !478)
!522 = !DILocation(line: 657, column: 6, scope: !478)
!523 = !DILocation(line: 659, column: 10, scope: !478)
!524 = !DILocation(line: 659, column: 3, scope: !478)
!525 = !DILocation(line: 660, column: 1, scope: !478)
!526 = distinct !DISubprogram(name: "push_array", scope: !3, file: !3, line: 662, type: !527, scopeLine: 662, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !378)
!527 = !DISubroutineType(types: !528)
!528 = !{!29, !30}
!529 = !DILocalVariable(name: "arr", arg: 1, scope: !526, file: !3, line: 662, type: !30)
!530 = !DILocation(line: 662, column: 32, scope: !526)
!531 = !DILocation(line: 663, column: 7, scope: !532)
!532 = distinct !DILexicalBlock(scope: !526, file: !3, line: 663, column: 7)
!533 = !DILocation(line: 663, column: 12, scope: !532)
!534 = !DILocation(line: 663, column: 21, scope: !532)
!535 = !DILocation(line: 663, column: 26, scope: !532)
!536 = !DILocation(line: 663, column: 18, scope: !532)
!537 = !DILocation(line: 663, column: 7, scope: !526)
!538 = !DILocalVariable(name: "new_data", scope: !539, file: !3, line: 664, type: !25)
!539 = distinct !DILexicalBlock(scope: !532, file: !3, line: 663, column: 34)
!540 = !DILocation(line: 664, column: 11, scope: !539)
!541 = !DILocation(line: 664, column: 30, scope: !539)
!542 = !DILocation(line: 664, column: 35, scope: !539)
!543 = !DILocation(line: 664, column: 41, scope: !539)
!544 = !DILocation(line: 664, column: 46, scope: !539)
!545 = !DILocation(line: 664, column: 55, scope: !539)
!546 = !DILocation(line: 664, column: 60, scope: !539)
!547 = !DILocation(line: 664, column: 53, scope: !539)
!548 = !DILocation(line: 664, column: 69, scope: !539)
!549 = !DILocation(line: 664, column: 22, scope: !539)
!550 = !DILocation(line: 666, column: 12, scope: !539)
!551 = !DILocation(line: 666, column: 22, scope: !539)
!552 = !DILocation(line: 666, column: 27, scope: !539)
!553 = !DILocation(line: 666, column: 33, scope: !539)
!554 = !DILocation(line: 666, column: 38, scope: !539)
!555 = !DILocation(line: 666, column: 47, scope: !539)
!556 = !DILocation(line: 666, column: 52, scope: !539)
!557 = !DILocation(line: 666, column: 45, scope: !539)
!558 = !DILocation(line: 666, column: 5, scope: !539)
!559 = !DILocation(line: 667, column: 17, scope: !539)
!560 = !DILocation(line: 667, column: 5, scope: !539)
!561 = !DILocation(line: 667, column: 10, scope: !539)
!562 = !DILocation(line: 667, column: 15, scope: !539)
!563 = !DILocation(line: 668, column: 5, scope: !539)
!564 = !DILocation(line: 668, column: 10, scope: !539)
!565 = !DILocation(line: 668, column: 17, scope: !539)
!566 = !DILocation(line: 669, column: 3, scope: !539)
!567 = !DILocation(line: 671, column: 5, scope: !526)
!568 = !DILocation(line: 671, column: 10, scope: !526)
!569 = !DILocation(line: 671, column: 3, scope: !526)
!570 = !DILocation(line: 672, column: 19, scope: !526)
!571 = !DILocation(line: 672, column: 24, scope: !526)
!572 = !DILocation(line: 672, column: 33, scope: !526)
!573 = !DILocation(line: 672, column: 38, scope: !526)
!574 = !DILocation(line: 672, column: 50, scope: !526)
!575 = !DILocation(line: 672, column: 55, scope: !526)
!576 = !DILocation(line: 672, column: 61, scope: !526)
!577 = !DILocation(line: 672, column: 47, scope: !526)
!578 = !DILocation(line: 672, column: 30, scope: !526)
!579 = !DILocation(line: 672, column: 3, scope: !526)
!580 = distinct !DISubprogram(name: "pcalloc", scope: !3, file: !3, line: 754, type: !581, scopeLine: 754, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !378)
!581 = !DISubroutineType(types: !582)
!582 = !{!29, !48, !27}
!583 = !DILocalVariable(name: "p", arg: 1, scope: !580, file: !3, line: 754, type: !48)
!584 = !DILocation(line: 754, column: 28, scope: !580)
!585 = !DILocalVariable(name: "sz", arg: 2, scope: !580, file: !3, line: 754, type: !27)
!586 = !DILocation(line: 754, column: 35, scope: !580)
!587 = !DILocalVariable(name: "res", scope: !580, file: !3, line: 755, type: !29)
!588 = !DILocation(line: 755, column: 9, scope: !580)
!589 = !DILocation(line: 755, column: 22, scope: !580)
!590 = !DILocation(line: 755, column: 25, scope: !580)
!591 = !DILocation(line: 755, column: 15, scope: !580)
!592 = !DILocation(line: 756, column: 10, scope: !580)
!593 = !DILocation(line: 756, column: 21, scope: !580)
!594 = !DILocation(line: 756, column: 3, scope: !580)
!595 = !DILocation(line: 757, column: 10, scope: !580)
!596 = !DILocation(line: 757, column: 3, scope: !580)
!597 = distinct !DISubprogram(name: "pstrdup", scope: !3, file: !3, line: 675, type: !598, scopeLine: 675, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !378)
!598 = !DISubroutineType(types: !599)
!599 = !{!25, !48, !54}
!600 = !DILocalVariable(name: "p", arg: 1, scope: !597, file: !3, line: 675, type: !48)
!601 = !DILocation(line: 675, column: 28, scope: !597)
!602 = !DILocalVariable(name: "s", arg: 2, scope: !597, file: !3, line: 675, type: !54)
!603 = !DILocation(line: 675, column: 43, scope: !597)
!604 = !DILocalVariable(name: "res", scope: !597, file: !3, line: 676, type: !25)
!605 = !DILocation(line: 676, column: 9, scope: !597)
!606 = !DILocalVariable(name: "len", scope: !597, file: !3, line: 677, type: !417)
!607 = !DILocation(line: 677, column: 10, scope: !597)
!608 = !DILocation(line: 679, column: 8, scope: !609)
!609 = distinct !DILexicalBlock(scope: !597, file: !3, line: 679, column: 7)
!610 = !DILocation(line: 679, column: 7, scope: !597)
!611 = !DILocation(line: 680, column: 5, scope: !609)
!612 = !DILocation(line: 682, column: 16, scope: !597)
!613 = !DILocation(line: 682, column: 9, scope: !597)
!614 = !DILocation(line: 682, column: 19, scope: !597)
!615 = !DILocation(line: 682, column: 7, scope: !597)
!616 = !DILocation(line: 684, column: 16, scope: !597)
!617 = !DILocation(line: 684, column: 19, scope: !597)
!618 = !DILocation(line: 684, column: 9, scope: !597)
!619 = !DILocation(line: 684, column: 7, scope: !597)
!620 = !DILocation(line: 685, column: 12, scope: !597)
!621 = !DILocation(line: 685, column: 17, scope: !597)
!622 = !DILocation(line: 685, column: 20, scope: !597)
!623 = !DILocation(line: 685, column: 3, scope: !597)
!624 = !DILocation(line: 686, column: 10, scope: !597)
!625 = !DILocation(line: 686, column: 3, scope: !597)
!626 = !DILocation(line: 687, column: 1, scope: !597)
!627 = distinct !DISubprogram(name: "palloc", scope: !3, file: !3, line: 736, type: !581, scopeLine: 736, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !378)
!628 = !DILocalVariable(name: "p", arg: 1, scope: !627, file: !3, line: 736, type: !48)
!629 = !DILocation(line: 736, column: 27, scope: !627)
!630 = !DILocalVariable(name: "sz", arg: 2, scope: !627, file: !3, line: 736, type: !27)
!631 = !DILocation(line: 736, column: 34, scope: !627)
!632 = !DILocation(line: 737, column: 3, scope: !627)
!633 = distinct !DISubprogram(name: "pr_str_get_word", scope: !3, file: !3, line: 689, type: !634, scopeLine: 689, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !378)
!634 = !DISubroutineType(types: !635)
!635 = !{!25, !239, !27}
!636 = !DILocalVariable(name: "cp", arg: 1, scope: !633, file: !3, line: 689, type: !239)
!637 = !DILocation(line: 689, column: 30, scope: !633)
!638 = !DILocalVariable(name: "flags", arg: 2, scope: !633, file: !3, line: 689, type: !27)
!639 = !DILocation(line: 689, column: 38, scope: !633)
!640 = !DILocalVariable(name: "ret", scope: !633, file: !3, line: 690, type: !25)
!641 = !DILocation(line: 690, column: 9, scope: !633)
!642 = !DILocalVariable(name: "dst", scope: !633, file: !3, line: 690, type: !25)
!643 = !DILocation(line: 690, column: 15, scope: !633)
!644 = !DILocalVariable(name: "quote_mode", scope: !633, file: !3, line: 691, type: !26)
!645 = !DILocation(line: 691, column: 8, scope: !633)
!646 = !DILocation(line: 693, column: 8, scope: !647)
!647 = distinct !DILexicalBlock(scope: !633, file: !3, line: 693, column: 7)
!648 = !DILocation(line: 693, column: 11, scope: !647)
!649 = !DILocation(line: 693, column: 16, scope: !647)
!650 = !DILocation(line: 693, column: 15, scope: !647)
!651 = !DILocation(line: 693, column: 19, scope: !647)
!652 = !DILocation(line: 693, column: 25, scope: !647)
!653 = !DILocation(line: 693, column: 24, scope: !647)
!654 = !DILocation(line: 693, column: 23, scope: !647)
!655 = !DILocation(line: 693, column: 7, scope: !633)
!656 = !DILocation(line: 694, column: 5, scope: !647)
!657 = !DILocation(line: 696, column: 9, scope: !658)
!658 = distinct !DILexicalBlock(scope: !633, file: !3, line: 696, column: 7)
!659 = !DILocation(line: 696, column: 15, scope: !658)
!660 = !DILocation(line: 696, column: 7, scope: !633)
!661 = !DILocation(line: 697, column: 5, scope: !662)
!662 = distinct !DILexicalBlock(scope: !658, file: !3, line: 696, column: 49)
!663 = !DILocation(line: 697, column: 14, scope: !662)
!664 = !DILocation(line: 697, column: 13, scope: !662)
!665 = !DILocation(line: 697, column: 12, scope: !662)
!666 = !DILocation(line: 697, column: 17, scope: !662)
!667 = !DILocation(line: 697, column: 20, scope: !662)
!668 = !DILocation(line: 0, scope: !662)
!669 = !DILocation(line: 698, column: 9, scope: !662)
!670 = !DILocation(line: 698, column: 12, scope: !662)
!671 = distinct !{!671, !661, !670, !460}
!672 = !DILocation(line: 699, column: 3, scope: !662)
!673 = !DILocation(line: 701, column: 10, scope: !674)
!674 = distinct !DILexicalBlock(scope: !633, file: !3, line: 701, column: 7)
!675 = !DILocation(line: 701, column: 9, scope: !674)
!676 = !DILocation(line: 701, column: 8, scope: !674)
!677 = !DILocation(line: 701, column: 7, scope: !633)
!678 = !DILocation(line: 702, column: 5, scope: !674)
!679 = !DILocation(line: 704, column: 16, scope: !633)
!680 = !DILocation(line: 704, column: 15, scope: !633)
!681 = !DILocation(line: 704, column: 13, scope: !633)
!682 = !DILocation(line: 704, column: 7, scope: !633)
!683 = !DILocation(line: 706, column: 9, scope: !684)
!684 = distinct !DILexicalBlock(scope: !633, file: !3, line: 706, column: 7)
!685 = !DILocation(line: 706, column: 15, scope: !684)
!686 = !DILocation(line: 706, column: 7, scope: !633)
!687 = !DILocation(line: 708, column: 11, scope: !688)
!688 = distinct !DILexicalBlock(scope: !689, file: !3, line: 708, column: 9)
!689 = distinct !DILexicalBlock(scope: !684, file: !3, line: 706, column: 47)
!690 = !DILocation(line: 708, column: 10, scope: !688)
!691 = !DILocation(line: 708, column: 9, scope: !688)
!692 = !DILocation(line: 708, column: 14, scope: !688)
!693 = !DILocation(line: 708, column: 9, scope: !689)
!694 = !DILocation(line: 709, column: 7, scope: !688)
!695 = !DILocation(line: 710, column: 3, scope: !689)
!696 = !DILocation(line: 712, column: 9, scope: !697)
!697 = distinct !DILexicalBlock(scope: !633, file: !3, line: 712, column: 7)
!698 = !DILocation(line: 712, column: 8, scope: !697)
!699 = !DILocation(line: 712, column: 7, scope: !697)
!700 = !DILocation(line: 712, column: 12, scope: !697)
!701 = !DILocation(line: 712, column: 7, scope: !633)
!702 = !DILocation(line: 713, column: 15, scope: !703)
!703 = distinct !DILexicalBlock(scope: !697, file: !3, line: 712, column: 21)
!704 = !DILocation(line: 714, column: 7, scope: !703)
!705 = !DILocation(line: 714, column: 10, scope: !703)
!706 = !DILocation(line: 715, column: 3, scope: !703)
!707 = !DILocation(line: 717, column: 3, scope: !633)
!708 = !DILocation(line: 717, column: 12, scope: !633)
!709 = !DILocation(line: 717, column: 11, scope: !633)
!710 = !DILocation(line: 717, column: 10, scope: !633)
!711 = !DILocation(line: 717, column: 15, scope: !633)
!712 = !DILocation(line: 717, column: 19, scope: !633)
!713 = !DILocation(line: 717, column: 35, scope: !633)
!714 = !DILocation(line: 717, column: 34, scope: !633)
!715 = !DILocation(line: 717, column: 33, scope: !633)
!716 = !DILocation(line: 717, column: 38, scope: !633)
!717 = !DILocation(line: 717, column: 50, scope: !633)
!718 = !DILocation(line: 717, column: 49, scope: !633)
!719 = !DILocation(line: 0, scope: !633)
!720 = !DILocation(line: 718, column: 11, scope: !721)
!721 = distinct !DILexicalBlock(scope: !722, file: !3, line: 718, column: 9)
!722 = distinct !DILexicalBlock(scope: !633, file: !3, line: 717, column: 72)
!723 = !DILocation(line: 718, column: 10, scope: !721)
!724 = !DILocation(line: 718, column: 9, scope: !721)
!725 = !DILocation(line: 718, column: 14, scope: !721)
!726 = !DILocation(line: 718, column: 22, scope: !721)
!727 = !DILocation(line: 718, column: 25, scope: !721)
!728 = !DILocation(line: 718, column: 9, scope: !722)
!729 = !DILocation(line: 721, column: 15, scope: !730)
!730 = distinct !DILexicalBlock(scope: !731, file: !3, line: 721, column: 11)
!731 = distinct !DILexicalBlock(scope: !721, file: !3, line: 718, column: 37)
!732 = !DILocation(line: 721, column: 14, scope: !730)
!733 = !DILocation(line: 721, column: 18, scope: !730)
!734 = !DILocation(line: 721, column: 11, scope: !730)
!735 = !DILocation(line: 721, column: 11, scope: !731)
!736 = !DILocation(line: 722, column: 22, scope: !730)
!737 = !DILocation(line: 722, column: 18, scope: !730)
!738 = !DILocation(line: 722, column: 16, scope: !730)
!739 = !DILocation(line: 722, column: 10, scope: !730)
!740 = !DILocation(line: 722, column: 14, scope: !730)
!741 = !DILocation(line: 722, column: 9, scope: !730)
!742 = !DILocation(line: 723, column: 5, scope: !731)
!743 = !DILocation(line: 725, column: 16, scope: !722)
!744 = !DILocation(line: 725, column: 15, scope: !722)
!745 = !DILocation(line: 725, column: 14, scope: !722)
!746 = !DILocation(line: 725, column: 9, scope: !722)
!747 = !DILocation(line: 725, column: 12, scope: !722)
!748 = !DILocation(line: 726, column: 9, scope: !722)
!749 = !DILocation(line: 726, column: 5, scope: !722)
!750 = distinct !{!750, !707, !751, !460}
!751 = !DILocation(line: 727, column: 3, scope: !633)
!752 = !DILocation(line: 729, column: 9, scope: !753)
!753 = distinct !DILexicalBlock(scope: !633, file: !3, line: 729, column: 7)
!754 = !DILocation(line: 729, column: 8, scope: !753)
!755 = !DILocation(line: 729, column: 7, scope: !753)
!756 = !DILocation(line: 729, column: 7, scope: !633)
!757 = !DILocation(line: 730, column: 7, scope: !753)
!758 = !DILocation(line: 730, column: 10, scope: !753)
!759 = !DILocation(line: 730, column: 5, scope: !753)
!760 = !DILocation(line: 731, column: 4, scope: !633)
!761 = !DILocation(line: 731, column: 8, scope: !633)
!762 = !DILocation(line: 733, column: 10, scope: !633)
!763 = !DILocation(line: 733, column: 3, scope: !633)
!764 = !DILocation(line: 734, column: 1, scope: !633)
!765 = distinct !DISubprogram(name: "make_array", scope: !3, file: !3, line: 740, type: !766, scopeLine: 740, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !378)
!766 = !DISubroutineType(types: !767)
!767 = !{!30, !73, !27, !27}
!768 = !DILocalVariable(name: "p", arg: 1, scope: !765, file: !3, line: 740, type: !73)
!769 = !DILocation(line: 740, column: 32, scope: !765)
!770 = !DILocalVariable(name: "nelts", arg: 2, scope: !765, file: !3, line: 740, type: !27)
!771 = !DILocation(line: 740, column: 39, scope: !765)
!772 = !DILocalVariable(name: "elt_size", arg: 3, scope: !765, file: !3, line: 740, type: !27)
!773 = !DILocation(line: 740, column: 50, scope: !765)
!774 = !DILocalVariable(name: "res", scope: !765, file: !3, line: 741, type: !30)
!775 = !DILocation(line: 741, column: 17, scope: !765)
!776 = !DILocation(line: 741, column: 47, scope: !765)
!777 = !DILocation(line: 741, column: 40, scope: !765)
!778 = !DILocation(line: 741, column: 23, scope: !765)
!779 = !DILocation(line: 743, column: 7, scope: !780)
!780 = distinct !DILexicalBlock(scope: !765, file: !3, line: 743, column: 7)
!781 = !DILocation(line: 743, column: 13, scope: !780)
!782 = !DILocation(line: 743, column: 7, scope: !765)
!783 = !DILocation(line: 743, column: 24, scope: !780)
!784 = !DILocation(line: 743, column: 18, scope: !780)
!785 = !DILocation(line: 745, column: 23, scope: !765)
!786 = !DILocation(line: 745, column: 26, scope: !765)
!787 = !DILocation(line: 745, column: 34, scope: !765)
!788 = !DILocation(line: 745, column: 32, scope: !765)
!789 = !DILocation(line: 745, column: 15, scope: !765)
!790 = !DILocation(line: 745, column: 3, scope: !765)
!791 = !DILocation(line: 745, column: 8, scope: !765)
!792 = !DILocation(line: 745, column: 13, scope: !765)
!793 = !DILocation(line: 746, column: 15, scope: !765)
!794 = !DILocation(line: 746, column: 3, scope: !765)
!795 = !DILocation(line: 746, column: 8, scope: !765)
!796 = !DILocation(line: 746, column: 13, scope: !765)
!797 = !DILocation(line: 747, column: 19, scope: !765)
!798 = !DILocation(line: 747, column: 3, scope: !765)
!799 = !DILocation(line: 747, column: 8, scope: !765)
!800 = !DILocation(line: 747, column: 17, scope: !765)
!801 = !DILocation(line: 748, column: 3, scope: !765)
!802 = !DILocation(line: 748, column: 8, scope: !765)
!803 = !DILocation(line: 748, column: 14, scope: !765)
!804 = !DILocation(line: 749, column: 17, scope: !765)
!805 = !DILocation(line: 749, column: 3, scope: !765)
!806 = !DILocation(line: 749, column: 8, scope: !765)
!807 = !DILocation(line: 749, column: 15, scope: !765)
!808 = !DILocation(line: 751, column: 10, scope: !765)
!809 = !DILocation(line: 751, column: 3, scope: !765)
!810 = distinct !DISubprogram(name: "sreplace", scope: !3, file: !3, line: 795, type: !811, scopeLine: 795, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !378)
!811 = !DISubroutineType(types: !812)
!812 = !{!25, !73, !25, null}
!813 = !DILocalVariable(name: "p", arg: 1, scope: !810, file: !3, line: 795, type: !73)
!814 = !DILocation(line: 795, column: 22, scope: !810)
!815 = !DILocalVariable(name: "s", arg: 2, scope: !810, file: !3, line: 795, type: !25)
!816 = !DILocation(line: 795, column: 31, scope: !810)
!817 = !DILocalVariable(name: "args", scope: !810, file: !3, line: 796, type: !818)
!818 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !3, line: 159, baseType: !819)
!819 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !820, baseType: !821)
!820 = !DIFile(filename: "src/main.c", directory: "/home/gok99/Local/doppler/DOPExploit/MyDOP/benchmarks/proftpd-simple-klee")
!821 = !DICompositeType(tag: DW_TAG_array_type, baseType: !822, size: 192, elements: !828)
!822 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", size: 192, elements: !823)
!823 = !{!824, !825, !826, !827}
!824 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !822, file: !820, line: 796, baseType: !7, size: 32)
!825 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !822, file: !820, line: 796, baseType: !7, size: 32, offset: 32)
!826 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !822, file: !820, line: 796, baseType: !29, size: 64, offset: 64)
!827 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !822, file: !820, line: 796, baseType: !29, size: 64, offset: 128)
!828 = !{!829}
!829 = !DISubrange(count: 1)
!830 = !DILocation(line: 796, column: 11, scope: !810)
!831 = !DILocalVariable(name: "m", scope: !810, file: !3, line: 797, type: !25)
!832 = !DILocation(line: 797, column: 9, scope: !810)
!833 = !DILocalVariable(name: "r", scope: !810, file: !3, line: 797, type: !25)
!834 = !DILocation(line: 797, column: 12, scope: !810)
!835 = !DILocalVariable(name: "src", scope: !810, file: !3, line: 797, type: !25)
!836 = !DILocation(line: 797, column: 15, scope: !810)
!837 = !DILocation(line: 797, column: 21, scope: !810)
!838 = !DILocalVariable(name: "cp", scope: !810, file: !3, line: 797, type: !25)
!839 = !DILocation(line: 797, column: 24, scope: !810)
!840 = !DILocalVariable(name: "mptr", scope: !810, file: !3, line: 798, type: !239)
!841 = !DILocation(line: 798, column: 10, scope: !810)
!842 = !DILocalVariable(name: "rptr", scope: !810, file: !3, line: 798, type: !239)
!843 = !DILocation(line: 798, column: 17, scope: !810)
!844 = !DILocalVariable(name: "marr", scope: !810, file: !3, line: 799, type: !845)
!845 = !DICompositeType(tag: DW_TAG_array_type, baseType: !25, size: 2112, elements: !846)
!846 = !{!847}
!847 = !DISubrange(count: 33)
!848 = !DILocation(line: 799, column: 9, scope: !810)
!849 = !DILocalVariable(name: "rarr", scope: !810, file: !3, line: 799, type: !845)
!850 = !DILocation(line: 799, column: 19, scope: !810)
!851 = !DILocalVariable(name: "buf", scope: !810, file: !3, line: 800, type: !290)
!852 = !DILocation(line: 800, column: 8, scope: !810)
!853 = !DILocalVariable(name: "pbuf", scope: !810, file: !3, line: 800, type: !25)
!854 = !DILocation(line: 800, column: 29, scope: !810)
!855 = !DILocalVariable(name: "mlen", scope: !810, file: !3, line: 811, type: !27)
!856 = !DILocation(line: 811, column: 7, scope: !810)
!857 = !DILocalVariable(name: "rlen", scope: !810, file: !3, line: 811, type: !27)
!858 = !DILocation(line: 811, column: 17, scope: !810)
!859 = !DILocalVariable(name: "blen", scope: !810, file: !3, line: 812, type: !27)
!860 = !DILocation(line: 812, column: 7, scope: !810)
!861 = !DILocalVariable(name: "dyn", scope: !810, file: !3, line: 812, type: !27)
!862 = !DILocation(line: 812, column: 13, scope: !810)
!863 = !DILocation(line: 814, column: 8, scope: !810)
!864 = !DILocation(line: 814, column: 6, scope: !810)
!865 = !DILocation(line: 815, column: 4, scope: !810)
!866 = !DILocation(line: 815, column: 7, scope: !810)
!867 = !DILocation(line: 817, column: 3, scope: !810)
!868 = !DILocation(line: 818, column: 3, scope: !810)
!869 = !DILocation(line: 819, column: 17, scope: !810)
!870 = !DILocation(line: 819, column: 10, scope: !810)
!871 = !DILocation(line: 819, column: 22, scope: !810)
!872 = !DILocation(line: 819, column: 8, scope: !810)
!873 = !DILocation(line: 821, column: 3, scope: !810)
!874 = !DILocation(line: 823, column: 3, scope: !810)
!875 = !DILocation(line: 823, column: 15, scope: !810)
!876 = !DILocation(line: 823, column: 13, scope: !810)
!877 = !DILocation(line: 823, column: 37, scope: !810)
!878 = !DILocation(line: 823, column: 45, scope: !810)
!879 = !DILocation(line: 823, column: 48, scope: !810)
!880 = !DILocation(line: 823, column: 53, scope: !810)
!881 = !DILocation(line: 0, scope: !810)
!882 = !DILocation(line: 824, column: 14, scope: !883)
!883 = distinct !DILexicalBlock(scope: !884, file: !3, line: 824, column: 9)
!884 = distinct !DILexicalBlock(scope: !810, file: !3, line: 823, column: 59)
!885 = !DILocation(line: 824, column: 12, scope: !883)
!886 = !DILocation(line: 824, column: 36, scope: !883)
!887 = !DILocation(line: 824, column: 9, scope: !884)
!888 = !DILocation(line: 825, column: 7, scope: !883)
!889 = !DILocation(line: 826, column: 21, scope: !884)
!890 = !DILocation(line: 826, column: 14, scope: !884)
!891 = !DILocation(line: 826, column: 33, scope: !884)
!892 = !DILocation(line: 826, column: 26, scope: !884)
!893 = !DILocation(line: 826, column: 24, scope: !884)
!894 = !DILocation(line: 826, column: 10, scope: !884)
!895 = !DILocation(line: 827, column: 18, scope: !884)
!896 = !DILocation(line: 827, column: 10, scope: !884)
!897 = !DILocation(line: 827, column: 5, scope: !884)
!898 = !DILocation(line: 827, column: 16, scope: !884)
!899 = !DILocation(line: 828, column: 20, scope: !884)
!900 = !DILocation(line: 828, column: 14, scope: !884)
!901 = !DILocation(line: 828, column: 5, scope: !884)
!902 = !DILocation(line: 828, column: 18, scope: !884)
!903 = distinct !{!903, !874, !904, !460}
!904 = !DILocation(line: 829, column: 3, scope: !810)
!905 = !DILocation(line: 831, column: 3, scope: !810)
!906 = !DILocation(line: 842, column: 7, scope: !907)
!907 = distinct !DILexicalBlock(scope: !810, file: !3, line: 842, column: 7)
!908 = !DILocation(line: 842, column: 12, scope: !907)
!909 = !DILocation(line: 842, column: 7, scope: !810)
!910 = !DILocation(line: 843, column: 34, scope: !907)
!911 = !DILocation(line: 843, column: 37, scope: !907)
!912 = !DILocation(line: 843, column: 26, scope: !907)
!913 = !DILocation(line: 843, column: 15, scope: !907)
!914 = !DILocation(line: 843, column: 8, scope: !907)
!915 = !DILocation(line: 843, column: 5, scope: !907)
!916 = !DILocation(line: 845, column: 8, scope: !917)
!917 = distinct !DILexicalBlock(scope: !810, file: !3, line: 845, column: 7)
!918 = !DILocation(line: 845, column: 7, scope: !810)
!919 = !DILocation(line: 846, column: 17, scope: !920)
!920 = distinct !DILexicalBlock(scope: !917, file: !3, line: 845, column: 14)
!921 = !DILocation(line: 846, column: 15, scope: !920)
!922 = !DILocation(line: 846, column: 8, scope: !920)
!923 = !DILocation(line: 847, column: 9, scope: !920)
!924 = !DILocation(line: 848, column: 10, scope: !920)
!925 = !DILocation(line: 849, column: 3, scope: !920)
!926 = !DILocation(line: 851, column: 3, scope: !810)
!927 = !DILocation(line: 851, column: 11, scope: !810)
!928 = !DILocation(line: 851, column: 10, scope: !810)
!929 = !DILocation(line: 852, column: 17, scope: !930)
!930 = distinct !DILexicalBlock(scope: !931, file: !3, line: 852, column: 5)
!931 = distinct !DILexicalBlock(scope: !810, file: !3, line: 851, column: 16)
!932 = !DILocation(line: 852, column: 15, scope: !930)
!933 = !DILocation(line: 852, column: 30, scope: !930)
!934 = !DILocation(line: 852, column: 28, scope: !930)
!935 = !DILocation(line: 852, column: 10, scope: !930)
!936 = !DILocation(line: 852, column: 37, scope: !937)
!937 = distinct !DILexicalBlock(scope: !930, file: !3, line: 852, column: 5)
!938 = !DILocation(line: 852, column: 36, scope: !937)
!939 = !DILocation(line: 852, column: 5, scope: !930)
!940 = !DILocation(line: 853, column: 22, scope: !941)
!941 = distinct !DILexicalBlock(scope: !937, file: !3, line: 852, column: 59)
!942 = !DILocation(line: 853, column: 21, scope: !941)
!943 = !DILocation(line: 853, column: 14, scope: !941)
!944 = !DILocation(line: 853, column: 12, scope: !941)
!945 = !DILocation(line: 854, column: 22, scope: !941)
!946 = !DILocation(line: 854, column: 21, scope: !941)
!947 = !DILocation(line: 854, column: 14, scope: !941)
!948 = !DILocation(line: 854, column: 12, scope: !941)
!949 = !DILocation(line: 856, column: 19, scope: !950)
!950 = distinct !DILexicalBlock(scope: !941, file: !3, line: 856, column: 11)
!951 = !DILocation(line: 856, column: 25, scope: !950)
!952 = !DILocation(line: 856, column: 24, scope: !950)
!953 = !DILocation(line: 856, column: 31, scope: !950)
!954 = !DILocation(line: 856, column: 11, scope: !950)
!955 = !DILocation(line: 856, column: 37, scope: !950)
!956 = !DILocation(line: 856, column: 11, scope: !941)
!957 = !DILocation(line: 857, column: 18, scope: !958)
!958 = distinct !DILexicalBlock(scope: !950, file: !3, line: 856, column: 43)
!959 = !DILocation(line: 857, column: 23, scope: !958)
!960 = !DILocation(line: 857, column: 22, scope: !958)
!961 = !DILocation(line: 857, column: 29, scope: !958)
!962 = !DILocation(line: 857, column: 43, scope: !958)
!963 = !DILocation(line: 857, column: 36, scope: !958)
!964 = !DILocation(line: 857, column: 34, scope: !958)
!965 = !DILocation(line: 857, column: 9, scope: !958)
!966 = !DILocation(line: 858, column: 8, scope: !967)
!967 = distinct !DILexicalBlock(scope: !958, file: !3, line: 858, column: 6)
!968 = !DILocation(line: 858, column: 13, scope: !967)
!969 = !DILocation(line: 858, column: 11, scope: !967)
!970 = !DILocation(line: 858, column: 21, scope: !967)
!971 = !DILocation(line: 858, column: 19, scope: !967)
!972 = !DILocation(line: 858, column: 26, scope: !967)
!973 = !DILocation(line: 858, column: 33, scope: !967)
!974 = !DILocation(line: 858, column: 31, scope: !967)
!975 = !DILocation(line: 858, column: 6, scope: !958)
!976 = !DILocation(line: 859, column: 9, scope: !977)
!977 = distinct !DILexicalBlock(scope: !967, file: !3, line: 858, column: 39)
!978 = !DILocation(line: 859, column: 16, scope: !977)
!979 = !DILocation(line: 859, column: 14, scope: !977)
!980 = !DILocation(line: 859, column: 21, scope: !977)
!981 = !DILocation(line: 859, column: 7, scope: !977)
!982 = !DILocation(line: 860, column: 4, scope: !977)
!983 = !DILocation(line: 863, column: 10, scope: !984)
!984 = distinct !DILexicalBlock(scope: !967, file: !3, line: 862, column: 9)
!985 = !DILocation(line: 863, column: 7, scope: !984)
!986 = !DILocation(line: 866, column: 16, scope: !958)
!987 = !DILocation(line: 866, column: 13, scope: !958)
!988 = !DILocation(line: 867, column: 9, scope: !958)
!989 = !DILocation(line: 869, column: 5, scope: !941)
!990 = !DILocation(line: 852, column: 47, scope: !937)
!991 = !DILocation(line: 852, column: 55, scope: !937)
!992 = !DILocation(line: 852, column: 5, scope: !937)
!993 = distinct !{!993, !939, !994, !460}
!994 = !DILocation(line: 869, column: 5, scope: !930)
!995 = !DILocation(line: 871, column: 11, scope: !996)
!996 = distinct !DILexicalBlock(scope: !931, file: !3, line: 871, column: 9)
!997 = !DILocation(line: 871, column: 10, scope: !996)
!998 = !DILocation(line: 871, column: 9, scope: !931)
!999 = !DILocation(line: 872, column: 12, scope: !1000)
!1000 = distinct !DILexicalBlock(scope: !1001, file: !3, line: 872, column: 11)
!1001 = distinct !DILexicalBlock(scope: !996, file: !3, line: 871, column: 17)
!1002 = !DILocation(line: 872, column: 17, scope: !1000)
!1003 = !DILocation(line: 872, column: 15, scope: !1000)
!1004 = !DILocation(line: 872, column: 22, scope: !1000)
!1005 = !DILocation(line: 872, column: 29, scope: !1000)
!1006 = !DILocation(line: 872, column: 27, scope: !1000)
!1007 = !DILocation(line: 872, column: 11, scope: !1001)
!1008 = !DILocation(line: 873, column: 13, scope: !1009)
!1009 = distinct !DILexicalBlock(scope: !1000, file: !3, line: 872, column: 35)
!1010 = !DILocation(line: 873, column: 20, scope: !1009)
!1011 = !DILocation(line: 873, column: 18, scope: !1009)
!1012 = !DILocation(line: 873, column: 25, scope: !1009)
!1013 = !DILocation(line: 873, column: 11, scope: !1009)
!1014 = !DILocation(line: 874, column: 7, scope: !1009)
!1015 = !DILocation(line: 875, column: 19, scope: !1001)
!1016 = !DILocation(line: 875, column: 15, scope: !1001)
!1017 = !DILocation(line: 875, column: 10, scope: !1001)
!1018 = !DILocation(line: 875, column: 13, scope: !1001)
!1019 = !DILocation(line: 876, column: 5, scope: !1001)
!1020 = distinct !{!1020, !926, !1021, !460}
!1021 = !DILocation(line: 877, column: 3, scope: !810)
!1022 = !DILabel(scope: !810, name: "done", file: !3, line: 879)
!1023 = !DILocation(line: 879, column: 2, scope: !810)
!1024 = !DILocation(line: 880, column: 4, scope: !810)
!1025 = !DILocation(line: 880, column: 7, scope: !810)
!1026 = !DILocation(line: 882, column: 7, scope: !1027)
!1027 = distinct !DILexicalBlock(scope: !810, file: !3, line: 882, column: 7)
!1028 = !DILocation(line: 882, column: 7, scope: !810)
!1029 = !DILocation(line: 883, column: 12, scope: !1027)
!1030 = !DILocation(line: 883, column: 5, scope: !1027)
!1031 = !DILocation(line: 885, column: 18, scope: !810)
!1032 = !DILocation(line: 885, column: 21, scope: !810)
!1033 = !DILocation(line: 885, column: 10, scope: !810)
!1034 = !DILocation(line: 885, column: 3, scope: !810)
!1035 = !DILocation(line: 886, column: 1, scope: !810)
!1036 = distinct !DISubprogram(name: "pr_response_send_raw", scope: !3, file: !3, line: 890, type: !1037, scopeLine: 890, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !378)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{null, !54, null}
!1039 = !DILocalVariable(name: "fmt", arg: 1, scope: !1036, file: !3, line: 890, type: !54)
!1040 = !DILocation(line: 890, column: 39, scope: !1036)
!1041 = !DILocalVariable(name: "msg", scope: !1036, file: !3, line: 891, type: !818)
!1042 = !DILocation(line: 891, column: 11, scope: !1036)
!1043 = !DILocation(line: 893, column: 3, scope: !1036)
!1044 = !DILocation(line: 894, column: 41, scope: !1036)
!1045 = !DILocation(line: 894, column: 46, scope: !1036)
!1046 = !DILocation(line: 894, column: 3, scope: !1036)
!1047 = !DILocation(line: 895, column: 3, scope: !1036)
!1048 = !DILocation(line: 897, column: 34, scope: !1036)
!1049 = !DILocation(line: 899, column: 3, scope: !1036)
!1050 = !DILocation(line: 900, column: 1, scope: !1036)
!1051 = distinct !DISubprogram(name: "core_display_file", scope: !3, file: !3, line: 902, type: !1052, scopeLine: 902, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !378)
!1052 = !DISubroutineType(types: !1053)
!1053 = !{!27, !54, !54, !54}
!1054 = !DILocalVariable(name: "numeric", arg: 1, scope: !1051, file: !3, line: 902, type: !54)
!1055 = !DILocation(line: 902, column: 35, scope: !1051)
!1056 = !DILocalVariable(name: "fn", arg: 2, scope: !1051, file: !3, line: 902, type: !54)
!1057 = !DILocation(line: 902, column: 56, scope: !1051)
!1058 = !DILocalVariable(name: "fs", arg: 3, scope: !1051, file: !3, line: 902, type: !54)
!1059 = !DILocation(line: 902, column: 72, scope: !1051)
!1060 = !DILocalVariable(name: "buf", scope: !1051, file: !3, line: 903, type: !290)
!1061 = !DILocation(line: 903, column: 8, scope: !1051)
!1062 = !DILocalVariable(name: "len", scope: !1051, file: !3, line: 904, type: !27)
!1063 = !DILocation(line: 904, column: 7, scope: !1051)
!1064 = !DILocalVariable(name: "current_clients", scope: !1051, file: !3, line: 905, type: !1065)
!1065 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!1066 = !DILocation(line: 905, column: 17, scope: !1051)
!1067 = !DILocalVariable(name: "max_clients", scope: !1051, file: !3, line: 906, type: !1065)
!1068 = !DILocation(line: 906, column: 17, scope: !1051)
!1069 = !DILocalVariable(name: "fs_size", scope: !1051, file: !3, line: 907, type: !333)
!1070 = !DILocation(line: 907, column: 9, scope: !1051)
!1071 = !DILocalVariable(name: "p", scope: !1051, file: !3, line: 908, type: !73)
!1072 = !DILocation(line: 908, column: 9, scope: !1051)
!1073 = !DILocalVariable(name: "s", scope: !1051, file: !3, line: 909, type: !76)
!1074 = !DILocation(line: 909, column: 12, scope: !1051)
!1075 = !DILocalVariable(name: "c", scope: !1051, file: !3, line: 910, type: !215)
!1076 = !DILocation(line: 910, column: 15, scope: !1051)
!1077 = !DILocalVariable(name: "serverfqdn", scope: !1051, file: !3, line: 911, type: !54)
!1078 = !DILocation(line: 911, column: 15, scope: !1051)
!1079 = !DILocation(line: 911, column: 28, scope: !1051)
!1080 = !DILocation(line: 911, column: 41, scope: !1051)
!1081 = !DILocalVariable(name: "outs", scope: !1051, file: !3, line: 912, type: !25)
!1082 = !DILocation(line: 912, column: 9, scope: !1051)
!1083 = !DILocalVariable(name: "mg_size", scope: !1051, file: !3, line: 912, type: !1084)
!1084 = !DICompositeType(tag: DW_TAG_array_type, baseType: !26, size: 96, elements: !397)
!1085 = !DILocation(line: 912, column: 15, scope: !1051)
!1086 = !DILocalVariable(name: "mg_size_units", scope: !1051, file: !3, line: 912, type: !1084)
!1087 = !DILocation(line: 912, column: 37, scope: !1051)
!1088 = !DILocalVariable(name: "mg_max", scope: !1051, file: !3, line: 913, type: !1084)
!1089 = !DILocation(line: 913, column: 5, scope: !1051)
!1090 = !DILocalVariable(name: "total_files_in", scope: !1051, file: !3, line: 914, type: !1084)
!1091 = !DILocation(line: 914, column: 8, scope: !1051)
!1092 = !DILocalVariable(name: "total_files_out", scope: !1051, file: !3, line: 914, type: !1084)
!1093 = !DILocation(line: 914, column: 37, scope: !1051)
!1094 = !DILocalVariable(name: "total_files_xfer", scope: !1051, file: !3, line: 915, type: !1084)
!1095 = !DILocation(line: 915, column: 5, scope: !1051)
!1096 = !DILocalVariable(name: "mg_class_limit", scope: !1051, file: !3, line: 916, type: !1084)
!1097 = !DILocation(line: 916, column: 8, scope: !1051)
!1098 = !DILocalVariable(name: "mg_cur", scope: !1051, file: !3, line: 916, type: !1084)
!1099 = !DILocation(line: 916, column: 37, scope: !1051)
!1100 = !DILocalVariable(name: "mg_xfer_bytes", scope: !1051, file: !3, line: 917, type: !1084)
!1101 = !DILocation(line: 917, column: 5, scope: !1051)
!1102 = !DILocalVariable(name: "mg_cur_class", scope: !1051, file: !3, line: 917, type: !1084)
!1103 = !DILocation(line: 917, column: 33, scope: !1051)
!1104 = !DILocalVariable(name: "mg_xfer_units", scope: !1051, file: !3, line: 918, type: !1084)
!1105 = !DILocation(line: 918, column: 8, scope: !1051)
!1106 = !DILocalVariable(name: "config_class_users", scope: !1051, file: !3, line: 918, type: !1107)
!1107 = !DICompositeType(tag: DW_TAG_array_type, baseType: !26, size: 1024, elements: !1108)
!1108 = !{!1109}
!1109 = !DISubrange(count: 128)
!1110 = !DILocation(line: 918, column: 36, scope: !1051)
!1111 = !DILocalVariable(name: "user", scope: !1051, file: !3, line: 918, type: !25)
!1112 = !DILocation(line: 918, column: 71, scope: !1051)
!1113 = !DILocalVariable(name: "mg_time", scope: !1051, file: !3, line: 919, type: !54)
!1114 = !DILocation(line: 919, column: 15, scope: !1051)
!1115 = !DILocalVariable(name: "first", scope: !1051, file: !3, line: 920, type: !24)
!1116 = !DILocation(line: 920, column: 17, scope: !1051)
!1117 = !DILocation(line: 922, column: 3, scope: !1051)
!1118 = !DILocation(line: 922, column: 10, scope: !1051)
!1119 = !DILocation(line: 922, column: 14, scope: !1051)
!1120 = !DILocation(line: 923, column: 5, scope: !1121)
!1121 = distinct !DILexicalBlock(scope: !1051, file: !3, line: 922, column: 23)
!1122 = !DILocation(line: 923, column: 24, scope: !1121)
!1123 = !DILocation(line: 925, column: 18, scope: !1121)
!1124 = !DILocation(line: 925, column: 11, scope: !1121)
!1125 = !DILocation(line: 925, column: 9, scope: !1121)
!1126 = !DILocation(line: 927, column: 5, scope: !1121)
!1127 = !DILocation(line: 927, column: 11, scope: !1121)
!1128 = !DILocation(line: 927, column: 15, scope: !1121)
!1129 = !DILocation(line: 927, column: 23, scope: !1121)
!1130 = !DILocation(line: 927, column: 26, scope: !1121)
!1131 = !DILocation(line: 927, column: 19, scope: !1121)
!1132 = !DILocation(line: 927, column: 30, scope: !1121)
!1133 = !DILocation(line: 927, column: 38, scope: !1121)
!1134 = !DILocation(line: 927, column: 45, scope: !1121)
!1135 = !DILocation(line: 927, column: 48, scope: !1121)
!1136 = !DILocation(line: 927, column: 41, scope: !1121)
!1137 = !DILocation(line: 927, column: 52, scope: !1121)
!1138 = !DILocation(line: 0, scope: !1121)
!1139 = !DILocation(line: 928, column: 11, scope: !1140)
!1140 = distinct !DILexicalBlock(scope: !1121, file: !3, line: 927, column: 62)
!1141 = !DILocation(line: 928, column: 14, scope: !1140)
!1142 = !DILocation(line: 928, column: 7, scope: !1140)
!1143 = !DILocation(line: 928, column: 18, scope: !1140)
!1144 = !DILocation(line: 929, column: 10, scope: !1140)
!1145 = distinct !{!1145, !1126, !1146, !460}
!1146 = !DILocation(line: 930, column: 5, scope: !1121)
!1147 = !DILocation(line: 932, column: 21, scope: !1121)
!1148 = !DILocation(line: 932, column: 24, scope: !1121)
!1149 = !DILocation(line: 932, column: 36, scope: !1121)
!1150 = !DILocation(line: 932, column: 84, scope: !1121)
!1151 = !DILocation(line: 932, column: 97, scope: !1121)
!1152 = !DILocation(line: 932, column: 12, scope: !1121)
!1153 = !DILocation(line: 932, column: 10, scope: !1121)
!1154 = !DILocation(line: 933, column: 33, scope: !1121)
!1155 = !DILocation(line: 933, column: 5, scope: !1121)
!1156 = distinct !{!1156, !1117, !1157, !460}
!1157 = !DILocation(line: 934, column: 3, scope: !1051)
!1158 = !DILocation(line: 936, column: 3, scope: !1051)
!1159 = distinct !DISubprogram(name: "pr_cmd_dispatch", scope: !3, file: !3, line: 976, type: !1160, scopeLine: 976, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !378)
!1160 = !DISubroutineType(types: !1161)
!1161 = !{null, !208}
!1162 = !DILocalVariable(name: "cmd", arg: 1, scope: !1159, file: !3, line: 976, type: !208)
!1163 = !DILocation(line: 976, column: 31, scope: !1159)
!1164 = !DILocalVariable(name: "cp", scope: !1159, file: !3, line: 977, type: !25)
!1165 = !DILocation(line: 977, column: 9, scope: !1159)
!1166 = !DILocalVariable(name: "success", scope: !1159, file: !3, line: 978, type: !27)
!1167 = !DILocation(line: 978, column: 7, scope: !1159)
!1168 = !DILocation(line: 981, column: 29, scope: !1159)
!1169 = !DILocation(line: 981, column: 13, scope: !1159)
!1170 = !DILocation(line: 992, column: 28, scope: !1159)
!1171 = !DILocation(line: 992, column: 3, scope: !1159)
!1172 = !DILocation(line: 995, column: 23, scope: !1159)
!1173 = !DILocation(line: 995, column: 13, scope: !1159)
!1174 = !DILocation(line: 995, column: 11, scope: !1159)
!1175 = !DILocation(line: 997, column: 8, scope: !1176)
!1176 = distinct !DILexicalBlock(scope: !1159, file: !3, line: 997, column: 7)
!1177 = !DILocation(line: 997, column: 7, scope: !1159)
!1178 = !DILocation(line: 998, column: 25, scope: !1176)
!1179 = !DILocation(line: 998, column: 15, scope: !1176)
!1180 = !DILocation(line: 998, column: 13, scope: !1176)
!1181 = !DILocation(line: 998, column: 5, scope: !1176)
!1182 = !DILocation(line: 1000, column: 7, scope: !1183)
!1183 = distinct !DILexicalBlock(scope: !1159, file: !3, line: 1000, column: 7)
!1184 = !DILocation(line: 1000, column: 15, scope: !1183)
!1185 = !DILocation(line: 1000, column: 7, scope: !1159)
!1186 = !DILocation(line: 1004, column: 15, scope: !1187)
!1187 = distinct !DILexicalBlock(scope: !1183, file: !3, line: 1000, column: 20)
!1188 = !DILocation(line: 1004, column: 5, scope: !1187)
!1189 = !DILocation(line: 1005, column: 15, scope: !1187)
!1190 = !DILocation(line: 1005, column: 5, scope: !1187)
!1191 = !DILocation(line: 1007, column: 15, scope: !1187)
!1192 = !DILocation(line: 1007, column: 5, scope: !1187)
!1193 = !DILocation(line: 1008, column: 15, scope: !1187)
!1194 = !DILocation(line: 1008, column: 5, scope: !1187)
!1195 = !DILocation(line: 1011, column: 5, scope: !1187)
!1196 = !DILocation(line: 1014, column: 23, scope: !1159)
!1197 = !DILocation(line: 1014, column: 13, scope: !1159)
!1198 = !DILocation(line: 1014, column: 11, scope: !1159)
!1199 = !DILocation(line: 1016, column: 8, scope: !1200)
!1200 = distinct !DILexicalBlock(scope: !1159, file: !3, line: 1016, column: 7)
!1201 = !DILocation(line: 1016, column: 7, scope: !1159)
!1202 = !DILocation(line: 1017, column: 25, scope: !1200)
!1203 = !DILocation(line: 1017, column: 15, scope: !1200)
!1204 = !DILocation(line: 1017, column: 13, scope: !1200)
!1205 = !DILocation(line: 1017, column: 5, scope: !1200)
!1206 = !DILocation(line: 1019, column: 7, scope: !1207)
!1207 = distinct !DILexicalBlock(scope: !1159, file: !3, line: 1019, column: 7)
!1208 = !DILocation(line: 1019, column: 15, scope: !1207)
!1209 = !DILocation(line: 1019, column: 7, scope: !1159)
!1210 = !DILocation(line: 1020, column: 25, scope: !1211)
!1211 = distinct !DILexicalBlock(scope: !1207, file: !3, line: 1019, column: 21)
!1212 = !DILocation(line: 1020, column: 15, scope: !1211)
!1213 = !DILocation(line: 1020, column: 13, scope: !1211)
!1214 = !DILocation(line: 1021, column: 10, scope: !1215)
!1215 = distinct !DILexicalBlock(scope: !1211, file: !3, line: 1021, column: 9)
!1216 = !DILocation(line: 1021, column: 9, scope: !1211)
!1217 = !DILocation(line: 1022, column: 27, scope: !1215)
!1218 = !DILocation(line: 1022, column: 17, scope: !1215)
!1219 = !DILocation(line: 1022, column: 15, scope: !1215)
!1220 = !DILocation(line: 1022, column: 7, scope: !1215)
!1221 = !DILocation(line: 1024, column: 15, scope: !1211)
!1222 = !DILocation(line: 1024, column: 5, scope: !1211)
!1223 = !DILocation(line: 1025, column: 15, scope: !1211)
!1224 = !DILocation(line: 1025, column: 5, scope: !1211)
!1225 = !DILocation(line: 1029, column: 3, scope: !1211)
!1226 = !DILocation(line: 1029, column: 14, scope: !1227)
!1227 = distinct !DILexicalBlock(scope: !1207, file: !3, line: 1029, column: 14)
!1228 = !DILocation(line: 1029, column: 22, scope: !1227)
!1229 = !DILocation(line: 1029, column: 14, scope: !1207)
!1230 = !DILocation(line: 1033, column: 25, scope: !1231)
!1231 = distinct !DILexicalBlock(scope: !1227, file: !3, line: 1029, column: 27)
!1232 = !DILocation(line: 1033, column: 15, scope: !1231)
!1233 = !DILocation(line: 1033, column: 13, scope: !1231)
!1234 = !DILocation(line: 1034, column: 10, scope: !1235)
!1235 = distinct !DILexicalBlock(scope: !1231, file: !3, line: 1034, column: 9)
!1236 = !DILocation(line: 1034, column: 9, scope: !1231)
!1237 = !DILocation(line: 1035, column: 27, scope: !1235)
!1238 = !DILocation(line: 1035, column: 17, scope: !1235)
!1239 = !DILocation(line: 1035, column: 15, scope: !1235)
!1240 = !DILocation(line: 1035, column: 7, scope: !1235)
!1241 = !DILocation(line: 1037, column: 15, scope: !1231)
!1242 = !DILocation(line: 1037, column: 5, scope: !1231)
!1243 = !DILocation(line: 1038, column: 15, scope: !1231)
!1244 = !DILocation(line: 1038, column: 5, scope: !1231)
!1245 = !DILocation(line: 1041, column: 3, scope: !1231)
!1246 = !DILocation(line: 1042, column: 1, scope: !1159)
!1247 = !DILocalVariable(name: "cmd", arg: 1, scope: !375, file: !3, line: 939, type: !208)
!1248 = !DILocation(line: 939, column: 31, scope: !375)
!1249 = !DILocalVariable(name: "cmd_type", arg: 2, scope: !375, file: !3, line: 939, type: !27)
!1250 = !DILocation(line: 939, column: 40, scope: !375)
!1251 = !DILocalVariable(name: "validate", arg: 3, scope: !375, file: !3, line: 939, type: !27)
!1252 = !DILocation(line: 939, column: 54, scope: !375)
!1253 = !DILocalVariable(name: "match", arg: 4, scope: !375, file: !3, line: 939, type: !25)
!1254 = !DILocation(line: 939, column: 70, scope: !375)
!1255 = !DILocalVariable(name: "cmdargstr", scope: !375, file: !3, line: 940, type: !25)
!1256 = !DILocation(line: 940, column: 9, scope: !375)
!1257 = !DILocalVariable(name: "success", scope: !375, file: !3, line: 941, type: !27)
!1258 = !DILocation(line: 941, column: 7, scope: !375)
!1259 = !DILocalVariable(name: "send_error", scope: !375, file: !3, line: 942, type: !27)
!1260 = !DILocation(line: 942, column: 7, scope: !375)
!1261 = !DILocalVariable(name: "index_cache", scope: !375, file: !3, line: 945, type: !1262)
!1262 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !27, size: 64)
!1263 = !DILocation(line: 945, column: 8, scope: !375)
!1264 = !DILocation(line: 947, column: 17, scope: !375)
!1265 = !DILocation(line: 947, column: 26, scope: !375)
!1266 = !DILocation(line: 947, column: 37, scope: !375)
!1267 = !DILocation(line: 947, column: 40, scope: !375)
!1268 = !DILocation(line: 947, column: 49, scope: !375)
!1269 = !DILocation(line: 947, column: 56, scope: !375)
!1270 = !DILocation(line: 948, column: 5, scope: !375)
!1271 = !DILocation(line: 948, column: 14, scope: !375)
!1272 = !DILocation(line: 947, column: 14, scope: !375)
!1273 = !DILocation(line: 950, column: 8, scope: !1274)
!1274 = distinct !DILexicalBlock(scope: !375, file: !3, line: 950, column: 7)
!1275 = !DILocation(line: 950, column: 7, scope: !375)
!1276 = !DILocation(line: 951, column: 13, scope: !1277)
!1277 = distinct !DILexicalBlock(scope: !1274, file: !3, line: 950, column: 15)
!1278 = !DILocation(line: 951, column: 18, scope: !1277)
!1279 = !DILocation(line: 951, column: 11, scope: !1277)
!1280 = !DILocation(line: 952, column: 20, scope: !1277)
!1281 = !DILocation(line: 952, column: 25, scope: !1277)
!1282 = !DILocation(line: 952, column: 17, scope: !1277)
!1283 = !DILocation(line: 954, column: 3, scope: !1277)
!1284 = !DILocation(line: 955, column: 9, scope: !1285)
!1285 = distinct !DILexicalBlock(scope: !1286, file: !3, line: 955, column: 9)
!1286 = distinct !DILexicalBlock(scope: !1274, file: !3, line: 954, column: 10)
!1287 = !DILocation(line: 955, column: 23, scope: !1285)
!1288 = !DILocation(line: 955, column: 20, scope: !1285)
!1289 = !DILocation(line: 955, column: 9, scope: !1286)
!1290 = !DILocation(line: 956, column: 25, scope: !1291)
!1291 = distinct !DILexicalBlock(scope: !1285, file: !3, line: 955, column: 30)
!1292 = !DILocation(line: 957, column: 20, scope: !1291)
!1293 = !DILocation(line: 957, column: 18, scope: !1291)
!1294 = !DILocation(line: 958, column: 5, scope: !1291)
!1295 = !DILocation(line: 960, column: 17, scope: !1286)
!1296 = !DILocation(line: 963, column: 10, scope: !375)
!1297 = !DILocation(line: 963, column: 3, scope: !375)
!1298 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 1187, type: !1299, scopeLine: 1187, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !378)
!1299 = !DISubroutineType(types: !1300)
!1300 = !{!27, !27, !239, !239}
!1301 = !DILocalVariable(name: "argc", arg: 1, scope: !1298, file: !3, line: 1187, type: !27)
!1302 = !DILocation(line: 1187, column: 14, scope: !1298)
!1303 = !DILocalVariable(name: "argv", arg: 2, scope: !1298, file: !3, line: 1187, type: !239)
!1304 = !DILocation(line: 1187, column: 26, scope: !1298)
!1305 = !DILocalVariable(name: "envp", arg: 3, scope: !1298, file: !3, line: 1187, type: !239)
!1306 = !DILocation(line: 1187, column: 41, scope: !1298)
!1307 = !DILocalVariable(name: "optc", scope: !1298, file: !3, line: 1188, type: !27)
!1308 = !DILocation(line: 1188, column: 7, scope: !1298)
!1309 = !DILocalVariable(name: "show_version", scope: !1298, file: !3, line: 1188, type: !27)
!1310 = !DILocation(line: 1188, column: 13, scope: !1298)
!1311 = !DILocalVariable(name: "cmdopts", scope: !1298, file: !3, line: 1189, type: !54)
!1312 = !DILocation(line: 1189, column: 15, scope: !1298)
!1313 = !DILocation(line: 1194, column: 3, scope: !1298)
!1314 = !DILocation(line: 1200, column: 9, scope: !1298)
!1315 = !DILocation(line: 1200, column: 3, scope: !1298)
!1316 = !DILocation(line: 1220, column: 10, scope: !1298)
!1317 = !DILocation(line: 1221, column: 3, scope: !1298)
!1318 = !DILocation(line: 1225, column: 10, scope: !1298)
!1319 = !DILocation(line: 1225, column: 16, scope: !1298)
!1320 = !DILocation(line: 1225, column: 22, scope: !1298)
!1321 = !DILocation(line: 1225, column: 3, scope: !1298)
!1322 = !DILocation(line: 1221, column: 16, scope: !1298)
!1323 = !DILocation(line: 1227, column: 5, scope: !1298)
!1324 = !DILocation(line: 1228, column: 13, scope: !1325)
!1325 = distinct !DILexicalBlock(scope: !1298, file: !3, line: 1227, column: 12)
!1326 = !DILocation(line: 1228, column: 5, scope: !1325)
!1327 = !DILocation(line: 1231, column: 12, scope: !1328)
!1328 = distinct !DILexicalBlock(scope: !1329, file: !3, line: 1231, column: 11)
!1329 = distinct !DILexicalBlock(scope: !1325, file: !3, line: 1228, column: 19)
!1330 = !DILocation(line: 1231, column: 11, scope: !1329)
!1331 = !DILocation(line: 1233, column: 9, scope: !1332)
!1332 = distinct !DILexicalBlock(scope: !1328, file: !3, line: 1231, column: 20)
!1333 = !DILocation(line: 1243, column: 7, scope: !1329)
!1334 = !DILocation(line: 1246, column: 15, scope: !1329)
!1335 = !DILocation(line: 1247, column: 7, scope: !1329)
!1336 = !DILocation(line: 1250, column: 12, scope: !1329)
!1337 = !DILocation(line: 1251, column: 7, scope: !1329)
!1338 = !DILocation(line: 1254, column: 12, scope: !1339)
!1339 = distinct !DILexicalBlock(scope: !1329, file: !3, line: 1254, column: 11)
!1340 = !DILocation(line: 1254, column: 11, scope: !1329)
!1341 = !DILocation(line: 1256, column: 9, scope: !1342)
!1342 = distinct !DILexicalBlock(scope: !1339, file: !3, line: 1254, column: 20)
!1343 = !DILocation(line: 1259, column: 7, scope: !1329)
!1344 = !DILocation(line: 1262, column: 12, scope: !1345)
!1345 = distinct !DILexicalBlock(scope: !1329, file: !3, line: 1262, column: 11)
!1346 = !DILocation(line: 1262, column: 11, scope: !1329)
!1347 = !DILocation(line: 1265, column: 9, scope: !1348)
!1348 = distinct !DILexicalBlock(scope: !1345, file: !3, line: 1262, column: 20)
!1349 = !DILocation(line: 1271, column: 32, scope: !1329)
!1350 = !DILocation(line: 1271, column: 25, scope: !1329)
!1351 = !DILocation(line: 1271, column: 23, scope: !1329)
!1352 = !DILocation(line: 1272, column: 7, scope: !1329)
!1353 = !DILocation(line: 1276, column: 7, scope: !1329)
!1354 = !DILocation(line: 1280, column: 20, scope: !1329)
!1355 = !DILocation(line: 1281, column: 7, scope: !1329)
!1356 = !DILocation(line: 1282, column: 14, scope: !1329)
!1357 = !DILocation(line: 1282, column: 7, scope: !1329)
!1358 = !DILocation(line: 1283, column: 7, scope: !1329)
!1359 = !DILocation(line: 1286, column: 12, scope: !1360)
!1360 = distinct !DILexicalBlock(scope: !1361, file: !3, line: 1286, column: 11)
!1361 = distinct !DILexicalBlock(scope: !1329, file: !3, line: 1285, column: 15)
!1362 = !DILocation(line: 1286, column: 19, scope: !1360)
!1363 = !DILocation(line: 1287, column: 38, scope: !1360)
!1364 = !DILocation(line: 1287, column: 33, scope: !1360)
!1365 = !DILocation(line: 1287, column: 31, scope: !1360)
!1366 = !DILocation(line: 1287, column: 12, scope: !1360)
!1367 = !DILocation(line: 1287, column: 47, scope: !1360)
!1368 = !DILocation(line: 1287, column: 52, scope: !1360)
!1369 = !DILocation(line: 1287, column: 55, scope: !1360)
!1370 = !DILocation(line: 1287, column: 73, scope: !1360)
!1371 = !DILocation(line: 1286, column: 11, scope: !1361)
!1372 = !DILocation(line: 1289, column: 9, scope: !1373)
!1373 = distinct !DILexicalBlock(scope: !1360, file: !3, line: 1287, column: 80)
!1374 = !DILocation(line: 1292, column: 7, scope: !1361)
!1375 = !DILocation(line: 1296, column: 19, scope: !1329)
!1376 = !DILocation(line: 1297, column: 7, scope: !1329)
!1377 = !DILocation(line: 1300, column: 20, scope: !1329)
!1378 = !DILocation(line: 1301, column: 7, scope: !1329)
!1379 = !DILocation(line: 1304, column: 7, scope: !1329)
!1380 = !DILocation(line: 1308, column: 7, scope: !1329)
!1381 = !DILocation(line: 1309, column: 5, scope: !1329)
!1382 = distinct !{!1382, !1317, !1383, !460}
!1383 = !DILocation(line: 1310, column: 3, scope: !1298)
!1384 = !DILocation(line: 1312, column: 3, scope: !1298)
!1385 = !DILocation(line: 1314, column: 3, scope: !1298)
!1386 = distinct !DISubprogram(name: "show_usage", scope: !3, file: !3, line: 1171, type: !1387, scopeLine: 1171, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !378)
!1387 = !DISubroutineType(types: !1388)
!1388 = !{null, !27}
!1389 = !DILocalVariable(name: "exit_code", arg: 1, scope: !1386, file: !3, line: 1171, type: !27)
!1390 = !DILocation(line: 1171, column: 28, scope: !1386)
!1391 = !DILocalVariable(name: "h", scope: !1386, file: !3, line: 1172, type: !1392)
!1392 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !392, size: 64)
!1393 = !DILocation(line: 1172, column: 23, scope: !1386)
!1394 = !DILocation(line: 1174, column: 3, scope: !1386)
!1395 = !DILocation(line: 1175, column: 10, scope: !1396)
!1396 = distinct !DILexicalBlock(scope: !1386, file: !3, line: 1175, column: 3)
!1397 = !DILocation(line: 1175, column: 8, scope: !1396)
!1398 = !DILocation(line: 1175, column: 23, scope: !1399)
!1399 = distinct !DILexicalBlock(scope: !1396, file: !3, line: 1175, column: 3)
!1400 = !DILocation(line: 1175, column: 26, scope: !1399)
!1401 = !DILocation(line: 1175, column: 3, scope: !1396)
!1402 = !DILocation(line: 1179, column: 21, scope: !1403)
!1403 = distinct !DILexicalBlock(scope: !1399, file: !3, line: 1175, column: 41)
!1404 = !DILocation(line: 1179, column: 24, scope: !1403)
!1405 = !DILocation(line: 1179, column: 5, scope: !1403)
!1406 = !DILocation(line: 1181, column: 24, scope: !1403)
!1407 = !DILocation(line: 1181, column: 27, scope: !1403)
!1408 = !DILocation(line: 1181, column: 5, scope: !1403)
!1409 = !DILocation(line: 1182, column: 3, scope: !1403)
!1410 = !DILocation(line: 1175, column: 37, scope: !1399)
!1411 = !DILocation(line: 1175, column: 3, scope: !1399)
!1412 = distinct !{!1412, !1401, !1413, !460}
!1413 = !DILocation(line: 1182, column: 3, scope: !1396)
!1414 = !DILocation(line: 1184, column: 8, scope: !1386)
!1415 = !DILocation(line: 1184, column: 3, scope: !1386)
!1416 = distinct !DISubprogram(name: "inetd_main", scope: !3, file: !3, line: 1117, type: !1417, scopeLine: 1117, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !378)
!1417 = !DISubroutineType(types: !1418)
!1418 = !{null}
!1419 = !DILocalVariable(name: "res", scope: !1416, file: !3, line: 1118, type: !27)
!1420 = !DILocation(line: 1118, column: 7, scope: !1416)
!1421 = !DILocation(line: 1120, column: 3, scope: !1416)
!1422 = !DILocation(line: 1121, column: 1, scope: !1416)
!1423 = distinct !DISubprogram(name: "fork_server", scope: !3, file: !3, line: 1107, type: !1424, scopeLine: 1107, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !378)
!1424 = !DISubroutineType(types: !1425)
!1425 = !{null, !27, !24}
!1426 = !DILocalVariable(name: "fd", arg: 1, scope: !1423, file: !3, line: 1107, type: !27)
!1427 = !DILocation(line: 1107, column: 29, scope: !1423)
!1428 = !DILocalVariable(name: "nofork", arg: 2, scope: !1423, file: !3, line: 1107, type: !24)
!1429 = !DILocation(line: 1107, column: 47, scope: !1423)
!1430 = !DILocalVariable(name: "conn", scope: !1423, file: !3, line: 1108, type: !404)
!1431 = !DILocation(line: 1108, column: 11, scope: !1423)
!1432 = !DILocalVariable(name: "ident_lookups", scope: !1423, file: !3, line: 1109, type: !1433)
!1433 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!1434 = !DILocation(line: 1109, column: 18, scope: !1423)
!1435 = !DILocalVariable(name: "i", scope: !1423, file: !3, line: 1110, type: !27)
!1436 = !DILocation(line: 1110, column: 7, scope: !1423)
!1437 = !DILocalVariable(name: "rev", scope: !1423, file: !3, line: 1110, type: !27)
!1438 = !DILocation(line: 1110, column: 10, scope: !1423)
!1439 = !DILocalVariable(name: "semfds", scope: !1423, file: !3, line: 1111, type: !1440)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !27, size: 64, elements: !1441)
!1441 = !{!1442}
!1442 = !DISubrange(count: 2)
!1443 = !DILocation(line: 1111, column: 7, scope: !1423)
!1444 = !DILocalVariable(name: "xerrno", scope: !1423, file: !3, line: 1112, type: !27)
!1445 = !DILocation(line: 1112, column: 7, scope: !1423)
!1446 = !DILocation(line: 1114, column: 12, scope: !1423)
!1447 = !DILocation(line: 1114, column: 25, scope: !1423)
!1448 = !DILocation(line: 1114, column: 3, scope: !1423)
!1449 = !DILocation(line: 1115, column: 1, scope: !1423)
!1450 = !DILocalVariable(name: "server", arg: 1, scope: !401, file: !3, line: 1044, type: !65)
!1451 = !DILocation(line: 1044, column: 34, scope: !401)
!1452 = !DILocalVariable(name: "c", arg: 2, scope: !401, file: !3, line: 1044, type: !404)
!1453 = !DILocation(line: 1044, column: 50, scope: !401)
!1454 = !DILocalVariable(name: "id", scope: !401, file: !3, line: 1046, type: !215)
!1455 = !DILocation(line: 1046, column: 15, scope: !401)
!1456 = !DILocalVariable(name: "buf", scope: !401, file: !3, line: 1047, type: !290)
!1457 = !DILocation(line: 1047, column: 8, scope: !401)
!1458 = !DILocalVariable(name: "cp", scope: !401, file: !3, line: 1048, type: !25)
!1459 = !DILocation(line: 1048, column: 9, scope: !401)
!1460 = !DILocalVariable(name: "display", scope: !401, file: !3, line: 1049, type: !25)
!1461 = !DILocation(line: 1049, column: 9, scope: !401)
!1462 = !DILocalVariable(name: "serveraddress", scope: !401, file: !3, line: 1050, type: !54)
!1463 = !DILocation(line: 1050, column: 15, scope: !401)
!1464 = !DILocalVariable(name: "masq_c", scope: !401, file: !3, line: 1051, type: !215)
!1465 = !DILocation(line: 1051, column: 15, scope: !401)
!1466 = !DILocalVariable(name: "i", scope: !401, file: !3, line: 1052, type: !27)
!1467 = !DILocation(line: 1052, column: 7, scope: !401)
!1468 = !DILocation(line: 1054, column: 3, scope: !401)
!1469 = !DILocation(line: 1055, column: 22, scope: !401)
!1470 = !DILocation(line: 1055, column: 3, scope: !401)
!1471 = !DILocation(line: 1056, column: 22, scope: !401)
!1472 = !DILocation(line: 1056, column: 3, scope: !401)
!1473 = !DILocation(line: 1057, column: 22, scope: !401)
!1474 = !DILocation(line: 1057, column: 3, scope: !401)
!1475 = !DILocation(line: 1058, column: 22, scope: !401)
!1476 = !DILocation(line: 1058, column: 3, scope: !401)
!1477 = !DILocation(line: 1059, column: 22, scope: !401)
!1478 = !DILocation(line: 1059, column: 3, scope: !401)
!1479 = !DILocation(line: 1060, column: 22, scope: !401)
!1480 = !DILocation(line: 1060, column: 3, scope: !401)
!1481 = !DILocalVariable(name: "MAX_LOOP", scope: !401, file: !3, line: 1062, type: !27)
!1482 = !DILocation(line: 1062, column: 7, scope: !401)
!1483 = !DILocation(line: 1065, column: 3, scope: !401)
!1484 = !DILocation(line: 1065, column: 10, scope: !401)
!1485 = !DILocation(line: 1065, column: 18, scope: !401)
!1486 = !DILocation(line: 1066, column: 13, scope: !1487)
!1487 = distinct !DILexicalBlock(scope: !401, file: !3, line: 1065, column: 22)
!1488 = !DILocation(line: 1067, column: 9, scope: !1489)
!1489 = distinct !DILexicalBlock(scope: !1487, file: !3, line: 1067, column: 9)
!1490 = !DILocation(line: 1067, column: 22, scope: !1489)
!1491 = !DILocation(line: 1067, column: 9, scope: !1487)
!1492 = !DILocation(line: 1068, column: 19, scope: !1493)
!1493 = distinct !DILexicalBlock(scope: !1489, file: !3, line: 1067, column: 29)
!1494 = !DILocation(line: 1069, column: 5, scope: !1493)
!1495 = !DILocation(line: 1071, column: 9, scope: !1487)
!1496 = !DILocation(line: 1071, column: 22, scope: !1487)
!1497 = !DILocation(line: 1071, column: 5, scope: !1487)
!1498 = !DILocation(line: 1071, column: 27, scope: !1487)
!1499 = !DILocation(line: 1072, column: 16, scope: !1487)
!1500 = !DILocation(line: 1072, column: 9, scope: !1487)
!1501 = !DILocation(line: 1072, column: 7, scope: !1487)
!1502 = !DILocation(line: 1074, column: 9, scope: !1503)
!1503 = distinct !DILexicalBlock(scope: !1487, file: !3, line: 1074, column: 9)
!1504 = !DILocation(line: 1074, column: 11, scope: !1503)
!1505 = !DILocation(line: 1074, column: 19, scope: !1503)
!1506 = !DILocation(line: 1074, column: 20, scope: !1503)
!1507 = !DILocation(line: 1074, column: 15, scope: !1503)
!1508 = !DILocation(line: 1074, column: 24, scope: !1503)
!1509 = !DILocation(line: 1074, column: 32, scope: !1503)
!1510 = !DILocation(line: 1074, column: 39, scope: !1503)
!1511 = !DILocation(line: 1074, column: 40, scope: !1503)
!1512 = !DILocation(line: 1074, column: 35, scope: !1503)
!1513 = !DILocation(line: 1074, column: 44, scope: !1503)
!1514 = !DILocation(line: 1074, column: 9, scope: !1487)
!1515 = !DILocation(line: 1075, column: 11, scope: !1516)
!1516 = distinct !DILexicalBlock(scope: !1503, file: !3, line: 1074, column: 54)
!1517 = !DILocation(line: 1075, column: 12, scope: !1516)
!1518 = !DILocation(line: 1075, column: 7, scope: !1516)
!1519 = !DILocation(line: 1075, column: 16, scope: !1516)
!1520 = !DILocation(line: 1076, column: 8, scope: !1516)
!1521 = !DILocation(line: 1078, column: 11, scope: !1522)
!1522 = distinct !DILexicalBlock(scope: !1516, file: !3, line: 1078, column: 11)
!1523 = !DILocation(line: 1078, column: 13, scope: !1522)
!1524 = !DILocation(line: 1078, column: 21, scope: !1522)
!1525 = !DILocation(line: 1078, column: 22, scope: !1522)
!1526 = !DILocation(line: 1078, column: 17, scope: !1522)
!1527 = !DILocation(line: 1078, column: 26, scope: !1522)
!1528 = !DILocation(line: 1078, column: 34, scope: !1522)
!1529 = !DILocation(line: 1078, column: 41, scope: !1522)
!1530 = !DILocation(line: 1078, column: 42, scope: !1522)
!1531 = !DILocation(line: 1078, column: 37, scope: !1522)
!1532 = !DILocation(line: 1078, column: 46, scope: !1522)
!1533 = !DILocation(line: 1078, column: 11, scope: !1516)
!1534 = !DILocation(line: 1079, column: 13, scope: !1522)
!1535 = !DILocation(line: 1079, column: 14, scope: !1522)
!1536 = !DILocation(line: 1079, column: 9, scope: !1522)
!1537 = !DILocation(line: 1079, column: 18, scope: !1522)
!1538 = !DILocation(line: 1080, column: 5, scope: !1516)
!1539 = !DILocation(line: 1082, column: 10, scope: !1487)
!1540 = !DILocation(line: 1082, column: 8, scope: !1487)
!1541 = !DILocation(line: 1083, column: 10, scope: !1542)
!1542 = distinct !DILexicalBlock(scope: !1487, file: !3, line: 1083, column: 9)
!1543 = !DILocation(line: 1083, column: 9, scope: !1542)
!1544 = !DILocation(line: 1083, column: 13, scope: !1542)
!1545 = !DILocation(line: 1083, column: 9, scope: !1487)
!1546 = !DILocation(line: 1084, column: 9, scope: !1542)
!1547 = !DILocation(line: 1084, column: 7, scope: !1542)
!1548 = !DILocation(line: 1086, column: 10, scope: !1549)
!1549 = distinct !DILexicalBlock(scope: !1487, file: !3, line: 1086, column: 9)
!1550 = !DILocation(line: 1086, column: 9, scope: !1549)
!1551 = !DILocation(line: 1086, column: 9, scope: !1487)
!1552 = !DILocalVariable(name: "cmd", scope: !1553, file: !3, line: 1087, type: !208)
!1553 = distinct !DILexicalBlock(scope: !1549, file: !3, line: 1086, column: 14)
!1554 = !DILocation(line: 1087, column: 16, scope: !1553)
!1555 = !DILocalVariable(name: "flags", scope: !1553, file: !3, line: 1088, type: !27)
!1556 = !DILocation(line: 1088, column: 11, scope: !1553)
!1557 = !DILocation(line: 1100, column: 11, scope: !1553)
!1558 = !DILocation(line: 1102, column: 23, scope: !1553)
!1559 = !DILocation(line: 1102, column: 7, scope: !1553)
!1560 = !DILocation(line: 1103, column: 5, scope: !1553)
!1561 = distinct !{!1561, !1483, !1562, !460}
!1562 = !DILocation(line: 1104, column: 3, scope: !401)
!1563 = !DILocation(line: 1105, column: 1, scope: !401)
