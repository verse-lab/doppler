Print the Grammar:
Variable var    
	call45.i.i, %377, %396, %382, %383, %401, %402, call52.i.i, %403, %422, %408, %409, %427, %428, call59.i.i, %429, %448, %434, %435, %453, %454, call66.i.i, %436, %437, %444, %571, call66.i.i78, %578, call.i11.i.i, %579, %580, %584, call34.i.i, %586, call40.i.i, %683, %691, %696, %697, call.i79.i.i, call3.i.i.i, %698, call5.i.i.i, %699, call6.i.i.i, %202, call17.i190.i, %194, %195, %166, %196, call.i177.i, %197, %198, call8.i180.i, %167, %174, %168, %175, call14.i150.i, %1089, %616, call.i45.i.i, %617, %621, call.i.i47.i.i, %622, %623, %627, %845, %863, %864, %865, %846, %847, %854, %848, %855, call14.i.i135, %856, %857, %58, %59, %78, %64, %703, %700, call9.i.i.i, %701, %702, %704, %738, call44.i.i.i, %705, %706, %707, %176, %177, call17.i153.i, %169, %170, %141, %171, call.i140.i, %172, %173, call8.i143.i, %142, %149, %143, %150, call14.i113.i, %151, call5.i.i, %1017, call6.i.i166, %1021, %1018, call9.i.i167, %1019, %1020, %1022, %1056, call44.i.i184, %1023, %1024, call17.i.i138, %849, %850, %788, %851, call.i.i125, %852, %853, call8.i.i128, %790, %30, %36, %34, %35, call.i.i, %52, call2.i, %128, %114, %115, %133, call35.i, %134, %153, %139, %140, %158, call40.i, %159, %178, %164, %165, %666, %555, %668, %669, %560, call.i2.i.i, %561, %565, call.i.i.i.i, %566, %567, %585, call38.i.i73, %556, %516, call6.i.i26, %392, %386, %393, call14.i113.i.i, %394, %395, call17.i116.i.i, %387, %388, %358, %389, call.i103.i.i, %390, %391, call8.i106.i.i, %359, %366, call, call1, call2, call3, call4, %29, %22, call5, call.i, call1.i, %462, call70.i, call6, call.i9, call1.i12, %477, call7.i14, call4.i.i23, %922, %923, %927, %1067, call93.i, %1068, %1088, call15, call.i104, call2.i105, %934, call.i45.i, %935, %939, call.i.i47.i, %940, %941, %945, %420, %421, call17.i153.i.i, %320, %306, %307, %325, %344, %330, %331, %349, %350, call38.i.i, %351, %370, %356, %357, %375, %376, %1042, %1046, %1047, %1048, %1049, %1050, %1051, %1052, %1053, call34.i.i179, %1054, %1025, %1026, %1027, call18.i.i, %1031, call.i4.i.i, %1032, %1033, %1040, call.i.i83.i, %1041, %529, %536, %530, %537, call14.i.i.i57, %538, %539, call17.i.i.i60, %531, %532, call.i.i18, %729, %730, %731, %732, %733, %734, %735, call34.i.i.i, %736, call37.i.i.i, call38.i.i.i, %737, %687, %689, %588, call46.i.i, %589, call49.i.i, %590, %594, %591, %592, call61.i.i, call63.i.i, %593, call11.i.i, call14.i278.i, %296, call15.i.i, %295, %297, %298, %299, %300, %301, %152, call17.i116.i, %144, %145, %116, %146, call.i103.i, %147, %148, call8.i106.i, %117, %124, %118, %125, call14.i76.i, %126, %127, call17.i79.i, %119, %360, %367, call14.i76.i.i, %368, %369, call17.i79.i.i, %361, %362, %332, %363, call.i66.i.i, %364, %365, call8.i69.i.i, %333, %340, %334, %341, call14.i39.i.i, %342, %343, call17.i42.i.i, %335, %708, %709, call18.i.i.i, %713, call.i4.i.i.i, %714, %715, %722, call.i.i83.i.i, %723, %724, %728, %69, %70, %37, %71, call.i9.i, %72, %73, call8.i.i, %38, %39, %40, %41, %42, %43, %44, %45, %48, %46, %47, call79.i, %949, call81.i, %953, call.i65.i, %954, %955, %959, %960, %977, %120, %91, %121, call.i66.i, %122, %123, call8.i69.i, %92, %99, %93, %100, call14.i39.i, %101, %102, call17.i42.i, %94, %95, call79.i.i, %631, call81.i.i, %635, call.i65.i.i, %636, %637, %641, %642, %659, %660, %662, %671, %681, call44.i, %903, call38.i, %874, %834, call6.i, %835, %836, %837, %838, %839, %858, %844, %225, call14.i224.i, %226, %227, call17.i227.i, %413, %414, %384, %415, call.i140.i.i, %416, %417, call8.i143.i.i, %385, call.i22.i.i, %599, %603, call.i.i24.i.i, %604, %605, %609, %749, call93.i.i, %750, %66, %96, call.i29.i, %97, %98, call8.i32.i, %67, %74, %68, %75, call14.i.i, %76, %77, call17.i.i, %336, %308, %337, call.i29.i.i, %338, %339, call8.i32.i.i, %309, %316, %310, %317, call14.i.i.i, %318, %319, call17.i.i.i, call46.i, %907, call49.i, %908, %912, %909, %910, call61.i158, call63.i, %911, call58.i, %905, %478, call11.i, call17.i, %916, %869, %870, call12.i, %514, %548, %515, call17.i.i70, %598, %551, %552, %554, %183, call45.i, %184, %203, %189, %190, %208, call50.i, %209, %228, %214, %517, %518, %519, %520, %521, %540, %526, %527, %545, %546, %547, %528, call7.i, %54, call8.i, %53, %55, %56, %57, call26.i, %84, %103, %89, %90, %108, call30.i, %109, %191, %221, call.i214.i, %222, %223, call8.i217.i, %192, %199, %193, %200, call14.i187.i, %201, %438, %445, call14.i187.i.i, %446, %447, call17.i190.i.i, %439, %440, %410, %441, call.i177.i.i, %442, %443, call8.i180.i.i, %411, %418, %412, %419, call14.i150.i.i, call58.i.i, %587, call44.i.i, %776, %784, %792, %797, call4.i107, %832, %866, %833, %872, call.i22.i, %917, %921, call.i.i24.i, %978, %980, %989, %999, %1001, %1009, %1014, %1015, call.i79.i, call3.i.i, %1016, %268, call4.i.i, %269, call6.i.i, %270, call8.i273.i, call9.i.i, %455, %272, %278, %276, %277, call.i.i.i, %294, call37.i.i, call38.i.i180, %1055, %1005, %1007, %984, %873, %986, %987, %878, call.i2.i, %879, %883, call.i.i.i146, %884, %533, call.i.i.i47, %534, %535, call8.i.i.i50, call2.i.i20, %473, %474, call4.i, %475, %476, call5.i, %782, %773, %775, call8, %215, %233, call55.i, %234, %253, %239, %240, %258, %271, %264, %265, %266, call.i272.i, %267, call2.i.i, %65, %83, %885, %889, call66.i, %896, call.i11.i, %897, %898, %902, call34.i, %904, call40.i157, %906, %311, %312, %279, %313, call.i9.i.i, %314, %315, call8.i.i.i, %280, %281, %282, %283, %284, %285, %286, %287, %290, %288, %289, %461, call61.i, %241, %242, %249, %243, %250, call14.i261.i, %251, %252, call17.i264.i, %244, %245, %216, %246, call.i251.i, %247, %248, call8.i254.i, %217, %224, %218, %219, %220, 
Valid Statement VS ::= 
| vs0: n = scandir(directory, &namelist, 0, alphasort); 
| vs1: directory += strlen(thehost->DOCUMENTROOT); 
| vs2: Trim: empty stmt 
| vs3: t_vhost *thevhost=0; 
| vs4: strcpy(filename, SERVERROOT); 
| vs5: strcpy(SERVERROOT, ptr2); 
| vs6: char const *src = srcaddr; 
| vs7: *a++ = s; 
| vs8: strcpy(thevhost->DEFAULTPAGE, ptr2); 
| vs9: strcpy(thevhost->CGIBINDIR, ptr2); 
| vs10: strcat(filename, "/cmderror.html"); 
| vs11: setgid(pw->pw_gid); 
| vs12: no_vhosts++; 
| vs13: ptr1 = strtok(tempstring, "\" \t"); 
| vs14: char tempstring[255], *ptr1=0, *ptr2=0; 
| vs15: ptr1 = strtok(tempstring, "\"\t "); 
| vs16: ptr2 = strtok(NULL, "\"\t "); 
| vs17: /* drop any priveledges we have */ 
| vs18: unsigned long size=0; 
| vs19: setbuf(stdin, 0); 
| vs20: strcpy(defaulthost.DEFAULTPAGE, "index.html"); 
| vs21: Trim: empty stmt 
| vs22: strcpy(thevhost->host, ptr2); 
| vs23: strcpy(thevhost->DOCUMENTROOT, ptr2); 
| vs24: i = 1; 
| vs25: setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i); 
| vs26: my_addr.sin_family = AF_INET;         /* host byte order */ 
| vs27: my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */ 
| vs28: my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */ 
| vs29: char *a = dst; 
| vs30: strcpy(thevhost->CGIBINROOT, ptr2); 
| vs31: int loop=0; 
| vs32: printf("Warning: unknown variable in config file \"%s\"\n", ptr1); 
| vs33: host_ptr1 = strstr(tempdata, "Host:"); 
| vs34: setbuf(stdout, 0); 
| vs35: chdir(thehost->CGIBINROOT); 
| vs36: execl(filename, ""); 
| vs37: int numbytes=0; 
| vs38: strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs"); 
| vs39: char *ptr1=0, *ptr2=0; 
| vs40: SERVERPORT = atoi(ptr2); 
| vs41: thehost = &defaulthost; 
| vs42: strcpy(defaulthost.CGIBINDIR, "/cgi-bin"); 
| vs43: *dest++ = *src++; 
| vs44: strcpy(defaulthost.DOCUMENTROOT, ptr2); 
| vs45: strcpy(defaulthost.DEFAULTPAGE, ptr2); 
| vs46: no_vhosts = count_vhosts(); 
| vs47: sprintf(tempstring, "%s%s/%s", thehost->DOCUMENTROOT, directory, namelist[loop]->d_name); 
| vs48: ptr2 = strtok(NULL, "\" \t"); 
| vs49: sprintf(tempstring, "<tr><td><center><A HREF=\"%s/%s\">%s</a></center></td><td><center>%d</center></td></tr>\n", directory,namelist[loop]->d_name, namelist[loop]->d_name, size); 
| vs50: Log("Connection from %s, request = \"GET %s\"", ret, ptr); 
| vs51: no_vhosts=0; 
| vs52: vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost)); 
| vs53: int addrlen = sizeof(struct sockaddr_in); 
| vs54: unsigned int loop=0, flag=0; 
| vs55: int loop=0; 
| vs56: Log("Connection from %s", inet_ntoa(their_addr.sin_addr)); 
| vs57: strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin"); 
| vs58: send(sockfd, dirfooter, sizeof(dirfooter), 0); 
| vs59: size = get_file_size(tempstring); 
| vs60: strcpy(defaulthost.CGIBINDIR, ptr2); 
| vs61: strcpy(defaulthost.CGIBINROOT, ptr2); 
| vs62: strcpy(SERVERTYPE, ptr2); 
| vs63: strcpy(thevhost->host, ""); 
| vs64: int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */ 

rogram p ::= init ;  
Print the Grammar:
Variable var    
	%313, call.i9.i.i, %314, %315, call8.i.i.i, %312, %280, %281, %279, %282, %283, %284, %224, %225, call14.i224.i, %226, %227, call17.i227.i, %218, %219, %220, %221, call.i214.i, %222, %223, call8.i217.i, %473, %474, %475, %476, call5.i, %588, call46.i.i, %790, %532, %533, call.i.i.i47, %534, %535, call8.i.i.i50, call.i.i18, call2.i.i20, %278, %272, %276, %158, call40.i, call.i104, call2.i105, %579, %713, call.i4.i.i.i, %139, %109, %209, %214, tobool.i200.i, %215, tobool1.i201.i, %54, %103, %115, tobool1.i53.i, %178, tobool.i.i, %65, tobool1.i.i, %78, %34, tobool14.i, %708, %709, call18.i.i.i, %687, %401, %402, call52.i.i, %536, %537, call14.i.i.i57, %528, %529, %846, call.i79.i.i, call3.i.i.i, %410, %411, %418, %419, call14.i150.i.i, %420, %421, call17.i153.i.i, %848, %849, %896, call.i11.i, %897, %580, %671, %681, call66.i, %788, %547, %540, %560, call.i2.i.i, %567, %566, %561, %242, %986, %984, %1033, %1040, call.i.i83.i, %1046, %1047, %1048, %1049, %1050, %1051, %1052, %1053, call34.i.i179, %1054, call37.i.i, call38.i.i180, %1055, %1042, %1041, %1032, %987, %193, %194, %195, %196, call.i177.i, %197, %198, call8.i180.i, %1001, %403, %408, tobool.i126.i.i, %409, tobool1.i127.i.i, %517, %518, add.ptr.i.i, call6.i.i26, %977, %978, call1.i, call70.i, in.i.i, %773, %923, %945, %959, %989, %999, %980, call79.i, %949, call81.i, %953, call.i65.i, %954, %22, call1, call, arraydecay3.i, call.i.i47.i, %934, call.i45.i, %784, %775, call4, call3, %818, %819, call4.i107, %941, %866, %917, %869, call2, %921, call.i.i24.i, %922, call17.i, call.i, %801, %806, %807, %870, %872, %776, %782, %462, %29, host_ptr2.i.i, %703, %704, tempstring.i.i7, call5, %935, %939, %820, %940, %916, %960, %538, %539, call17.i.i.i60, %360, %361, %898, %422, %362, %363, call.i66.i.i, %364, %365, call8.i69.i.i, %738, call44.i.i.i, %1089, %216, %217, %241, %249, %250, call14.i261.i, %251, %252, call17.i264.i, %243, %244, %245, %246, call.i251.i, %247, %248, call8.i254.i, %310, %311, %208, call50.i, %299, call14.i278.i, call15.i.i, %306, tobool.i.i.i, %307, tobool1.i.i.i, %296, %297, %298, tobool21.i.i, %320, %301, %300, %375, %376, call45.i.i, %1023, %1024, %1025, %1026, %1027, call18.i.i, %1031, call.i4.i.i, %792, %797, %927, mimetype.i.i, %955, call.i22.i, call8, %878, call.i2.i, %879, %883, call.i.i.i146, %884, %885, %889, %91, %92, %99, %100, call14.i39.i, %101, %102, call17.i42.i, %93, %94, %95, %96, call.i29.i, %97, %98, call8.i32.i, %691, %594, call61.i.i, call63.i.i, %124, %125, call14.i76.i, %126, %127, call17.i79.i, %118, %119, %120, %121, call.i66.i, %122, %123, call8.i69.i, %43, %44, %45, %48, %46, %47, %384, %385, %392, %393, call14.i113.i.i, %394, %395, call17.i116.i.i, %545, %546, %358, %359, %366, %367, call14.i76.i.i, %368, %369, call17.i79.i.i, %715, %736, call37.i.i.i, %714, %89, tobool.i15.i, %271, call9.i.i, %234, %239, %128, %253, %59, tobool1.i90.i, %153, %35, call.i.i, %228, %55, %114, tobool1.i164.i, call2.i, %83, call26.i, %599, %662, %1021, %1022, call6.i, %835, %836, %834, %837, %838, %839, %844, tobool.i.i111, %845, tobool1.i.i112, %349, %350, call38.i.i, %641, call.i9, %502, %1017, call6.i.i166, %1018, call9.i.i167, %1019, %1020, %627, call.i65.i.i, %507, %1009, %1014, %1015, call.i79.i, call3.i.i, %1016, call5.i.i, %486, %166, %167, %174, %175, call14.i150.i, %176, %177, call17.i153.i, %168, %169, %170, %171, call.i140.i, %172, %173, call8.i143.i, %585, call38.i.i73, %308, %309, %316, %317, call14.i.i.i, %318, %319, call17.i.i.i, %749, %429, %434, tobool.i163.i.i, %435, tobool1.i164.i.i, %448, call66.i.i78, %723, %724, %604, call79.i.i, %631, %487, %598, %444, %445, call14.i187.i.i, %446, %447, call17.i190.i.i, %437, %436, %233, call55.i, %850, %851, call.i.i125, %852, %853, call8.i.i128, %758, %756, %412, %413, %414, %415, call.i140.i.i, %416, %417, call8.i143.i.i, %386, %387, %548, %637, %554, %635, %603, call.i.i24.i.i, call1.i12, %482, %621, %332, %333, %340, %341, call14.i39.i.i, %342, %343, call17.i42.i.i, %753, %750, %453, %454, call66.i.i, %108, call30.i, %145, %144, %146, call.i103.i, %147, %148, call8.i106.i, %143, %116, %117, %698, call5.i.i.i, %142, %141, %149, %150, call14.i113.i, %151, %152, call17.i116.i, %589, call49.i.i, %590, %591, %592, %760, %759, %438, %439, %565, call.i.i.i.i, call.i22.i.i, %1007, call.i45.i.i, call81.i.i, %488, %642, %659, %660, call12.i, %489, %605, %500, %478, %483, %192, %191, %199, %200, call14.i187.i, %201, %202, call17.i190.i, %183, call45.i, %1067, call93.i, %1068, %1072, %1077, %1078, %1088, call15, %617, %505, %616, %504, %485, call7.i14, %623, %636, %551, call17.i.i70, %519, %520, %521, %526, tobool.i.i.i32, %527, tobool1.i.i.i34, %66, %67, %74, %75, call14.i.i, %76, %77, call17.i.i, %68, %69, %70, %71, call.i9.i, %72, %73, call8.i.i, %38, %39, %37, %40, %41, %42, %285, %286, %287, %290, %288, %289, %461, call61.i, %705, %706, %707, %863, %864, %865, %858, %683, %699, call6.i.i.i, %700, call9.i.i.i, %571, %701, %702, tobool1.i238.i, %190, call7.i, %203, tobool.i163.i, %258, %264, %265, %266, call.i272.i, %267, call2.i.i, %268, call4.i.i, %269, call6.i.i, %270, call8.i273.i, tobool.i89.i, %84, %455, %344, %370, %377, %382, tobool.i89.i.i, %383, tobool1.i90.i.i, %351, %356, tobool.i52.i.i, %357, tobool1.i53.i.i, %325, %330, tobool.i15.i.i, %331, tobool1.i16.i.i, %396, %722, call.i.i83.i.i, %737, %728, %729, %730, %731, %732, %733, %734, %735, call34.i.i.i, call38.i.i.i, %668, %669, %578, call.i11.i.i, %666, %689, %277, call.i.i.i, %294, call11.i.i, %506, %477, %388, %389, call.i103.i.i, %390, %391, call8.i106.i.i, %609, %501, call11.i, %622, call.i.i47.i.i, %847, %854, %855, call14.i.i135, %856, %857, call17.i.i138, %440, %441, call.i177.i.i, %442, %443, call8.i180.i.i, %1005, %907, call49.i, %908, %909, %910, %427, %428, call59.i.i, %334, %335, %336, %337, call.i29.i.i, %338, %339, call8.i32.i.i, call93.i.i, %1056, call44.i.i184, %133, call35.i, %57, %58, tobool.i126.i, %165, tobool1.i127.i, %36, %52, tobool.i52.i, %30, %90, tobool1.i16.i, call8.i, %140, %64, %159, %164, %184, %189, %134, %56, tobool.i237.i, %240, %912, call61.i158, call63.i, %911, call58.i, %905, call44.i, %903, call38.i, %874, %906, call46.i, %696, %697, add.ptr57.i.i, call58.i.i, %587, call44.i.i, call4.i, %530, %531, 
Valid Statement VS ::= 
| :   %call12.i = call i32 @setenv(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i64 0, i64 0), i8* %479, i32 1) #11, !dbg !1120 
| :   store i32 0, i32* %retval.i.i.i1, align 4, !dbg !1289 
| :   store i32 1, i32* %retval.i.i.i1, align 4, !dbg !1288 
| :   store i32 1, i32* %retval.i.i.i1, align 4, !dbg !1279 
| :   %call.i.i18 = call i8* @strcpy(i8* %arraydecay.i.i17, i8* getelementptr inbounds ([255 x i8], [255 x i8]* @SERVERROOT, i64 0, i64 0)) #11, !dbg !1228 
| :   %call2.i.i20 = call i8* @strcat(i8* %arraydecay1.i.i19, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i64 0, i64 0)) #11, !dbg !1230 
| :   store i32 0, i32* %loop.i.i8, align 4, !dbg !1171 
| :   %call.i4.i.i.i = call i32 @stat(i8* %713, %struct.stat* %st.i3.i.i.i) #11, !dbg !1684 
| :   store i64 %715, i64* %size.i.i.i, align 8, !dbg !1690 
| :   %call.i.i83.i.i = call i32 @stat(i8* %722, %struct.stat* %st.i.i77.i.i) #11, !dbg !1697 
| :   %call34.i.i.i = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay25.i.i.i, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.30, i64 0, i64 0), i8* %728, i8* %arraydecay29.i.i.i, i8* %arraydecay33.i.i.i, i64 %735) #11, !dbg !1718 
| :   %call37.i.i.i = call i64 @strlen(i8* %arraydecay36.i.i.i) #12, !dbg !1723 
| :   store i64 0, i64* %size.i.i.i, align 8, !dbg !1707 
| :   store i64 0, i64* %retval.i1.i.i.i, align 8, !dbg !1688 
| :   store i8* %690, i8** %16, align 8, !dbg !1626 
| :   store i8* %667, i8** %21, align 8, !dbg !1600 
| :   %call.i2.i.i = call i32 @stat(i8* %560, %struct.stat* %st.i.i.i) #11, !dbg !1374 
| :   %call66.i.i78 = call i8* @strcat(i8* %arraydecay65.i.i77, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.25, i64 0, i64 0)) #11, !dbg !1463 
| :   store i32 0, i32* %retval.i8.i.i, align 4, !dbg !1411 
| :   %call46.i.i = call i32 @dup2(i32 %588, i32 0) #11, !dbg !1437 
| :   call void @setbuf(%struct._IO_FILE* %590, i8* null) #11, !dbg !1446 
| :   call void @setbuf(%struct._IO_FILE* %591, i8* null) #11, !dbg !1448 
| :   %call61.i.i = call i32 @chdir(i8* %arraydecay60.i.i) #11, !dbg !1458 
| :   %call63.i.i = call i32 (i8*, i8*, ...) @execl(i8* %arraydecay62.i.i, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i64 0, i64 0)) #11, !dbg !1460 
| :   %call58.i.i = call i32 @setenv(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.23, i64 0, i64 0), i8* %add.ptr57.i.i, i32 1) #11, !dbg !1455 
| :   store i32 -1, i32* %retval.i.i5, align 4, !dbg !1444 
| :   store i32 -1, i32* %retval.i.i5, align 4, !dbg !1434 
| :   store i32 -1, i32* %retval.i.i5, align 4, !dbg !1425 
| :   store i32 1, i32* %retval.i8.i.i, align 4, !dbg !1412 
| :   store i8 0, i8* %556, align 1, !dbg !1326 
| :   %call6.i.i26 = call i8* @strtok(i8* %add.ptr.i.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i64 0, i64 0)) #11, !dbg !1241 
| :   store i32 0, i32* %loop.i.i.i4, align 4, !dbg !1259 
| :   store i32 1, i32* %retval.i.i.i1, align 4, !dbg !1262 
| :   store %struct.t_vhost* %arrayidx14.i.i67, %struct.t_vhost** %thehost.i.i, align 8, !dbg !1295 
| :   store i32 %inc.i.i68, i32* %loop.i.i8, align 4, !dbg !1297 
| :   store i32 0, i32* %numbytes.i.i, align 4, !dbg !1175 
| :   store i32 16, i32* %addrlen.i.i, align 4, !dbg !1188 
| :   store %struct.t_vhost* @defaulthost, %struct.t_vhost** %thehost.i.i, align 8, !dbg !1301 
| :   %call17.i.i70 = call i32 @getpeername(i32 %548, %struct.sockaddr* %549, i32* %addrlen.i.i) #11, !dbg !1304 
| :   store i32 1, i32* %retval.i19.i.i, align 4, !dbg !1488 
| :   store i32 0, i32* %retval.i.i5, align 4, !dbg !1740 
| :   store i32 0, i32* %retval, align 4, !dbg !1743 
| :   %call79.i.i = call i64 @strlen(i8* %arraydecay78.i.i) #12, !dbg !1520 
| :   store i64 0, i64* %size.i.i.i, align 8, !dbg !1572 
| :   store i8* %659, i8** %20, align 8, !dbg !1591 
| :   store i64 %663, i64* %19, align 8, !dbg !1598 
| :   store i64 %684, i64* %15, align 8, !dbg !1623 
| :   %call.i79.i.i = call i64 @strlen(i8* %arraydecay2.i.i.i) #12, !dbg !1635 
| :   %call5.i.i.i = call i64 @send(i32 %698, i8* %arraydecay4.i.i.i, i64 2048, i32 0) #11, !dbg !1641 
| :   %call6.i.i.i = call i32 @scandir(i8* %699, %struct.dirent*** %namelist.i.i.i, i32 (%struct.dirent*)* null, i32 (%struct.dirent**, %struct.dirent**)* @alphasort) #11, !dbg !1645 
| :   %call9.i.i.i = call i64 @strlen(i8* %arraydecay8.i.i.i) #12, !dbg !1649 
| :   store i32 0, i32* %loop.i78.i.i, align 4, !dbg !1656 
| :   %call44.i.i.i = call i64 @send(i32 %738, i8* %arraydecay43.i.i.i, i64 191, i32 0) #11, !dbg !1733 
| :   store i32 0, i32* %retval.i.i5, align 4, !dbg !1735 
| :   %call18.i.i.i = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay14.i.i.i, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i64 0, i64 0), i8* %arraydecay16.i.i.i, i8* %706, i8* %arraydecay17.i.i.i) #11, !dbg !1672 
| :   call void (i8*, ...) @Log(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), i32 %call7.i14) #11, !dbg !1116 

Statement s ::= 
Program p ::= init ;  
ANALYSIS ENDS, TOTAL TIME: 217.000000 sec 

Statement s ::= 
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;Trim: empty stmt;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;thehost = &defaulthost;;getpeername(sockfd, (struct sockaddr *)&sa, &addrlen);;Log("Connection from %s, request = \"GET %s\"", ret, ptr);;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;
|int xx=0, sockfd, new_fd, numbytes=0;  /* listen on sock_fd, new connection on new_fd */;strcpy(defaulthost.DOCUMENTROOT, "/usr/local/ghttpd/htdocs");;strcpy(defaulthost.DEFAULTPAGE, "index.html");;strcpy(defaulthost.CGIBINDIR, "/cgi-bin");;strcpy(defaulthost.CGIBINROOT, "/usr/local/ghttpd/cgi-bin");;no_vhosts = count_vhosts();;vhosts = (t_vhost *)malloc((no_vhosts+1) * sizeof(t_vhost));;char *ptr1=0, *ptr2=0;;int loop=0;;i = 1;;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (void*)&i, i);;my_addr.sin_family = AF_INET;         /* host byte order */;my_addr.sin_port = htons(SERVERPORT);     /* short, network byte order */;my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */;char *a = dst;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;*a++ = s;;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;strcpy(filename, SERVERROOT);;strcat(filename, "/cmderror.html");;unsigned int loop=0, flag=0;;int numbytes=0;;int addrlen = sizeof(struct sockaddr_in);;thehost = &defaulthost;;host_ptr1 = strstr(tempdata, "Host:");;
Program p ::= init ; s 