
안녕하십니까. hcode를 만든 이준엽입니다.
요즈음 조합형 한글에 대한 여러분들의 의견을 듣고,
저도 한 말씀 드릴까 합니다.

English Summary : In this article, I classify every possible
Johab-hyung Hangul Code set and disscuss on the merit and the
disadvantage of each code set. So that we could easily see the
differences between two proposals by Mr. Song, Jaekyung and Mr.
Kim, kyuho. Finally, suggest a proposal for compatibility with
WanSungHyung Hangul.


Document : On March 11 1992.
June-Yub Lee. jylee@math1.nyu.edu or jylee@math1.kaist.ac.kr.


I. 들어가는 말.
---------------
한글은 보는 관점에 따라,
1. 음절문자 (That's not the same but non-korean code makers call it
    "square character")로 보아 완성형 한글로 사용 하는 경우와,
2. 초성+중성+종성을 하나의 글자로 생각하여 조합형 한글로 사용 하는 경우,
3. 중성 혹은 종성이 1 혹은 2 개의 더 작은 글자 (음소?, alphabet, component)의
     합성입을 생각하여 N-Byte Code를 사용 하는 경우
의 3 가지 경우가 있읍니다.

N-byte 한글 코드는 한글 자판 입력과 같은 경우에, 조합형 코드는
한글을 내부적으로 처리하는 모든 응용 Program의 경우에, 그리고
완성형은 한글 처리 능력이 없는 Application의 경우에 주로 사용됩니다.

따라서, 한글을 처리하는 모든 경우에 내부적으로는 반드시 조합형
한글 코드가 필요하고, 이를 위해 여려 사람들의 의견을 종합한
코드를 만드는 일은 매우 중요하다고 하겠읍니다.


II. 조합형 한글의 분류.
-----------------------
조합형 한글은 초성,중성,종성의 한글을 몇개의 집합으로
나누었느냐에 따라, 다음과 같이 구분 할 수 있읍니다.

1벌식 : (초,중,종성)을 같은 집합에 포함시키고, 위치에 따라 구별.
2벌식 : 자음=(초,종성)을 같은 집합에 포함시키고, 모음=(중성)을
        별도로 하고, 초성과 종성의 구별은 Hangul Automata를 이용.
3벌식 : (초성),(중성),(종성)을 각각의 집합으로 함.
4벌식 : (초성),(중성 with 종성),(중성 without 종성),(종성)
5벌식 : (초성 with 중성),(초성 without 중성),
	(중성 with 종성),(중성 without 종성),(종성)

이해를 돕기 위해 예를 들면, 
삼보 조합형은 5bit=32char 1벌식이고, 김규호님이 제안하신 조합형은
94char 1벌식 입니다. N-byte 입력을 1 혹은 2 씩 묶어서 만든 Hangul
Automata의 중간 코드는 2벌식 입니다. 송재경씨가 제안하신 조합형은
32char 3벌식 (=total 94char set) 입니다. 기계식 타자기는 주로
4벌식이 이용 되었읍니다.

III. 조합형 코드의 구현 방법과 장단점.
--------------------------------------
조합형 코드의 구현 방법을 설명하기 이전에, 한글을 초중종성의 조합 방법에
따라 다음과 같은 6가지의 경우로 나누는 것이 편리하겠읍니다.
Class A : 초중, 초중종 (완전한 한글). 
Class B : 초성, 중성   (불완전한 한글).
Class C : 종성, 중성종성 (불완전한 한글).
주: 초성+종성 의 경우는 제외 했읍니다.  (이것도 한글인가요?)

1벌식 : 일반적으로 3개의 고정된 길이로 구성하여, 초중종성을 구별하고
	빈 자리에는 채움 문자를 넣읍니다. 채움문자 이외에 끝남문자를
	지정하여 Class B 한글에 2개의 자리만을 할당할 수 있지만, 처리가
	복잡해지는 만큼의 큰 이익은 없읍니다. 따라서, 3개의 고정된
	자리를 사용하면, 손 쉬운 한글 처리를 할 수 있읍니다.
	이 코드의 장점은 코드의 수를 최소로 할 수 있다는 점입니다.
	삼보코드는 32char*3space = 15 bit에 한글 한자를 넣을 수
	있었던 것도 코드 수를 최소로 하여  가능하였지요.

2벌식 : 이 코드의 장점은 받침이 없는 글자에는 2개의 자리만을 할당
	할 수 있다는 점입니다. 반면, 모음 다음에 나오는 자음이
	받침인지, 다음 글자의 초성인가를 알기 위해서는 최소한
	다음 2개의 읽거나(2 field forward scanning), Backward scanning
	(refered by Mr. Song) 기능을 가진 Hangul Automata가 필요합니다.
	또한 Class B,C 의 글자들을 처리하기 상당히 복잡한
	채움문자 규칙이 필요합니다.

3,4벌식 : 이 코드의 장점은 복잡한 Hangul Automata의 도움 없이도,
	2 field 한글을 구현할 수 있다는 점입니다. 모음 다음에 나오는
	자음이 받침인지 다음 글자의 초성인가를 알 수 있기 때문에,
	바로 다음 입력으로도 이전 글자를 완성 할 수 있읍니다.
	(1 field forward scanning - this is possible without automata)
	4벌식은 Class A : 초중, 초중종 (완전한 한글)을 forward scan
	없이 구현 할 수 있는 최소 코드이기 때문에, 기계식 타자기에 이용
	되었읍니다. B,C Class 한글에서 약간의 자리를 줄일 수도 있다.

5벌식 : Class B,C 를 포함하는 모든 한글을 forward scan 없이 처리 할 수
	있고, 음소 수와  record field 수가 일치 합니다. 예로,
	(초성)=(초성 without 중성), (중성)=(중성 without 종성),
	(종성)=(종성),  (중성,종성)=(중성 with 종성, 종성).
	또한 채움문자와 같은 separator를 사용하지 않을 수 있읍니다.
	forward scan 이나 recoed field 보다도 더욱 5벌식의 장점은
	zero-width (or ^H for backspace) 를 지원하는 모든
	장치에서도 (빈약하나마) 사용 되어질 수 있읍니다.
	그렇지 않은 장치에서는 한글 풀어쓰기로 보이지요.

6+벌식 : 단지 글자의 모양을 정확히 선택해 줍니다. Communication
	Code로는 별 의미가 없어서 생략 합니다.

IV. 또 다른 하나의 제안.
------------------------
몇 벌식으로 하느냐에 앞서 결정해야 될 일은 한벌에 몇개의 음소를
넣느냐입니다. 32개와 94개 모두 다 일리가 있는 주장이라고 생각됩니다.
그러나, 제 생각으로는 고어를 포함한 94개가 필요할 것 같읍니다.
이왕에 만들어진 완성형이 있는 이상 일상적인 문서는 KSC 코드로도
아쉬우나마 사용할 수가 있고, 완성형에 없는 글자를 다루는 코드를
만들때는 고어도 포함시켜야 되지 않을까요? 그렇지 않으면, 고어코드를
다시 한번 만드는 사태가 필시 올 것 같읍니다.

1벌식의 장점은 약 33% ( 3char,1벌식 : 3char*1/3+2char*2/3=7/3,3벌식)
의 자리를 더 사용하는 대신, 처리하기 쉽고 작은 크기(94)의 코드를
만들 수 있다는 것이고, 3벌식의 장점은 32개의 코드를 3벌식으로
표현하여 94개의 ISO-2022 Standard 영역에 넣을 수 있다는 것입니다.
5벌식은 forward scan 없시도 한글을 구현할 수 있기 때문에
국제적인 Application에서도 큰 문제 없이 사용 할 수 있읍니다.

제 생각으로는 KSC-5601, ISO-2022와의 호환성을 고려하여,
n벌식을 다음과 같이 구현하면 좋을 것 같읍니다.
KSC의 첫번째 Byte중, 빈 n개의 (say a5,a6,...) 자리로 Set을
구별하고, 두번째 Byte에 94개 까지의 음소를 배열합니다. 
그렇지 않는 경우, MSB를 Set up하여 사용하는 Localized Enviroment
에서는 KSC와 n벌식 조합형(ISO-2022)의 구별이 불가능 합니다.

이런 구현은 한글자에 최고 6byte(1/3) 까지 필요하다는 문제가 있지만,
받침없는 경우(4byte:2/3), 초중종 낱자(2byte), English/space(1byte)
임을 고려하면 50% 이상의 Space를 더 차지하지는 않을 것 같읍니다.
만약 KSC 완성형과 함께 쓴다면 1벌식 보다 경제적입니다.
또한 N-벌식을 쉽게 구성할 수 있고, Non-Korean Enviroment를
고려하여 5벌식을 쓸수 있읍니다.

