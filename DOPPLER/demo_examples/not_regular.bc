; ModuleID = 'not_regular.c'
source_filename = "not_regular.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"b\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @f(i32 %a1) #0 !dbg !9 {
entry:
  %retval = alloca i32, align 4
  %a1.addr = alloca i32, align 4
  %a = alloca i32, align 4
  %count1 = alloca i32, align 4
  %count2 = alloca i32, align 4
  store i32 %a1, i32* %a1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a1.addr, metadata !13, metadata !DIExpression()), !dbg !14
  call void @llvm.dbg.declare(metadata i32* %a, metadata !15, metadata !DIExpression()), !dbg !16
  %0 = load i32, i32* %a1.addr, align 4, !dbg !17
  store i32 %0, i32* %a, align 4, !dbg !16
  %1 = load i32, i32* %a, align 4, !dbg !18
  %cmp = icmp slt i32 %1, 0, !dbg !20
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !21

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %a, align 4, !dbg !22
  %cmp1 = icmp sgt i32 %2, 10, !dbg !23
  br i1 %cmp1, label %if.then, label %if.end, !dbg !24

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4, !dbg !25
  br label %return, !dbg !25

if.end:                                           ; preds = %lor.lhs.false
  call void @llvm.dbg.declare(metadata i32* %count1, metadata !27, metadata !DIExpression()), !dbg !28
  store i32 0, i32* %count1, align 4, !dbg !28
  br label %while.cond, !dbg !29

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load i32, i32* %count1, align 4, !dbg !30
  %4 = load i32, i32* %a, align 4, !dbg !31
  %cmp2 = icmp slt i32 %3, %4, !dbg !32
  br i1 %cmp2, label %while.body, label %while.end, !dbg !29

while.body:                                       ; preds = %while.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !33
  %5 = load i32, i32* %count1, align 4, !dbg !35
  %inc = add nsw i32 %5, 1, !dbg !35
  store i32 %inc, i32* %count1, align 4, !dbg !35
  br label %while.cond, !dbg !29, !llvm.loop !36

while.end:                                        ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %count2, metadata !39, metadata !DIExpression()), !dbg !40
  store i32 0, i32* %count2, align 4, !dbg !40
  br label %while.cond3, !dbg !41

while.cond3:                                      ; preds = %while.body5, %while.end
  %6 = load i32, i32* %count2, align 4, !dbg !42
  %7 = load i32, i32* %count1, align 4, !dbg !43
  %cmp4 = icmp slt i32 %6, %7, !dbg !44
  br i1 %cmp4, label %while.body5, label %while.end8, !dbg !41

while.body5:                                      ; preds = %while.cond3
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !45
  %8 = load i32, i32* %count2, align 4, !dbg !47
  %inc7 = add nsw i32 %8, 1, !dbg !47
  store i32 %inc7, i32* %count2, align 4, !dbg !47
  br label %while.cond3, !dbg !41, !llvm.loop !48

while.end8:                                       ; preds = %while.cond3
  store i32 0, i32* %retval, align 4, !dbg !50
  br label %return, !dbg !50

return:                                           ; preds = %while.end8, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !51
  ret i32 %9, !dbg !51
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 !dbg !52 {
entry:
  %retval = alloca i32, align 4
  %a = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @llvm.dbg.declare(metadata i32* %a, metadata !55, metadata !DIExpression()), !dbg !56
  %0 = bitcast i32* %a to i8*, !dbg !57
  call void @klee_make_symbolic(i8* %0, i64 4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !58
  %1 = load i32, i32* %a, align 4, !dbg !59
  %call = call i32 @f(i32 %1), !dbg !60
  ret i32 %call, !dbg !61
}

declare dso_local void @klee_make_symbolic(i8*, i64, i8*) #2

attributes #0 = { noinline nounwind uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5, !6, !7}
!llvm.ident = !{!8}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 13.0.1-2ubuntu2.2", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "not_regular.c", directory: "/home/gok99/Local/doppler/DOPExploit/MyDOP/toy_examples")
!2 = !{}
!3 = !{i32 7, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{i32 7, !"uwtable", i32 1}
!7 = !{i32 7, !"frame-pointer", i32 2}
!8 = !{!"Ubuntu clang version 13.0.1-2ubuntu2.2"}
!9 = distinct !DISubprogram(name: "f", scope: !1, file: !1, line: 10, type: !10, scopeLine: 10, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!10 = !DISubroutineType(types: !11)
!11 = !{!12, !12}
!12 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!13 = !DILocalVariable(name: "a1", arg: 1, scope: !9, file: !1, line: 10, type: !12)
!14 = !DILocation(line: 10, column: 11, scope: !9)
!15 = !DILocalVariable(name: "a", scope: !9, file: !1, line: 11, type: !12)
!16 = !DILocation(line: 11, column: 9, scope: !9)
!17 = !DILocation(line: 11, column: 13, scope: !9)
!18 = !DILocation(line: 13, column: 9, scope: !19)
!19 = distinct !DILexicalBlock(scope: !9, file: !1, line: 13, column: 9)
!20 = !DILocation(line: 13, column: 11, scope: !19)
!21 = !DILocation(line: 13, column: 15, scope: !19)
!22 = !DILocation(line: 13, column: 18, scope: !19)
!23 = !DILocation(line: 13, column: 20, scope: !19)
!24 = !DILocation(line: 13, column: 9, scope: !9)
!25 = !DILocation(line: 14, column: 9, scope: !26)
!26 = distinct !DILexicalBlock(scope: !19, file: !1, line: 13, column: 26)
!27 = !DILocalVariable(name: "count1", scope: !9, file: !1, line: 17, type: !12)
!28 = !DILocation(line: 17, column: 9, scope: !9)
!29 = !DILocation(line: 18, column: 5, scope: !9)
!30 = !DILocation(line: 18, column: 12, scope: !9)
!31 = !DILocation(line: 18, column: 21, scope: !9)
!32 = !DILocation(line: 18, column: 19, scope: !9)
!33 = !DILocation(line: 19, column: 9, scope: !34)
!34 = distinct !DILexicalBlock(scope: !9, file: !1, line: 18, column: 24)
!35 = !DILocation(line: 20, column: 15, scope: !34)
!36 = distinct !{!36, !29, !37, !38}
!37 = !DILocation(line: 21, column: 5, scope: !9)
!38 = !{!"llvm.loop.mustprogress"}
!39 = !DILocalVariable(name: "count2", scope: !9, file: !1, line: 22, type: !12)
!40 = !DILocation(line: 22, column: 9, scope: !9)
!41 = !DILocation(line: 23, column: 5, scope: !9)
!42 = !DILocation(line: 23, column: 12, scope: !9)
!43 = !DILocation(line: 23, column: 21, scope: !9)
!44 = !DILocation(line: 23, column: 19, scope: !9)
!45 = !DILocation(line: 24, column: 9, scope: !46)
!46 = distinct !DILexicalBlock(scope: !9, file: !1, line: 23, column: 29)
!47 = !DILocation(line: 25, column: 15, scope: !46)
!48 = distinct !{!48, !41, !49, !38}
!49 = !DILocation(line: 26, column: 5, scope: !9)
!50 = !DILocation(line: 28, column: 5, scope: !9)
!51 = !DILocation(line: 29, column: 1, scope: !9)
!52 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 31, type: !53, scopeLine: 31, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!53 = !DISubroutineType(types: !54)
!54 = !{!12}
!55 = !DILocalVariable(name: "a", scope: !52, file: !1, line: 32, type: !12)
!56 = !DILocation(line: 32, column: 9, scope: !52)
!57 = !DILocation(line: 34, column: 24, scope: !52)
!58 = !DILocation(line: 34, column: 5, scope: !52)
!59 = !DILocation(line: 36, column: 14, scope: !52)
!60 = !DILocation(line: 36, column: 12, scope: !52)
!61 = !DILocation(line: 36, column: 5, scope: !52)
